<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Integralist: BBC News Engineer]]></title><description><![CDATA[I aim to implement Object-Oriented Design principles in which ever language I happen to be using (Node, Ruby, PHP, JavaScript, CSS/BEM)]]></description><link>http://www.integralist.co.uk/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 12 Jan 2014 15:52:48 GMT</lastBuildDate><atom:link href="http://www.integralist.co.uk/feed.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Mark McDonnell]]></author><pubDate>Sun, 12 Jan 2014 15:52:48 GMT</pubDate><copyright><![CDATA[2014 Mark McDonnell]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[mark.mcdx@gmail.com]]></managingEditor><webMaster><![CDATA[mark.mcdx@gmail.com]]></webMaster><ttl>60</ttl><item><title><![CDATA[Building a CLI tool with Node]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 15mins</em></p>
<ul>
<li>Introduction</li>
<li>Secret Sauce</li>
<li>Node/NPM Installation</li>
<li>Process</li>
<li>Automation</li>
<li>PhantomJS</li>
<li>Squirrel</li>
<li>How it works</li>
<li>The Code</li>
<li>Packaging</li>
<li>Publishing</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>I&#39;m going to introduce to you the concepts and techniques required to build a command line tool utilising <a href="http://nodejs.org/">Node.js</a>.</p>
<p>Building a command line tool gives you the opportunity to automate a particular process that would otherwise take you a lot longer to do manually or by yourself.</p>
<p>There are command line tools built in a myriad of different languages and the one we&#39;ll be focusing on is <a href="http://nodejs.org/">Node.js</a>. </p>
<p>For those short on time I&#39;ve condensed the core principles for you into a bullet pointed list to help you on your way. This is the &#39;secret sauce&#39; for converting your node script into a fully functioning command line tool. But I do hope you&#39;ll stick around a bit longer to see what else I have to show you...</p>
<h2><a name="secret-sauce" class="anchor" href="#secret-sauce"><span class="header-link"></span></a>Secret Sauce</h2>
<ul>
<li>In your <code>package.json</code> file include the settings:<ul>
<li><code>&quot;preferGlobal&quot;: &quot;true&quot;</code></li>
<li><code>&quot;bin&quot;: { &quot;name-of-command&quot;: &quot;path-to-script.js&quot; }</code></li>
</ul>
</li>
<li>Add <code>#! /usr/bin/env node</code> to your <code>path-to-script.js</code></li>
<li>To test your new command <code>name-of-command</code> use <code>npm link</code></li>
</ul>
<p>That&#39;s it. The rest of what you need to do is decide what functionality you want to implement.</p>
<h2><a name="nodenpm-installation" class="anchor" href="#nodenpm-installation"><span class="header-link"></span></a>Node/NPM Installation</h2>
<p>To install Node you have a few options:</p>
<ul>
<li><a href="http://nodejs.org/download/">OS specific installer</a> for Windows, Mac or binary</li>
<li><a href="http://brew.sh/">Homebrew</a>: <code>brew install node</code></li>
<li><a href="https://github.com/isaacs/nave#nave">Nave</a></li>
<li><a href="https://github.com/creationix/nvm#node-version-manager">NVM</a></li>
</ul>
<p>Note: NPM is installed as part of Node so there is no separate installation</p>
<p>To test that Node and NPM is installed correctly, run the following commands in your terminal:</p>
<ul>
<li><code>node --version</code></li>
<li><code>npm --version</code></li>
</ul>
<h2><a name="process" class="anchor" href="#process"><span class="header-link"></span></a>Process</h2>
<p>Let&#39;s consider an example process: generating an Application Cache Manifest file.</p>
<p>If <a href="http://www.html5rocks.com/en/tutorials/appcache/beginner/">AppCache</a> is unfamiliar to you, here is a short description: it allows you to take your application offline by specifying pages and resources to cache in case the user loses their internet connection; or tries to access your application later when they&#39;re no longer online.</p>
<p>Typically you&#39;ll create a <a href="http://appcachefacts.info/">appcache.manifest</a> file which you&#39;ll specify the configuration details of your offline requirements.</p>
<p>I won&#39;t go into too much detail about AppCache itself as that will be a distraction for the purpose of what we want to focus on, but below is an example file...</p>
<pre><code><div class="highlight"><pre><span class="nx">CACHE</span> <span class="nx">MANIFEST</span>

<span class="nx">CACHE</span><span class="o">:</span>
<span class="nx">foo</span><span class="p">.</span><span class="nx">jpg</span>
<span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
<span class="nx">offline</span><span class="p">.</span><span class="nx">html</span>
<span class="nx">styles</span><span class="p">.</span><span class="nx">css</span>
<span class="nx">behaviours</span><span class="p">.</span><span class="nx">js</span>

<span class="nx">NETWORK</span><span class="o">:</span>
<span class="o">*</span>

<span class="nx">FALLBACK</span><span class="o">:</span>
<span class="err">/ /offline.html</span>
</pre></div>
</code></pre>
<p>As you can see we&#39;ve specified...</p>
<ul>
<li>a jpg image</li>
<li>two HTML files</li>
<li>a CSS file</li>
<li>a JavaScript file</li>
</ul>
<p>These are the resources we want to cache in case the user goes offline.</p>
<p>We&#39;ve also specified that all items requested by the user should require a network to be accessed.</p>
<p>Finally, we state that any file we access and which we&#39;ve not cached should redirect the user to a file called <code>offline.html</code></p>
<h2><a name="automation" class="anchor" href="#automation"><span class="header-link"></span></a>Automation</h2>
<p>Having to manually look up all the images, style sheets, scripts and other pages linked from a web page would be tedious.</p>
<p>Generating an appcache manifest file is the process we want to try and automate. </p>
<p>We can do this by writing some Node code along with some additional tools, but that isn&#39;t very easy to consume (even for us writing the script) as we would need to open up the code and to tell it which web page we want it to interrogate.</p>
<p>We also want other people to have the benefit of this tool, without them needing to download a folder full of code; asking them to change specific lines of code; as well as running specific commands to run the scripts.</p>
<p>That&#39;s where making a command line tool is going to help.</p>
<h2><a name="phantomjs" class="anchor" href="#phantomjs"><span class="header-link"></span></a>PhantomJS</h2>
<p>First of all we want to figure out how we&#39;re going to solve this problem.</p>
<p>We&#39;ll be using a tool called <a href="http://phantomjs.org/">PhantomJS</a> which is a headless (i.e. chromeless) browser. </p>
<p>Specifically it&#39;s a headless <a href="http://www.webkit.org/">WebKit</a> which provides a JavaScript API we can tap into and will let us do things such as open up web pages and analyse their network requests (amongst many other things, but those are the two fundamental aspects we&#39;re interested in).</p>
<p>There is a node module we can use to load up PhantomJS and start interacting with its API. We&#39;ll be using that to get us started.</p>
<p>We can then convert our code into a command line tool with relative ease using Node&#39;s package manager <a href="https://npmjs.org/">NPM</a> and a <code>package.json</code> file.</p>
<h2><a name="squirrel" class="anchor" href="#squirrel"><span class="header-link"></span></a>Squirrel</h2>
<p>Luckily enough I&#39;ve already done the work for you. It&#39;s an open source project called <a href="https://github.com/Integralist/Squirrel#squirrel">Squirrel.js</a>.</p>
<p>To install it run the command: <code>npm install -g squirrel-js</code>.</p>
<p>Once installed you can use it by running the command: <code>squirrel [url]</code></p>
<p>An example would be <code>squirrel bbc.co.uk/news</code></p>
<p>This would generate (in the current directory) an <code>appcache.manifest</code> populated with all relevant page resources.</p>
<h2><a name="how-it-works" class="anchor" href="#how-it-works"><span class="header-link"></span></a>How it works</h2>
<p>I started off Squirrel by first writing the relevant Node/PhantomJS code which incorporated the functionality I was after.</p>
<p>I then added an additional script which bootstrapped that code and would allow me to take in arguments that configured how the code ran.</p>
<p>What I ended up with was two scripts:</p>
<ul>
<li><a href="https://github.com/Integralist/Squirrel/blob/master/lib/squirrel.js"><code>squirrel.js</code></a></li>
<li><a href="https://github.com/Integralist/Squirrel/blob/master/lib/appcache.js"><code>appcache.js</code></a></li>
</ul>
<p>The first does the set-up work:</p>
<ul>
<li>We specify the environment we want the script to be executed by (in this case Node)</li>
<li>We parse the arguments passed by the user</li>
<li>We read a dummy/internal appcache.manifest file</li>
<li>We open a shell child process and call PhantomJS and pass it the script we want it to execute (in this case <code>appcache.js</code>) and the dummy manifest file</li>
<li>When the second script finishes its work (collating the web page data) we return to this first script and then display some statistic information for the user and generate the manifest file.</li>
</ul>
<p>The second script handles the processing of the web page the user has requested:</p>
<ul>
<li>We take in the dummy manifest file</li>
<li>Create listeners for page resources that are requested</li>
<li>Set the viewport size</li>
<li>Open the web page and store off the resources</li>
<li>Get all links from the page (we do this by executing JavaScript code directly in the web page)</li>
<li>Convert the content of the manifest and inject the resources found and then return that as a JSON file</li>
</ul>
<h2><a name="the-code" class="anchor" href="#the-code"><span class="header-link"></span></a>The Code</h2>
<p>Now you understand the steps the code takes, let&#39;s start reviewing the code. We&#39;ll display the code as a whole and then run through it piecemeal.</p>
<h3><a name="squirrel-js" class="anchor" href="#squirrel-js"><span class="header-link"></span></a>squirrel.js</h3>
<pre><code><div class="highlight"><pre><span class="err">#</span><span class="o">!</span> <span class="err">/usr/bin/env node</span>

<span class="kd">var</span> <span class="nx">userArguments</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// copies arguments list but removes first two options (script exec type &amp; exec location)</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">userArguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Only one argument should be specified (the url you want to generate the appcache for)&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">fs</span>               <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">shell</span>            <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;child_process&#39;</span><span class="p">).</span><span class="nx">execFile</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">phantomjs</span>        <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;phantomjs&#39;</span><span class="p">).</span><span class="nx">path</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">scriptToExecute</span>  <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/appcache.js&#39;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">manifest</span>         <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/../appcache.manifest&#39;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">url</span>              <span class="o">=</span> <span class="nx">userArguments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">manifestContent</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">data</span><span class="p">;</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">manifest</span><span class="p">,</span> <span class="nx">bootstrap</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">bootstrap</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">contentAsBuffer</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>

    <span class="nx">manifestContent</span> <span class="o">=</span> <span class="nx">contentAsBuffer</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">&#39;utf8&#39;</span><span class="p">);</span>

    <span class="nx">shell</span><span class="p">(</span><span class="nx">phantomjs</span><span class="p">,</span> <span class="p">[</span><span class="nx">scriptToExecute</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">manifestContent</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stdout</span><span class="p">,</span> <span class="nx">stderr</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>

        <span class="c1">// Sometimes an error in the loaded page&#39;s JavaScript doesn&#39;t get picked up or thrown?</span>
        <span class="c1">// But the error comes in via stdout and causes JSON parsing to break</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">stdout</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Whoops! Seems there was an error? You\&#39;ll find the stack trace below.&#39;</span><span class="p">);</span>
            <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="nx">displayStatistics</span><span class="p">();</span>
        <span class="nx">createManifestFile</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">displayStatistics</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// adds extra line of spacing when displaying the results</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Links: &#39;</span>      <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">links</span><span class="p">);</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Images: &#39;</span>     <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">images</span><span class="p">);</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CSS: &#39;</span>        <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">css</span><span class="p">);</span>
    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;JavaScript: &#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">javascript</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">createManifestFile</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;/appcache.manifest&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">manifestContent</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>

        <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;\nManifest file created&#39;</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">message</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>The first line <code>#! /usr/bin/env node</code> is critical for the script to be used within the context of a shell. We need to inform the shell what process should handle the script.</p>
<p>Next we want to retrieve the arguments passed into the command. If we run <code>squirrel bbc.co.uk/news</code> then <code>process.argv</code> will be an Array containing:</p>
<ul>
<li>the script execution type (<code>node</code>)</li>
<li>the script being executed (<code>squirrel.js</code>)</li>
<li>any other arguments (in this instance we only have one other argument: <code>bbc.co.uk/news</code>) </li>
</ul>
<p>We ignore the first two arguments and store off the user specific arguments so we can reference them later: </p>
<p><code>var userArguments = process.argv.slice(2);</code></p>
<p>Our script only knows how to handle a single argument (the page url to load). The following line isn&#39;t really needed as we&#39;ll ignore any more than one argument, but it&#39;s useful for the code to have clear intent and so we throw an error if more than one argument is passed...</p>
<pre><code><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">userArguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Only one argument should be specified (the url you want to generate the appcache for)&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>Because we&#39;re using PhantomJS we&#39;ll need to open up a shell and call the <code>phantomjs</code> command: </p>
<p><code>var shell = require(&#39;child_process&#39;).execFile;</code></p>
<p>We also need to get a reference to the <code>bin</code> directory where the PhantomJS executable is stored:</p>
<p><code>var phantomjs = require(&#39;phantomjs&#39;).path;</code></p>
<p>Next we store a reference to the script we want PhantomJS to execute; as well as the dummy manifest file:</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">scriptToExecute</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/appcache.js&#39;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">manifest</span>        <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/../appcache.manifest&#39;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">url</span>             <span class="o">=</span> <span class="nx">userArguments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</pre></div>
</code></pre>
<p>As the PhantomJS script we&#39;ll be executing needs a reference to the dummy manifest file, we&#39;ll asynchronously read the content of the file and then pass it over to a bootstrap function:</p>
<p><code>fs.readFile(manifest, bootstrap);</code></p>
<p>Our <code>bootstrap</code> function does exactly what you would expect; it starts up our application, in this case by opening the shell and calling PhantomJS (you&#39;ll also notice that Node passed the content of the manifest as a Buffer, which we need to convert back into a String):</p>
<pre><code><div class="highlight"><pre><span class="kd">function</span> <span class="nx">bootstrap</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">contentAsBuffer</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>

    <span class="nx">manifestContent</span> <span class="o">=</span> <span class="nx">contentAsBuffer</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">&#39;utf8&#39;</span><span class="p">);</span>

    <span class="nx">shell</span><span class="p">(</span><span class="nx">phantomjs</span><span class="p">,</span> <span class="p">[</span><span class="nx">scriptToExecute</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">manifestContent</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stdout</span><span class="p">,</span> <span class="nx">stderr</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// code...</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>At this point in the code execution we would be within the <code>appcache.js</code> file. </p>
<p>We&#39;ll move over to there now...</p>
<h3><a name="appcache-js" class="anchor" href="#appcache-js"><span class="header-link"></span></a>appcache.js</h3>
<p>The purpose of <code>appcache.js</code> is to get information from the user requested page and to pass it back to <code>squirrel.js</code> to process.</p>
<p>Again we&#39;ll start by seeing the script as a whole and then we&#39;ll break down the individual parts (don&#39;t worry, we won&#39;t be going over each line of code, only the important parts):</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">unique</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;lodash.uniq&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">system</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;system&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">fs</span>         <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">page</span>       <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">args</span>       <span class="o">=</span> <span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">manifest</span>   <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">css</span>        <span class="o">=</span> <span class="p">[];</span>
<span class="kd">var</span> <span class="nx">images</span>     <span class="o">=</span> <span class="p">[];</span>
<span class="kd">var</span> <span class="nx">javascript</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">var</span> <span class="nx">links</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">url</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">path</span><span class="p">;</span>

<span class="nx">bootstrap</span><span class="p">();</span>
<span class="nx">pageSetUp</span><span class="p">();</span>
<span class="nx">openPage</span><span class="p">();</span>

<span class="kd">function</span> <span class="nx">bootstrap</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">urlProvided</span><span class="p">())</span> <span class="p">{</span>
        <span class="nx">url</span> <span class="o">=</span> <span class="nx">cleanUrl</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">error</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Sorry a valid URL could not be recognised&#39;</span><span class="p">);</span>
            <span class="nx">error</span><span class="p">.</span><span class="nx">additional</span> <span class="o">=</span> <span class="s1">&#39;Valid URL Example: bbc.co.uk/news&#39;</span><span class="p">;</span>

        <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>

        <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">bbcNews</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">// We want to serve up the responsive code base...</span>
        <span class="nx">phantom</span><span class="p">.</span><span class="nx">addCookie</span><span class="p">({</span>
            <span class="s1">&#39;name&#39;</span>  <span class="o">:</span> <span class="s1">&#39;ckps_d&#39;</span><span class="p">,</span>
            <span class="s1">&#39;value&#39;</span> <span class="o">:</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span>
            <span class="s1">&#39;domain&#39;</span><span class="o">:</span> <span class="s1">&#39;.bbc.co.uk&#39;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">pageSetUp</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">page</span><span class="p">.</span><span class="nx">onResourceRequested</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="sr">/\.(?:png|jpeg|jpg|gif)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">images</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="sr">/\.(?:js)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">javascript</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="sr">/\.(?:css)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">css</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="nx">page</span><span class="p">.</span><span class="nx">onError</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">trace</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error :&#39;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>

        <span class="nx">trace</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Trace:  &#39;</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">file</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">line</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">page</span><span class="p">.</span><span class="nx">viewportSize</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">1920</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">800</span> <span class="p">};</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">openPage</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">links</span>      <span class="o">=</span> <span class="nx">unique</span><span class="p">(</span><span class="nx">getLinks</span><span class="p">());</span>
        <span class="nx">images</span>     <span class="o">=</span> <span class="nx">unique</span><span class="p">(</span><span class="nx">images</span><span class="p">);</span>
        <span class="nx">css</span>        <span class="o">=</span> <span class="nx">unique</span><span class="p">(</span><span class="nx">css</span><span class="p">);</span>
        <span class="nx">javascript</span> <span class="o">=</span> <span class="nx">unique</span><span class="p">(</span><span class="nx">javascript</span><span class="p">);</span>

        <span class="nx">populateManifest</span><span class="p">();</span>

        <span class="c1">// Anything written to `stdout` is actually passed back to our Node script callback</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
            <span class="nx">links</span>           <span class="o">:</span> <span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
            <span class="nx">images</span>          <span class="o">:</span> <span class="nx">images</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
            <span class="nx">css</span>             <span class="o">:</span> <span class="nx">css</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
            <span class="nx">javascript</span>      <span class="o">:</span> <span class="nx">javascript</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
            <span class="nx">manifestContent</span> <span class="o">:</span> <span class="nx">manifest</span>
        <span class="p">}));</span>

        <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">urlProvided</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="sr">/(?:www\.)?[a-z-z1-9]+\./i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">cleanUrl</span><span class="p">(</span><span class="nx">providedUrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// If no http or https found at the start of the url...</span>
    <span class="k">if</span> <span class="p">(</span><span class="sr">/^(?!https?:\/\/)[\w\d]/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">providedUrl</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="nx">providedUrl</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">bbcNews</span><span class="p">(){</span>
    <span class="k">if</span> <span class="p">(</span><span class="sr">/bbc.co.uk\/news/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getLinks</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">page</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">results</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">writeVersion</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">manifest</span> <span class="o">=</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/# Timestamp: \d+/i</span><span class="p">,</span> <span class="s1">&#39;# Timestamp: &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">());</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">writeListContentFor</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">manifest</span> <span class="o">=</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;(# &#39;</span> <span class="o">+</span> <span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;)\\n[\\s\\S]+?\\n\\n&#39;</span><span class="p">,</span> <span class="s1">&#39;igm&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">cg</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">cg</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span> <span class="nx">type</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n\n&#39;</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">populateManifest</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">writeVersion</span><span class="p">();</span>

    <span class="nx">writeListContentFor</span><span class="p">(</span><span class="s1">&#39;Images&#39;</span><span class="p">,</span> <span class="nx">images</span><span class="p">);</span>
    <span class="nx">writeListContentFor</span><span class="p">(</span><span class="s1">&#39;Internal HTML documents&#39;</span><span class="p">,</span> <span class="nx">links</span><span class="p">);</span>
    <span class="nx">writeListContentFor</span><span class="p">(</span><span class="s1">&#39;Style Sheets&#39;</span><span class="p">,</span> <span class="nx">css</span><span class="p">);</span>
    <span class="nx">writeListContentFor</span><span class="p">(</span><span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span> <span class="nx">javascript</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>We begin by using the PhantomJS API to create a new web page:</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
</pre></div>
</code></pre>
<p>Next, we check that a url was provided and if so we clean it to be in the appropriate format required (e.g. it has an <code>http</code> protocol). Otherwise we throw an error and stop PhantomJS:</p>
<pre><code><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">urlProvided</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">url</span> <span class="o">=</span> <span class="nx">cleanUrl</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">error</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Sorry a valid URL could not be recognised&#39;</span><span class="p">);</span>
    <span class="nx">error</span><span class="p">.</span><span class="nx">additional</span> <span class="o">=</span> <span class="s1">&#39;Valid URL Example: bbc.co.uk/news&#39;</span><span class="p">;</span>

    <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>I also put in a check to see if the url passed was for <code>bbc.co.uk/news</code> and if so I use PhantomJS to set a cookie which allows the responsive version of the site to be loaded (the purpose was merely to demonstrate some of the useful PhantomJS APIs such as <code>addCookie</code>):</p>
<pre><code><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">bbcNews</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">phantom</span><span class="p">.</span><span class="nx">addCookie</span><span class="p">({</span>
        <span class="s1">&#39;name&#39;</span>  <span class="o">:</span> <span class="s1">&#39;ckps_d&#39;</span><span class="p">,</span>
        <span class="s1">&#39;value&#39;</span> <span class="o">:</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span>
        <span class="s1">&#39;domain&#39;</span><span class="o">:</span> <span class="s1">&#39;.bbc.co.uk&#39;</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>For PhantomJS to analyse the network data (so we can track what style sheets, JavaScript and images have been requested by the page) we need to use special PhantomJS handlers to interpret the requests:</p>
<pre><code><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">onResourceRequested</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="sr">/\.(?:png|jpeg|jpg|gif)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">images</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="sr">/\.(?:js)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">javascript</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="sr">/\.(?:css)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">css</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>We also use another PhantomJS API feature which allows us to determine the size of the browser window that is opened:</p>
<p><code>page.viewportSize = { width: 1920, height: 800 };</code></p>
<p>We then tell PhantomJS to open the specified web page. Once the page is open (the <code>load</code> event fired) a callback is executed:</p>
<pre><code><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// code...</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Within the callback we store off the resources that were found and we call a function that handles replacing the content of our String (the dummy manifest) and replacing it with a list of each set of resources:</p>
<pre><code><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">links</span>      <span class="o">=</span> <span class="nx">unique</span><span class="p">(</span><span class="nx">getLinks</span><span class="p">());</span>
    <span class="nx">images</span>     <span class="o">=</span> <span class="nx">unique</span><span class="p">(</span><span class="nx">images</span><span class="p">);</span>
    <span class="nx">css</span>        <span class="o">=</span> <span class="nx">unique</span><span class="p">(</span><span class="nx">css</span><span class="p">);</span>
    <span class="nx">javascript</span> <span class="o">=</span> <span class="nx">unique</span><span class="p">(</span><span class="nx">javascript</span><span class="p">);</span>

    <span class="nx">populateManifest</span><span class="p">();</span>

    <span class="c1">// Remaining code...</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Finally, we create a data object to hold statistics about the resources requested; convert it to a JSON string and log it using the <code>console</code> API. </p>
<p>Once this is done we tell PhantomJS to <code>exit</code> (if we didn&#39;t do that then the process would stall):</p>
<pre><code><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Previous code...</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
        <span class="nx">links</span>           <span class="o">:</span> <span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
        <span class="nx">images</span>          <span class="o">:</span> <span class="nx">images</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
        <span class="nx">css</span>             <span class="o">:</span> <span class="nx">css</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
        <span class="nx">javascript</span>      <span class="o">:</span> <span class="nx">javascript</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
        <span class="nx">manifestContent</span> <span class="o">:</span> <span class="nx">manifest</span>
    <span class="p">}));</span>

    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Looking back on the above code you may wonder how we get the data back to our <code>squirrel.js</code> script? Take another look at the <code>console.log</code>, this code has an odd side effect which is that any code logged by PhantomJS is passed back to our shell callback (originally executed within <code>squirrel.js</code>).</p>
<p>Let&#39;s revisit our <code>squirrel.js</code> script...</p>
<h3><a name="back-to-squirrel-js" class="anchor" href="#back-to-squirrel-js"><span class="header-link"></span></a>Back to squirrel.js</h3>
<pre><code><div class="highlight"><pre><span class="nx">shell</span><span class="p">(</span><span class="nx">phantomjs</span><span class="p">,</span> <span class="p">[</span><span class="nx">scriptToExecute</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">manifestContent</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stdout</span><span class="p">,</span> <span class="nx">stderr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">stdout</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Whoops! Seems there was an error? You\&#39;ll find the stack trace below.&#39;</span><span class="p">);</span>
        <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">displayStatistics</span><span class="p">();</span>
    <span class="nx">createManifestFile</span><span class="p">();</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>The callback function is run when the PhantomJS script finishes execution. It is passed any errors that may have occurred and if there are then we throw the error:</p>
<p><code>if (err) throw err;</code></p>
<p>The other arguments are the standard output and standard error provided by the shell. In this case the standard output would be our JSON string which we <code>console.log</code>&#39;ed from <code>appcache.js</code>. We parse the JSON string, converting it back into an object so we can present the data to the user who has run the <code>squirrel</code> command.</p>
<p>A side note is that we wrap this conversion in a <code>try/catch</code> clause to protect against web pages that cause a JavaScript error to occur (the error isn&#39;t picked up by <code>stderr</code> but <code>stdout</code> and so it causes the JSON parsing to break):</p>
<pre><code><div class="highlight"><pre><span class="k">try</span> <span class="p">{</span>
    <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">stdout</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>Once we have our data we call <code>displayStatistics</code> which uses the <code>stdout</code> to write a message to the user&#39;s terminal.</p>
<p>Last we call <code>createManifestFile</code> which creates a <code>appcache.manifest</code> file in the user&#39;s current directory:</p>
<pre><code><div class="highlight"><pre><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;/appcache.manifest&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">manifestContent</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>

    <span class="nx">log</span><span class="p">(</span><span class="s1">&#39;\nManifest file created&#39;</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Now that we have an understanding of how the script works in its entirety, let&#39;s look at how we can allow others to download and install our work.</p>
<h2><a name="packaging" class="anchor" href="#packaging"><span class="header-link"></span></a>Packaging</h2>
<p>For other users to install our module we&#39;ll need to publish it to a public repository. The place to do this is the <a href="https://npmjs.org/">NPM</a> registry. </p>
<p>To publish to NPM you&#39;ll need a <a href="https://npmjs.org/doc/json.html">package.json</a> file.</p>
<p>The purpose of the package.json is to specify the dependencies for the project you&#39;re working on. In this instance it specifies the dependencies required by Squirrel to do its job.</p>
<p>Below is Squirrel&#39;s package.json file:</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;squirrel-js&quot;</span><span class="p">,</span>
  <span class="nx">version</span><span class="o">:</span> <span class="s2">&quot;0.1.3&quot;</span><span class="p">,</span>
  <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;Node based cli tool using PhantomJS to automate generation of an Application Cache manifest file for a specified URL&quot;</span><span class="p">,</span>
  <span class="nx">main</span><span class="o">:</span> <span class="s2">&quot;lib/squirrel&quot;</span><span class="p">,</span>
  <span class="nx">scripts</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">test</span><span class="o">:</span> <span class="s2">&quot;echo &quot;</span><span class="nb">Error</span><span class="o">:</span> <span class="nx">no</span> <span class="nx">test</span> <span class="nx">specified</span><span class="s2">&quot; &amp;&amp; exit 1&quot;</span>
  <span class="p">},</span>
  <span class="nx">engines</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">node</span><span class="o">:</span> <span class="s2">&quot;&gt;=0.10&quot;</span>
  <span class="p">},</span>
  <span class="nx">repository</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;git://github.com/Integralist/Squirrel.git&quot;</span>
  <span class="p">},</span>
  <span class="nx">preferGlobal</span><span class="o">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
  <span class="nx">bin</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">squirrel</span><span class="o">:</span> <span class="s2">&quot;lib/squirrel.js&quot;</span>
  <span class="p">},</span>
  <span class="nx">dependencies</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">phantomjs</span><span class="o">:</span> <span class="s2">&quot;~1.9.2-6&quot;</span><span class="p">,</span>
    <span class="nx">lodash</span><span class="p">.</span><span class="nx">uniq</span><span class="o">:</span> <span class="s2">&quot;~2.4.1&quot;</span>
  <span class="p">},</span>
  <span class="nx">keywords</span><span class="o">:</span> <span class="p">[</span>
    <span class="s2">&quot;appcache&quot;</span><span class="p">,</span>
    <span class="s2">&quot;phantomjs&quot;</span><span class="p">,</span>
    <span class="s2">&quot;cli&quot;</span>
  <span class="p">],</span>
  <span class="nx">author</span><span class="o">:</span> <span class="s2">&quot;Mark McDonnell &lt;mark.mcdx@gmail.com&gt; (http://www.integralist.co.uk/)&quot;</span><span class="p">,</span>
  <span class="nx">license</span><span class="o">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
  <span class="nx">bugs</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;https://github.com/Integralist/Squirrel/issues&quot;</span>
  <span class="p">},</span>
  <span class="nx">homepage</span><span class="o">:</span> <span class="s2">&quot;https://github.com/Integralist/Squirrel&quot;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>You can read up on all the different properties for the package.json file on the <a href="https://npmjs.org/doc/json.html">NPM registry site</a>. </p>
<p>The important items to take note of are...</p>
<ul>
<li><code>preferGlobal: &quot;true&quot;</code></li>
<li><code>bin: { squirrel: &quot;lib/squirrel.js&quot; }</code></li>
</ul>
<p>...the first property indicates that when a user installs your module that you would prefer it to be installed globally (in this case we do want it installed globally as it means the user can run the command any where in their system).</p>
<p>The second property indicates where the command will find the code required to execute the command.</p>
<p>For you to be able to test that your command works you&#39;ll need to run the command: <code>npm link</code> which (in this case) will create a symlink from the command <code>squirrel</code> to the <code>squirrel.js</code> file.</p>
<h2><a name="publishing" class="anchor" href="#publishing"><span class="header-link"></span></a>Publishing</h2>
<p>To publish your code you need to first register on <a href="https://npmjs.org/signup">NPM</a> for an account.</p>
<p>Once you have an account you need to verify your account via the command line. To do this run the command: <code>npm adduser</code> which will ask you to specify a username and a password.</p>
<p>Once your account is verified you can then publish your module to the NPM registry using the command: <code>npm publish</code>.</p>
<p>It can take a few minutes for your module to become publicly available for users to install.</p>
<p>Be aware that if you make some updates to your code and try to run <code>npm publish</code> without updating the package.json file&#39;s <code>version</code> property then NPM will return an error advising you to include an updated version number.</p>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>This is a small example of the sort of command line tools you can develop. The next time you find yourself doing a repetitious task then consider whether it would be useful to automate the process into a reusable cli tool.</p>
]]></description><link>http://www.integralist.co.uk/posts/building-a-cli-tool-with-node/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/building-a-cli-tool-with-node/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sat, 11 Jan 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Even More Refactoring Techniques]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 10mins</em></p>
<ul>
<li>Introduction<ul>
<li><a href="#remove-redundancy">Remove Redundancy</a></li>
<li><a href="#dynamic-method-definition">Dynamic Method Definition</a></li>
<li><a href="#extract-class">Extract Class</a></li>
<li><a href="#hide-delegate">Hide Delegate</a></li>
<li><a href="#replace-array-with-object">Replace Array with Object</a></li>
<li><a href="#replace-conditional-with-polymorphism">Replace Conditional with Polymorphism</a></li>
<li><a href="#decompose-conditional">Decompose Conditional</a></li>
<li><a href="#introduce-null-object">Introduce Null Object</a></li>
</ul>
</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>Well here we are again to learn some more refactoring techniques. If you want to recap the other techniques then go <a href="/posts/refactoring-techniques/">read my previous post</a>, otherwise let&#39;s just crack on...</p>
<h3><a name="remove-redundancy" class="anchor" href="#remove-redundancy"><span class="header-link"></span></a>Remove Redundancy</h3>
<p>This isn&#39;t an explicit technique, more a grouping of techniques.</p>
<p>The principle idea being that: code evolves, and as it evolves you may find techniques you previously implemented (as part of an earlier refactoring) have since become redundant. </p>
<p>Imagine you implemented the &quot;<a href="/posts/refactoring-techniques/#introduce-named-parameter">Introduce Named Parameter</a>&quot; technique (passing a hash with named properties as a single argument instead of multiple unidentified arguments). </p>
<p>Now, after some other refactorings have taken place, you discover the method originally refactored is no longer as complex and so your argument hash refactor has been reduced down to just a single named property. </p>
<p>In this particular scenario you should remove the named parameter and simply pass a single argument instead.</p>
<p>This principle applies with other refactoring techniques. </p>
<p>Imagine an earlier refactoring included implementing a default parameter value for a method call. As your code evolves, if you discover you now only ever call the method <em>with</em> an argument then the default value becomes redundant and makes the code more complex than it needs to be by providing a default value. So just remove the redundant code.</p>
<h3><a name="dynamic-method-definition" class="anchor" href="#dynamic-method-definition"><span class="header-link"></span></a>Dynamic Method Definition</h3>
<p>Sometimes defining multiple methods can be wasteful when functionally they carry out similar steps. </p>
<p>For example, imagine we had the following code... </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">failure</span> <span class="k">do</span> 
  <span class="nb">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;failure&quot;</span> 
<span class="k">end</span> 

<span class="k">def</span> <span class="nf">success</span> <span class="k">do</span> 
  <span class="nb">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;success&quot;</span> 
<span class="k">end</span> 

<span class="k">def</span> <span class="nf">error</span> <span class="k">do</span> 
  <span class="nb">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;error&quot;</span> 
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Notice how the functions are structurally identical. They simply set a <code>result</code> property to have a value
This can be refactored using Ruby&#39;s <code>define_method</code> method (which let&#39;s you create methods dynamically at run time)... </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="o">[</span><span class="ss">:failure</span><span class="p">,</span> <span class="ss">:success</span><span class="p">,</span> <span class="ss">:error</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span> 
  <span class="n">define_method</span> <span class="nb">method</span> <span class="k">do</span> 
    <span class="nb">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="nb">method</span><span class="o">.</span><span class="n">to_s</span> 
  <span class="k">end</span> 
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Note: you could also abstract this code into a more reusable (and easier to maintain) function like so... </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">dynamic_methods</span><span class="p">(</span><span class="o">*</span><span class="n">method_names</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> 
  <span class="n">method_names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_name</span><span class="o">|</span> 
    <span class="n">define_method</span> <span class="n">method_name</span> <span class="k">do</span> 
      <span class="n">instance_exec</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="k">end</span> 
  <span class="k">end</span> 
<span class="k">end</span>
</pre></div>
</code></pre>
<p>You can also use this technique to help ease creating properties on an object. For example, I used this technique in my <a href="/posts/mvcp-model-view-controller-presenter/">MVCP</a> blog post to dynamically create instance variables... </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;app/presenters/base&#39;</span> 
<span class="nb">require</span> <span class="s1">&#39;app/models/person&#39;</span> 

<span class="k">class</span> <span class="nc">Presenters</span><span class="o">::</span><span class="no">Person</span> <span class="o">&lt;</span> <span class="no">Presenters</span><span class="o">::</span><span class="no">Base</span> 
  <span class="kp">attr_reader</span> <span class="ss">:run</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span> 

  <span class="k">def</span> <span class="nf">initialize</span> 
    <span class="vi">@run</span> <span class="o">=</span> <span class="kp">true</span> 

    <span class="n">model</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Mark&#39;</span><span class="p">,</span> <span class="s1">&#39;99&#39;</span><span class="p">)</span> 
    <span class="n">prepare_view_data</span><span class="p">({</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">.</span><span class="n">age</span> <span class="p">})</span> 
  <span class="k">end</span> 
<span class="k">end</span> 

<span class="k">module</span> <span class="nn">Presenters</span> 
  <span class="k">class</span> <span class="nc">Base</span> 
    <span class="kp">attr_accessor</span> <span class="ss">:model</span> 

    <span class="k">def</span> <span class="nf">prepare_view_data</span> <span class="nb">hash</span> 
      <span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> 
        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> 
      <span class="k">end</span> 
    <span class="k">end</span> 
  <span class="k">end</span> 
<span class="k">end</span>
</pre></div>
</code></pre>
<h3><a name="extract-class" class="anchor" href="#extract-class"><span class="header-link"></span></a>Extract Class</h3>
<p>This is a pretty standard technique which helps ensure your objects abide by the SRP (Single Responsibility Principle). </p>
<p>If you find your classes are doing too much then simply create a new class and move the relevant fields and methods over one by one (while running the tests as you go to ensure all code continues working as expected).</p>
<p>Doing so you&#39;ll end up with two small, focused and clean classes which are easier to manage. </p>
<h3><a name="hide-delegate" class="anchor" href="#hide-delegate"><span class="header-link"></span></a>Hide Delegate</h3>
<p>This technique focuses on the principle of object encapsulation. Specifically decoupling two or more objects by reducing the context the objects have of each other. </p>
<p>The following code demonstrates the idea...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">module</span> <span class="nn">Bar</span>
  <span class="k">def</span> <span class="nf">display</span>
    <span class="nb">puts</span> <span class="s2">&quot;Bar Stuff&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">module</span> <span class="nn">Baz</span>
  <span class="k">def</span> <span class="nf">display</span>
    <span class="nb">puts</span> <span class="s2">&quot;Baz Stuff&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Foo</span>
  <span class="kp">include</span> <span class="no">Bar</span>

  <span class="k">def</span> <span class="nf">do_something</span>
    <span class="nb">display</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
<span class="n">foo</span><span class="o">.</span><span class="n">do_something</span>
</pre></div>
</code></pre>
<p>...as you can see, the user only needs to rely on the interface having a <code>do_something</code> method. </p>
<p>The implementation details of <code>do_somthing</code> (in this case the delegation off to another method) are hidden.</p>
<p>If we changed <code>include Bar</code> for <code>include Baz</code>, or maybe we don&#39;t mixin a module at all and just write some code inside of <code>do_something</code>, it doesn&#39;t matter because the public interface is set as far as the user is concerned.</p>
<h3><a name="replace-array-with-object" class="anchor" href="#replace-array-with-object"><span class="header-link"></span></a>Replace Array with Object</h3>
<p>The motivation for this technique is to convert a simple data container which holds multiple data types into an object with clear and descriptive identifiers. </p>
<p>This principle helps to present your complex data into a more sensible format (I demonstrated this in a previous post on <a href="/posts/object-oriented-design-ood/#direct-references">object-oriented design</a>). This technique also makes the data interaction more maintainable by providing an easier and understandable interface to the data. </p>
<p>Here is an example where we&#39;re violating the principle of a clean data interaction...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span> 
  <span class="kp">attr_reader</span> <span class="ss">:data</span> 

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
    <span class="vi">@data</span> <span class="o">=</span> <span class="n">data</span> 
  <span class="k">end</span> 

  <span class="k">def</span> <span class="nf">do_something</span> 
    <span class="n">data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> 
      <span class="nb">puts</span> <span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> 
      <span class="nb">puts</span> <span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> 
      <span class="nb">puts</span> <span class="s1">&#39;---&#39;</span> 
    <span class="k">end</span> 
  <span class="k">end</span> 
<span class="k">end</span> 

<span class="n">obj</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">41</span><span class="p">,</span> <span class="mi">7</span><span class="o">]]</span><span class="p">)</span> 
<span class="n">obj</span><span class="o">.</span><span class="n">do_something</span>
</pre></div>
</code></pre>
<p>Notice in the first example how our code has far too much knowledge (context) about the object it&#39;s interacting with. It knows that the Array index zero holds an X coordinate and the Array index one holds a Y coordinate. </p>
<p>If that format was to change (let&#39;s say the X and Y swap places) then that would cause our code to break in unexpected ways.</p>
<p>But now take a look at the following example which works around this issue by converting our complex data structure into a cleaner data format... </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span> 
  <span class="kp">attr_reader</span> <span class="ss">:new_data</span> 

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
    <span class="vi">@new_data</span> <span class="o">=</span> <span class="n">transform</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
  <span class="k">end</span> 

  <span class="k">def</span> <span class="nf">do_something</span> 
    <span class="n">new_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> 
      <span class="c1"># now we are able to reference easily understandable </span>
      <span class="c1"># property names (rather than item[0], item[1]) </span>
      <span class="nb">puts</span> <span class="n">item</span><span class="o">.</span><span class="n">coord_x</span> 
      <span class="nb">puts</span> <span class="n">item</span><span class="o">.</span><span class="n">coord_y</span> 
      <span class="nb">puts</span> <span class="s1">&#39;---&#39;</span> 
    <span class="k">end</span> 
  <span class="k">end</span> 

  <span class="no">Transform</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:coord_x</span><span class="p">,</span> <span class="ss">:coord_y</span><span class="p">)</span> 

  <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> 
    <span class="n">data</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="no">Transform</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span> 
  <span class="k">end</span> 
<span class="k">end</span> 

<span class="n">obj</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">41</span><span class="p">,</span> <span class="mi">7</span><span class="o">]]</span><span class="p">)</span> 
<span class="n">obj</span><span class="o">.</span><span class="n">do_something</span>
</pre></div>
</code></pre>
<p>...here we convert the Array into an object and instead can more easily and safely reference the data we&#39;re interested in via recognisable property identifiers. This doesn&#39;t mean if the data source changes that we&#39;ll totally avoid all problems but it&#39;ll be clearer where the problem is arising.</p>
<h3><a name="replace-conditional-with-polymorphism" class="anchor" href="#replace-conditional-with-polymorphism"><span class="header-link"></span></a>Replace Conditional with Polymorphism</h3>
<p>This is one of the most useful refactoring techniques available to you, and there are two ways it can help: </p>
<ol>
<li>It removes the code smell of conditional logic </li>
<li>It demonstrates perfectly the principle of object-oriented design </li>
</ol>
<p>The following example shows the typical procedural attempt to handle different scenarios based on the data object type being passed...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="vi">@data</span> <span class="o">=</span> <span class="n">data</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">do_something</span>
    <span class="k">if</span> <span class="vi">@data</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Bar</span>
      <span class="nb">puts</span> <span class="s2">&quot;Bar!&quot;</span>
    <span class="k">elsif</span> <span class="vi">@data</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Baz</span>
      <span class="nb">puts</span> <span class="s2">&quot;Baz!&quot;</span>
    <span class="k">elsif</span> <span class="vi">@data</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Qux</span>
      <span class="nb">puts</span> <span class="s2">&quot;Qux!&quot;</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Bar</span><span class="p">;</span> <span class="k">end</span>
<span class="k">class</span> <span class="nc">Baz</span><span class="p">;</span> <span class="k">end</span>
<span class="k">class</span> <span class="nc">Qux</span><span class="p">;</span> <span class="k">end</span>

<span class="n">foo_bar</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
<span class="n">foo_bar</span><span class="o">.</span><span class="n">do_something</span>

<span class="n">foo_baz</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
<span class="n">foo_baz</span><span class="o">.</span><span class="n">do_something</span>

<span class="n">foo_qux</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Qux</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
<span class="n">foo_qux</span><span class="o">.</span><span class="n">do_something</span>
</pre></div>
</code></pre>
<p>...as you can see, if we have a new Class type we need to go back and to modify the <code>Foo</code> base class. This violates the OCP (Open/Closed Principle) which states a file should be open for extension but closed for modification.</p>
<p>For us to abide by OCP we can use polymorphism and a trusted interface/duck typing to solve the problem...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="vi">@data</span> <span class="o">=</span> <span class="n">data</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">do_something</span>
    <span class="vi">@data</span><span class="o">.</span><span class="n">identifier</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Bar</span>
  <span class="k">def</span> <span class="nf">identifier</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">!&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Baz</span>
  <span class="k">def</span> <span class="nf">identifier</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">!&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Qux</span>
  <span class="k">def</span> <span class="nf">identifier</span>
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">!&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">foo_bar</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
<span class="n">foo_bar</span><span class="o">.</span><span class="n">do_something</span>

<span class="n">foo_baz</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
<span class="n">foo_baz</span><span class="o">.</span><span class="n">do_something</span>

<span class="n">foo_qux</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Qux</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
<span class="n">foo_qux</span><span class="o">.</span><span class="n">do_something</span>
</pre></div>
</code></pre>
<p>Notice we have removed the need for a conditional and just sent the message to the relevant object to be handled. Much cleaner and easier to maintain and scale.</p>
<h3><a name="decompose-conditional" class="anchor" href="#decompose-conditional"><span class="header-link"></span></a>Decompose Conditional</h3>
<p>Not all conditional statements can be avoided through the use of polymorphism. In those cases you can simplify the conditional logic (and the subsequent statements) by <a href="/posts/refactoring-techniques/#extract-method">extracting them into external methods</a>. </p>
<p>Here is a simple example...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">if</span> <span class="n">date</span> <span class="o">&lt;</span> <span class="no">SUMMER_START</span> <span class="o">||</span> <span class="n">date</span> <span class="o">&gt;</span> <span class="no">SUMMER_END</span> 
  <span class="n">charge</span> <span class="o">=</span> <span class="c1"># some complex calculation if it&#39;s winter </span>
<span class="k">else</span> 
  <span class="n">charge</span> <span class="o">=</span> <span class="c1"># some other complex calculation if it&#39;s summer </span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>...which we can refactor like so... </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">if</span> <span class="n">not_summer</span><span class="p">(</span><span class="n">date</span><span class="p">)</span> 
  <span class="n">charge</span> <span class="o">=</span> <span class="n">winter_charge</span> 
<span class="k">else</span> 
  <span class="n">charge</span> <span class="o">=</span> <span class="n">summer_charge</span> 
<span class="k">end</span>
</pre></div>
</code></pre>
<p>...much better.</p>
<h3><a name="introduce-null-object" class="anchor" href="#introduce-null-object"><span class="header-link"></span></a>Introduce Null Object</h3>
<p>The motivation behind this technique is to avoid using a conditional whose purpose is to check whether a property exists or not before using it.</p>
<p>Here is a simple example of what we want to avoid...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Post</span>
  <span class="kp">attr_reader</span> <span class="ss">:id</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="nb">id</span>
    <span class="vi">@id</span>        <span class="o">=</span> <span class="nb">id</span>
    <span class="vi">@published</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_and_publish</span> <span class="nb">id</span>
    <span class="c1"># Simulated database operation</span>
    <span class="n">post</span> <span class="o">=</span> <span class="no">Posts</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="nb">id</span> <span class="p">}</span>
    <span class="n">post</span><span class="o">.</span><span class="n">publish</span> <span class="k">unless</span> <span class="n">post</span><span class="o">.</span><span class="n">nil?</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">publish</span>
    <span class="nb">puts</span> <span class="vi">@published</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Posts</span> <span class="o">=</span> <span class="o">[</span><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">]</span>

<span class="no">Post</span><span class="o">.</span><span class="n">find_and_publish</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># displays nothing</span>
<span class="no">Post</span><span class="o">.</span><span class="n">find_and_publish</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># displays true</span>
</pre></div>
</code></pre>
<p>...in the above example we check whether <code>post</code> is <code>nil</code> or not. If it isn&#39;t <code>nil</code> then we call the <code>publish</code> method, otherwise we don&#39;t do anything.</p>
<p>This is kind of ugly.</p>
<p>The following code demonstrates how we can avoid that problem by introducing the concept of having an object to handle null scenarios (it&#39;s the same principle of using duck typing/trusted interfaces/polymorphism)...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Post</span>
  <span class="kp">attr_reader</span> <span class="ss">:id</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="nb">id</span>
    <span class="vi">@id</span>        <span class="o">=</span> <span class="nb">id</span>
    <span class="vi">@published</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_and_publish</span> <span class="nb">id</span>
    <span class="c1"># Simulated database operation</span>
    <span class="n">post</span> <span class="o">=</span> <span class="no">Posts</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="nb">id</span> <span class="p">}</span> <span class="o">||</span> <span class="no">NullPost</span><span class="o">.</span><span class="n">new</span>
    <span class="n">post</span><span class="o">.</span><span class="n">publish</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">publish</span>
    <span class="nb">puts</span> <span class="vi">@published</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">NullPost</span>
  <span class="k">def</span> <span class="nf">publish</span>
    <span class="c1"># noop</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Posts</span> <span class="o">=</span> <span class="o">[</span><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">]</span>

<span class="no">Post</span><span class="o">.</span><span class="n">find_and_publish</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># displays nothing</span>
<span class="no">Post</span><span class="o">.</span><span class="n">find_and_publish</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># displays true</span>
</pre></div>
</code></pre>
<p>...as you can see, effectively we have the same code with the exception that we no longer check for <code>nil?</code> in the second example and instead we rely on another object <code>NullPost</code> implementing the same interface but returns a null related value.</p>
<p>This way we&#39;re using objects to handle our logic. Yes, we end up with more code (one extra Class) but ultimately this is more maintainable and understandable than lots of inline logic.</p>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>Again, there are still many different refactoring techniques that I&#39;ve not included. But hopefully you&#39;ve found this second instalment just as useful as the first, I&#39;ll update the post or start anew with more techniques soon.</p>
]]></description><link>http://www.integralist.co.uk/posts/even-more-refactoring-techniques/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/even-more-refactoring-techniques/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Fri, 27 Dec 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Vim Workflow (Part Deux)]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 27mins</em></p>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#no-more-tmux">No more tmux</a></li>
<li><a href="#vim-windows">Vim windows</a></li>
<li><a href="#long-running-commands">Long running commands</a></li>
<li><a href="#managing-windows">Managing windows</a></li>
<li><a href="#plugins">Plugins</a><ul>
<li><a href="#ctrl-p">Ctrl-p</a></li>
<li><a href="#ack">Ack</a></li>
<li><a href="#plugins">EndWise</a></li>
<li><a href="#plugins">Powerline</a></li>
<li><a href="#nerdtree">NERDTree</a></li>
<li><a href="#surround">Surround</a></li>
<li><a href="#plugins">HTML5</a></li>
<li><a href="#plugins">Tabular</a></li>
</ul>
</li>
<li><a href="#configuration">Configuration</a></li>
<li><a href="#useful-vim-featurescommands">Useful Vim features/commands</a><ul>
<li><a href="#search-and-replace-across-multiple-files">Search and Replace across multiple
files</a></li>
<li><a href="#moving-between-brackets">Moving between brackets</a></li>
<li><a href="#auto-indenting">Auto indenting</a></li>
<li><a href="#changing-content">Changing content</a></li>
<li><a href="#selecting-content">Selecting content</a></li>
<li><a href="#using-the-register">Using the register</a></li>
<li><a href="#buffer-management">Buffer management</a></li>
<li><a href="#jump-list">Jump List</a></li>
<li><a href="#change-list">Change List</a></li>
<li><a href="#case-insensitive-searching">Case Insensitive Searching</a></li>
<li><a href="#regular-expressions">Regular Expressions</a></li>
<li><a href="#removing-line-spaces">Removing line spaces</a></li>
<li><a href="#switching-case">Switching case</a></li>
<li><a href="#moving-forward-and-backwards-by-code-not">Moving forward and backwards by code not
words</a></li>
<li><a href="#repeating-yourself">Repeating yourself</a></li>
<li><a href="#appending-to-end-of-a-line">Appending to end of a line</a></li>
<li><a href="#searching-for-current-word">Searching for current word</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>If you&#39;ve not read over my two previous Vim posts (<a href="http://www.integralist.co.uk/posts/a-guide-to-getting-started-with-vim/">A guide to getting started with Vim</a> and <a href="http://www.integralist.co.uk/posts/vim-workflow/">Vim Workflow</a>) then I suggest you do that
first as that&#39;ll give you an idea of how I use Vim and what my previous workflow
was like.</p>
<p>I&#39;ve decided that it was time to simplify my Vim set-up and to better automate
and understand some processes. </p>
<p>Note: not all of this was related to just Vim but my general dotfiles set-up as well.</p>
<p>Hopefully by sharing my updated workflow you might pick up some techniques that
you like and want to utilise yourself (or maybe not).</p>
<h2><a name="no-more-tmux" class="anchor" href="#no-more-tmux"><span class="header-link"></span></a>No more tmux</h2>
<p>I love <a href="http://tmux.sourceforge.net/">tmux</a> but for all its power I pretty much
only ever used it for spliting the screen into panes (or Windows if you&#39;re
talking Vim terminology).</p>
<p>The one really cool feature of a pane in tmux was the fact that it could just be
pointed at a terminal shell (so I could run shell commands without affecting my
current Vim window).</p>
<p>So why would I give that up? What am I using now?</p>
<p>Well, I&#39;m just using Vim&#39;s standard windows feature! So let me explain <em>how</em> I use Vim windows...</p>
<p><strong>Update</strong>: just to be clear that I do still use tmux but only when I&#39;m doing TDD or refactoring with tests. That is the one instance where I&#39;ll fire up two tmux panes (one to hold Vim and the other to be a terminal running my tests -&gt; this makes the &#39;red, green, refactor&#39; feedback loop nice and tight).</p>
<h2><a name="vim-windows" class="anchor" href="#vim-windows"><span class="header-link"></span></a>Vim windows</h2>
<p>When I create a new window in Vim (same as a tmux pane), the new window
holds a copy of the current file. I then just use the Ctrl-p plugin to
open another file (see the below section on plugins if you&#39;re not sure what
Ctrl-p is).</p>
<p>If I want to run a command I will typically push Vim into the background and run
the command, simple (it doesn&#39;t need to be more complicated than that). </p>
<p>To do this you press <code>Ctrl-z</code> which will take you out of Vim and
back into the shell where you can run your commands. You then press <code>fg</code> to
bring Vim back to be the (f)ore (ground) process.</p>
<h2><a name="long-running-commands" class="anchor" href="#long-running-commands"><span class="header-link"></span></a>Long running commands</h2>
<p>If you have a long running command (e.g. <code>grunt watch</code>) then this is where the
tmux pane would be really handy, because I could open a new pane and leave it
running alongside working in Vim. This isn&#39;t possible in Vim, but the solution
is just as easy: open a new tab!</p>
<p>If you have a long running command such as a grunt task which watches
files and then compiles them when they are updated, then you&#39;re not going to
really be interested in looking at that output (well, majority of the time
you&#39;re not). So just have it run in a separate tab and you can easily switch back
over to it to see the output if you want. You can then just easily switch back to
the Vim tab when you&#39;re ready.</p>
<p>Is this a perfect solution? Of course not.<br>Does it mean I can drop a dependency? Absolutely.</p>
<p>If I can make life simpler (within reason) then I think that&#39;s a better
situation to be in.</p>
<p><strong>UPDATE:</strong></p>
<p>As pointed out by <a href="http://twitter.com/kenturamon">@kenturamon</a>, he uses Guard to
run his Ruby tests and for proper TDD (test-driven development) he needs
a constant feedback loop rather than switching tabs all the time. In situations
like that then using tmux is the best bet. You don&#39;t have to use tmux all the
time but I have no issue with using the best tool for the job when the
circumstances dictate it.</p>
<h2><a name="managing-windows" class="anchor" href="#managing-windows"><span class="header-link"></span></a>Managing windows</h2>
<p>The default keys for moving around and manipulating Vim&#39;s windows are a bit ugly
and awkward to use.</p>
<p>I find that I use the &lt;leader&gt; key <code>\</code> all the time. It&#39;s in the perfect
spot for my fingers to hit it whenever I need it. So I map a few of the window
keys to use the leader key instead...</p>
<pre><code class="lang-vim"><div class="highlight"><pre><span class="c">&quot; Make handling Vim windows easier</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">w</span><span class="p">-</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;-</span> <span class="c">&quot; smaller</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">w</span><span class="p">+</span> <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;+</span> <span class="c">&quot; larger</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">w</span>[ <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;=</span> <span class="c">&quot; equal</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">w</span>] <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span>_ <span class="c">&quot; fill screen</span>

<span class="c">&quot; Make splitting Vim windows easier</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span>; <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span><span class="k">s</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span>` <span class="p">&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span><span class="k">v</span>
</pre></div>
</code></pre>
<p>...as you can see, if I want to create a horizontal split window then I just
press: <code>\;</code> and if I want the vertical equivalent I just press: \`</p>
<p>If I want the current window to fill the screen I press: <code>\w]</code> and if I want all
windows to be equal size again then I press: <code>\w[</code>.</p>
<p>Finally if I want the current window to be slightly larger, then I press: <code>\w+</code>
or <code>\w-</code> if I want it slightly smaller.</p>
<p>If you have lots of split windows open and you want to close them all then <code>:q</code>
wont work that well as it means you&#39;ll have to close each window individually.
Instead run <code>:only</code> to close all windows except the current one and then run
<code>:q</code> to close the last one.</p>
<p>If you split the current screen into too many windows you may find the full
screen feature is no longer very effective (because there are so many split
screens, the current window doesn&#39;t have much space left over to fill up), then you can
instead move that window out into a separate Tab by executing <code>Ctrl-w</code> followed by <code>Shift-T</code>.</p>
<p>But be aware of two things:</p>
<ol>
<li>this moves the split window completely into a new tab (so doesn&#39;t stay as a
split window as well)</li>
<li>this is rarely needed for me any way (I hardly have more than 4 files open at
once, if I do I&#39;m clearly doing too much)</li>
</ol>
<p>So there you have it. Nice, simple and quick solutions which mean I don&#39;t require the full range of tmux features. </p>
<p>This gives me the majority of the functionality I need when dealing with files.</p>
<h3><a name="tabs" class="anchor" href="#tabs"><span class="header-link"></span></a>Tabs</h3>
<p>Vim&#39;s tab feature is something I very rarely use but like I say, if you&#39;re using
Vim&#39;s window features like I am, and once in a while when you do find full screening a window pane
isn&#39;t working out, then extracting that window out into a tab is the only way to go (in
tmux you can just press <code>Ctrl-z</code> and that would properly full screen the current
pane - but not using tmux any more isn&#39;t really much of an issue for me nowadays and so I can
live with the standard full screen feature available to Vim windows).</p>
<p>In case you&#39;re wondering you can create a new tab with the command <code>:tabnew</code> and
you can move between tabs using <code>gt</code> which moves forward through your tab list
and <code>gT</code> to move backwards through the tab list.</p>
<p>You can also close all tab instances except the current one using <code>:tabo</code> (as a 
shortcut for <code>:tabonly</code>).</p>
<p>To move to a specific tab then just use <code>ngt</code> where <code>n</code> is the number of the tab
you want to switch to. So for example if you have four tabs open then <code>4gt</code> will
switch you to the fourth tab.</p>
<p>Finally you can rearrange tabs if you want to. I&#39;m not sure why I&#39;m going into
so much detail about tabs when it&#39;s very rare that I use them, but because they
do crop up every once in a while it&#39;s nice to know what&#39;s possible (i.e. the
better you understand your craft and your tool of choice the more efficient you
can be). To move a tab simply execute <code>:tabmove n</code> where <code>n</code> is the space you
want it to occupy. If you don&#39;t specify a number then the tab will be moved to
the end of the tab list. But be aware that the tab list is zero-indexed so
moving to the first space would be <code>:tabmove 0</code>.</p>
<h2><a name="plugins" class="anchor" href="#plugins"><span class="header-link"></span></a>Plugins</h2>
<p>So there are quite a few plugins I use, some of the most vital ones I&#39;ll list below:</p>
<ul>
<li><a href="http://www.github.com/kien/ctrlp.vim">Ctrl-p</a></li>
<li><a href="http://www.github.com/mileszs/ack.vim">Ack</a> (well, I use
<a href="http://www.github.com/ggreer/the_silver_searcher">Ag</a> behind the scenes)</li>
<li><a href="http://www.github.com/tpope/vim-endwise">EndWise</a></li>
<li><a href="http://www.github.com/Lokaltog/powerline">Powerline</a></li>
<li><a href="https://github.com/scrooloose/nerdtree">NERDTree</a></li>
<li><a href="http://www.github.com/tpope/vim-surround">Surround</a></li>
<li><a href="http://www.github.com/othree/html5.vim">HTML5</a></li>
<li><a href="http://www.github.com/godlygeek/tabular">Tabular</a></li>
</ul>
<p>I&#39;ll discuss just a couple of them in more detail...</p>
<h3><a name="ctrl-p" class="anchor" href="#ctrl-p"><span class="header-link"></span></a>Ctrl-p</h3>
<p><strong>Opening multiple files</strong></p>
<p>Although Ctrl-p is execellent for fuzzy searching for a particular file and opening 
it really quickly, most people don&#39;t take advantage of all its features such as
the ability to open multiple files at once.</p>
<p>When you open Ctrl-p (I have it mapped to <code>\t</code> for quicker access) you can press
<code>Ctrl-z</code> multiple times for each file you want to open and then press either
<code>Ctrl-x</code> to open them in horizontal split window panes, or <code>Ctrl-o</code> to open them
in vertical split window panes.</p>
<p><strong>Refreshing the list of files</strong></p>
<p>This is a simple tip but I&#39;m sure some people aren&#39;t aware that when you add a new 
file whilst Vim is still open then Ctrl-p would have cached the intial set of
files in that directory (and sub directories) and so it wont have any new files
created within its cache.</p>
<p>To refresh the cache simply press the <code>F5</code> key when Ctrl-p is open.</p>
<h3><a name="ack" class="anchor" href="#ack"><span class="header-link"></span></a>Ack</h3>
<p>I wont go into the details of how to use Ack as I&#39;ve covered this in a previous
Vim post (so go read that instead). I will say that being able to carry out
global searches is incredibly useful and something I do on a regular basis and
so if you&#39;re not taking advantage of vimgrep, Ack or Ag or whatever search tool
then you&#39;re missing a trick.</p>
<h3><a name="nerdtree" class="anchor" href="#nerdtree"><span class="header-link"></span></a>NERDTree</h3>
<p>Again, I&#39;ve covered NERDTree in a previous post so if you&#39;re after the basics
then go read that first.</p>
<p><strong>Bookmarks</strong></p>
<p>There are some useful things you can do with NERDTree outside of simple file
system viewing and one of those is &quot;Bookmarks&quot;.</p>
<p>When your cursor is on a particular directory or file then enter the command
<code>:bookmark my_bookmark_name</code>.</p>
<p>Next time you open NERDTree you can press <code>B</code> to show your bookmarks and then
hit enter on <code>my_bookmark_name</code> and it&#39;ll take you directly to the bookmarked
directory/file.</p>
<p><strong>Modifying files and folders</strong></p>
<p>Press <code>m</code> to bring up a menu that lets you add, edit
or delete the currently highlighted file or folder. Just follow the instructions on
the screen.</p>
<p><strong>Easy toggling</strong></p>
<p>I&#39;ve mapped <code>\&#39;</code> to the command <code>:NERDTreeToggle&lt;cr&gt;</code> so it is a lot quicker and
easier to toggle the NERDTree open and closed.</p>
<p><strong>Searching</strong></p>
<p>If you have a very long list of directories which you
have to scroll through, then because NERDTree is essentially just another Vim window
you can use the <code>/</code> search feature to quickly skip ahead to the item you&#39;re
interested in.</p>
<h3><a name="surround" class="anchor" href="#surround"><span class="header-link"></span></a>Surround</h3>
<p>This is an awesome plugin that does one thing and does it well. It allows you to
quickly change the surrounding tabs or quotation marks of a selection or word.</p>
<p>The basic command is <code>cs</code> followed by either <code>t</code> for tag or <code>&quot;</code> or <code>&#39;</code> or
whatever the surround syntax is.</p>
<p>So for example, to change <code>&lt;p&gt;text&lt;/p&gt;</code> to <code>&lt;div&gt;test&lt;/div&gt;</code> just run
<code>cst&lt;div&gt;</code>.</p>
<p>If you have <code>&quot;test&quot;</code> and you want <code>&#39;test&#39;</code> instead then just run <code>cs&quot;&#39;</code>.</p>
<p>You can also delete the delimiters (surrounding syntax) using <code>d</code> instead of
<code>c</code>. </p>
<p>So for example, if you have <code>&quot;test&quot;</code> and you want to remove the quotations then just use <code>ds&quot;</code>.</p>
<p>You can also add syntax to a word that doesn&#39;t have it by doing <code>ysiw</code> followed
by the punctuation you want to surround the word with (e.g. <code>ysiw]</code> to have
square brackets around the word).</p>
<p>Note: when adding surrounding syntax be aware that the right side bracket is
what you should use if you want no space, and the left side bracket if you want
a space included. For example, if you wanted <code>[ abc ]</code> then run <code>ysiw[</code>. But if
you want <code>[abc]</code> then use <code>ysiw]</code> instead.</p>
<p>The standard syntax for adding surrounding syntax is <code>ys</code> followed by your
selection command (e.g. this could be <code>$</code> to select to the end of the line)
followed by the punctuation you want to use.</p>
<h2><a name="configuration" class="anchor" href="#configuration"><span class="header-link"></span></a>Configuration</h2>
<p>For the full configuration set-up have a look at my &quot;<a href="https://github.com/Integralist/Fresh-Install">Fresh Install</a>&quot; repo.
Below are just a few different vim settings (most are outright stolen from
my colleague <a href="https://github.com/sthulb">Simon Thulbourn</a> so do take a look at
his dotfile set-up).</p>
<h3><a name="settings" class="anchor" href="#settings"><span class="header-link"></span></a>Settings</h3>
<pre><code class="lang-vim"><div class="highlight"><pre><span class="c">&quot; switch syntax highlighting on, when the terminal has colors</span>
<span class="nb">syntax</span> <span class="k">on</span>

<span class="c">&quot; use vim, not vi api</span>
<span class="k">set</span> <span class="nb">nocompatible</span>

<span class="c">&quot; no backup files</span>
<span class="k">set</span> <span class="nb">nobackup</span>

<span class="c">&quot; no write backup</span>
<span class="k">set</span> <span class="nb">nowritebackup</span>

<span class="c">&quot; no swap file</span>
<span class="k">set</span> <span class="nb">noswapfile</span>

<span class="c">&quot; command history</span>
<span class="k">set</span> <span class="k">history</span><span class="p">=</span><span class="m">100</span>

<span class="c">&quot; always show cursor</span>
<span class="k">set</span> <span class="nb">ruler</span>

<span class="c">&quot; show incomplete commands</span>
<span class="k">set</span> <span class="nb">showcmd</span>

<span class="c">&quot; incremental searching</span>
<span class="k">set</span> <span class="nb">incsearch</span>

<span class="c">&quot; highlight search</span>
<span class="k">set</span> <span class="nb">hlsearch</span>

<span class="c">&quot; ignore case in search</span>
<span class="k">set</span> <span class="nb">smartcase</span>

<span class="c">&quot; make sure any searches /searchPhrase doesn&#39;t need the \c escape character</span>
<span class="k">set</span> <span class="nb">ignorecase</span>

<span class="c">&quot; a buffer is marked as ‘hidden’ if it has unsaved changes, and it is not</span>
currently loaded <span class="k">in</span> <span class="k">a</span> <span class="nb">window</span>
<span class="c">&quot; if you try and quit Vim while there are hidden buffers, you will raise an</span>
error:
<span class="c">&quot; E162: No write since last change for buffer “a.txt”</span>
<span class="k">set</span> <span class="nb">hidden</span>

<span class="c">&quot; disable folding because it is evil</span>
<span class="k">set</span> <span class="nb">nofoldenable</span>

<span class="c">&quot; turn word wrap off</span>
<span class="k">set</span> <span class="nb">nowrap</span>

<span class="c">&quot; scroll with more context</span>
<span class="k">set</span> <span class="nb">scrolloff</span><span class="p">=</span><span class="m">10</span>

<span class="c">&quot; allow backspace to delete end of line, indent and start of line characters</span>
<span class="k">set</span> <span class="nb">backspace</span><span class="p">=</span>indent<span class="p">,</span><span class="nb">eol</span><span class="p">,</span><span class="k">start</span>

<span class="c">&quot; convert tabs to spaces</span>
<span class="k">set</span> <span class="nb">expandtab</span>

<span class="c">&quot; set tab size</span>
<span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span>

<span class="c">&quot; the number of spaces inserted for a tab</span>
<span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span>

<span class="c">&quot; turn on line numbers</span>
<span class="k">set</span> <span class="k">number</span>

<span class="c">&quot; highlight tailing whitespace</span>
<span class="k">set</span> <span class="nb">list</span> <span class="nb">listchars</span><span class="p">=</span><span class="k">tab</span>:\ \ <span class="p">,</span>trail:·

<span class="c">&quot; get rid of the delay when pressing O (for example)</span>
<span class="c">&quot; http://stackoverflow.com/questions/2158516/vim-delay-before-o-opens-a-new-line</span>
<span class="k">set</span> <span class="nb">timeout</span> <span class="nb">timeoutlen</span><span class="p">=</span><span class="m">1000</span> <span class="nb">ttimeoutlen</span><span class="p">=</span><span class="m">100</span>

<span class="c">&quot; always show status bar</span>
<span class="k">set</span> <span class="nb">laststatus</span><span class="p">=</span><span class="m">2</span>

<span class="c">&quot; set the status line to something useful</span>
<span class="k">set</span> <span class="nb">statusline</span><span class="p">=</span>%<span class="k">f</span>\ %<span class="p">=</span>L:%<span class="k">l</span>/%L\ %<span class="k">c</span>\ <span class="p">(</span>%<span class="k">p</span>%%<span class="p">)</span>

<span class="c">&quot; hide the toolbar</span>
<span class="k">set</span> <span class="nb">guioptions</span><span class="p">-=</span>T

<span class="c">&quot; utf encoding</span>
<span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>

<span class="c">&quot; autoload files that have changed outside of vim</span>
<span class="k">set</span> <span class="nb">autoread</span>

<span class="c">&quot; use system clipboard</span>
<span class="c">&quot;</span>
http:<span class="sr">//</span>stackoverflow.<span class="k">com</span><span class="sr">/questions/</span><span class="m">8134647</span>/copy<span class="p">-</span>and<span class="p">-</span><span class="nb">paste</span><span class="p">-</span><span class="k">in</span><span class="p">-</span><span class="k">vim</span><span class="p">-</span>via<span class="p">-</span>keyboard<span class="p">-</span>between<span class="p">-</span>different<span class="p">-</span>mac<span class="p">-</span>terminals
<span class="k">set</span> <span class="nb">clipboard</span><span class="p">+=</span>unnamed

<span class="c">&quot; don&#39;t show intro</span>
<span class="k">set</span> <span class="nb">shortmess</span><span class="p">+=</span>I

<span class="c">&quot; better splits</span>
<span class="k">set</span> <span class="nb">splitbelow</span>
<span class="k">set</span> <span class="nb">splitright</span>
</pre></div>
</code></pre>
<h3><a name="file-types" class="anchor" href="#file-types"><span class="header-link"></span></a>File types</h3>
<pre><code class="lang-vim"><div class="highlight"><pre><span class="c">&quot; turn indentation on</span>
<span class="k">filetype</span> indent <span class="k">on</span>

<span class="c">&quot; enable filetype plugins</span>
<span class="k">filetype</span> plugin <span class="k">on</span>
</pre></div>
</code></pre>
<h3><a name="commands" class="anchor" href="#commands"><span class="header-link"></span></a>Commands</h3>
<pre><code class="lang-vim"><div class="highlight"><pre><span class="c">&quot; jump to last cursor</span>
autocmd <span class="nb">BufReadPost</span> *
  \ <span class="k">if</span> line<span class="p">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="p">)</span> <span class="p">&gt;</span> <span class="m">0</span> &amp;&amp; line<span class="p">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="p">)</span> <span class="p">&lt;=</span> line<span class="p">(</span><span class="s2">&quot;$&quot;</span><span class="p">)</span> <span class="p">|</span>
  \   exe <span class="s2">&quot;normal g`\&quot;&quot;</span> <span class="p">|</span>
  \ <span class="k">endif</span>

<span class="k">fun</span><span class="p">!</span> StripTrailingWhitespace<span class="p">()</span>
<span class="c">    &quot; don&#39;t strip on these filetypes</span>
    <span class="k">if</span> &amp;<span class="nb">ft</span> <span class="p">=~</span> <span class="s1">&#39;markdown&#39;</span>
        <span class="k">return</span>
    <span class="k">endif</span>
    %<span class="k">s</span><span class="sr">/\s\+$/</span>/<span class="k">e</span>
<span class="k">endfun</span>
autocmd <span class="nb">BufWritePre</span> * <span class="k">call</span> StripTrailingWhitespace<span class="p">()</span>

<span class="c">&quot; file formats</span>
autocmd Filetype gitcommit <span class="k">setlocal</span> <span class="k">spell</span> <span class="nb">textwidth</span><span class="p">=</span><span class="m">72</span>
autocmd Filetype markdown <span class="k">setlocal</span> <span class="nb">textwidth</span><span class="p">=</span><span class="m">80</span>
autocmd <span class="nb">FileType</span> cucumber<span class="p">,</span><span class="k">ruby</span><span class="p">,</span>yaml <span class="k">setl</span> <span class="k">sw</span><span class="p">=</span><span class="m">2</span> <span class="k">sts</span><span class="p">=</span><span class="m">2</span> <span class="nb">et</span>

<span class="c">&quot; specify syntax highlighting for specific files</span>
<span class="k">au</span> Bufread<span class="p">,</span><span class="nb">BufNewFile</span> *.spv <span class="k">set</span> <span class="k">filetype</span><span class="p">=</span>php
<span class="k">au</span> Bufread<span class="p">,</span><span class="nb">BufNewFile</span> *.md <span class="k">set</span> <span class="k">filetype</span><span class="p">=</span>markdown <span class="c">&quot; Vim interprets .md as</span>
<span class="s1">&#39;modula2&#39;</span> otherwise<span class="p">,</span> see :<span class="k">set</span> <span class="k">filetype</span>?
</pre></div>
</code></pre>
<h3><a name="plugins" class="anchor" href="#plugins"><span class="header-link"></span></a>Plugins</h3>
<pre><code class="lang-vim"><div class="highlight"><pre><span class="c">&quot; Declare bundles are handled via Vundle</span>
<span class="k">set</span> <span class="nb">rtp</span><span class="p">+=</span>$HOME<span class="sr">/.vim/</span>bundle/vundle
<span class="k">call</span> vundle#rc<span class="p">()</span>

<span class="c">&quot; Let Vundle manage Vundle</span>
Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>

<span class="c">&quot; CtrlP</span>
Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">t</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">p</span><span class="p">&gt;</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">y</span> :CtrlPBuffer<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
<span class="k">let</span> <span class="k">g</span>:ctrlp_show_hidden<span class="p">=</span><span class="m">1</span>
<span class="k">let</span> <span class="k">g</span>:ctrlp_working_path_mode<span class="p">=</span><span class="m">0</span>
<span class="k">let</span> <span class="k">g</span>:ctrlp_max_height<span class="p">=</span><span class="m">30</span>
<span class="k">set</span> <span class="nb">wildignore</span><span class="p">+=</span>*<span class="sr">/.git/</span>*<span class="p">,</span>*<span class="sr">/.hg/</span>*<span class="p">,</span>*<span class="sr">/.svn/</span>*.<span class="p">,</span>*/.DS_Store

<span class="c">&quot; Tomorrow Night Theme</span>
Bundle <span class="s1">&#39;jlangston/tomorrow-night-vim&#39;</span>
<span class="p">:</span><span class="k">silent</span><span class="p">!</span> :<span class="k">colorscheme</span> tomorrow<span class="p">-</span>night<span class="p">-</span>bright

<span class="c">&quot; Markdown</span>
Bundle <span class="s1">&#39;tpope/vim-markdown&#39;</span>

<span class="c">&quot; Markdown (allow piping of markdown files to the browser)</span>
<span class="k">au</span> <span class="nb">BufEnter</span><span class="p">,</span><span class="nb">BufNew</span> *.md map <span class="p">&lt;</span>enter<span class="p">&gt;</span> :<span class="k">wa</span>\<span class="p">|!</span>rbfu rdiscount % \<span class="p">|</span> bcat<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>

<span class="c">&quot; Cucumber</span>
Bundle <span class="s1">&#39;tpope/vim-cucumber&#39;</span>

<span class="c">&quot; Tags</span>
<span class="c">&quot; First run `ctags -R` within the root directory (this is installed via</span>
Homebrew<span class="p">)</span>
<span class="c">&quot; Second within your file, on a method/class/object (whatever) press `Ctrl+]`</span>
Bundle <span class="s1">&#39;xolox/vim-misc&#39;</span>
Bundle <span class="s1">&#39;majutsushi/tagbar&#39;</span>
<span class="k">let</span> <span class="k">g</span>:tagbar_ctags_bin<span class="p">=</span><span class="s1">&#39;/usr/local/bin/ctags&#39;</span>

<span class="c">&quot; Tags</span>
<span class="c">&quot; Open Tagbar when pressing &lt;leader&gt;b</span>
<span class="c">&quot; And automatically close it after selecting something</span>
<span class="p">:</span>map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">b</span> :TagbarOpenAutoClose<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>

<span class="c">&quot; Tab completion</span>
Bundle <span class="s1">&#39;ervandew/supertab&#39;</span>

<span class="c">&quot; Enable repeating supported plugin maps with &#39;.&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-repeat&#39;</span>

<span class="c">&quot; Comment out stuff</span>
Bundle <span class="s1">&#39;tpope/vim-commentary.git&#39;</span>

<span class="c">&quot; Ack (uses Ag behind the scenes)</span>
Bundle <span class="s1">&#39;mileszs/ack.vim&#39;</span>
<span class="k">let</span> <span class="k">g</span>:ackprg <span class="p">=</span> <span class="s1">&#39;ag --nogroup --nocolor --column&#39;</span>

<span class="c">&quot; Applies `end` keyword to relevant lines of ruby code</span>
Bundle <span class="s1">&#39;tpope/vim-endwise&#39;</span>

<span class="c">&quot; Status line design improvements</span>
Bundle <span class="s1">&#39;Lokaltog/powerline&#39;</span>
<span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/powerline/</span>powerline<span class="sr">/bindings/</span><span class="k">vim</span>

<span class="c">&quot; Gists</span>
Bundle <span class="s1">&#39;mattn/webapi-vim&#39;</span>
Bundle <span class="s1">&#39;vim-scripts/Gist.vim&#39;</span>
Bundle <span class="s1">&#39;tpope/vim-fugitive&#39;</span>

<span class="c">&quot; Gists (Github settings)</span>
<span class="k">let</span> <span class="k">g</span>:github_user <span class="p">=</span> $GITHUB_USER
<span class="k">let</span> <span class="k">g</span>:github_token <span class="p">=</span> $GITHUB_TOKEN

<span class="c">&quot; HTML generation (in NORMAL mode Ctrl+y then , &lt;C-y,&gt;)</span>
Bundle <span class="s1">&#39;mattn/emmet-vim&#39;</span>

<span class="c">&quot; Rename variables and files in your code</span>
Bundle <span class="s1">&#39;vim-scripts/rename.vim&#39;</span>

<span class="c">&quot; tmux switcher</span>
<span class="c">&quot;</span>
http:<span class="sr">//</span>robots.thoughtbot.<span class="k">com</span><span class="sr">/post/</span><span class="m">53022241323</span>/seamlessly<span class="p">-</span>navigate<span class="p">-</span><span class="k">vim</span><span class="p">-</span>and<span class="p">-</span>tmux<span class="p">-</span>splits
Bundle <span class="s1">&#39;christoomey/vim-tmux-navigator&#39;</span>

<span class="c">&quot; Git gutter</span>
Bundle <span class="s1">&#39;airblade/vim-gitgutter&#39;</span>
<span class="k">let</span> <span class="k">g</span>:gitgutter_enabled <span class="p">=</span> <span class="m">1</span>
<span class="k">let</span> <span class="k">g</span>:gitgutter_eager <span class="p">=</span> <span class="m">0</span>
<span class="k">let</span> <span class="k">g</span>:gitgutter_sign_column_always <span class="p">=</span> <span class="m">1</span>
<span class="nb">highlight</span> clear SignColumn

<span class="c">&quot; File System</span>
Bundle <span class="s1">&#39;vim-scripts/The-NERD-tree&#39;</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span>&#39; :NERDTreeToggle<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>

<span class="c">&quot; Snippets</span>
Bundle <span class="s1">&#39;MarcWeber/vim-addon-mw-utils&#39;</span>
Bundle <span class="s1">&#39;tomtom/tlib_vim&#39;</span>
Bundle <span class="s1">&#39;garbas/vim-snipmate&#39;</span>

<span class="c">&quot; SCSS, Sass &amp; Haml Syntax Support</span>
Bundle <span class="s1">&#39;tpope/vim-haml&#39;</span>

<span class="c">&quot; Surround text with HTML or punctuation</span>
Bundle <span class="s1">&#39;tpope/vim-surround&#39;</span>

<span class="c">&quot; HTML5 syntax</span>
Bundle <span class="s1">&#39;othree/html5.vim&#39;</span>

<span class="c">&quot; Tabularize</span>
Bundle <span class="s1">&#39;godlygeek/tabular&#39;</span>
map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">e</span> :Tabularize /<span class="p">=&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">c</span> :Tabularize /:<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>

<span class="c">&quot; JS Hint</span>
Bundle <span class="s1">&#39;Shutnik/jshint2.vim&#39;</span>
</pre></div>
</code></pre>
<h2><a name="useful-vim-featurescommands" class="anchor" href="#useful-vim-featurescommands"><span class="header-link"></span></a>Useful Vim features/commands</h2>
<p>Part of my Vim workflow is to use Vim as efficiently as possible. To try and
take advantage of all the things it does well (such as short key commands to
help make mundane tasks quicker and easier) and to find solutions to problems
that Vim might not handle so well. </p>
<p>Here follows are some such tips and tricks...</p>
<h3><a name="search-and-replace-across-multiple-files" class="anchor" href="#search-and-replace-across-multiple-files"><span class="header-link"></span></a>Search and Replace across multiple files</h3>
<p>Surprisingly this is quite a difficult task to achieve and is one of Vim&#39;s greatest failings.</p>
<p>There are two ways this can be done, and neither is perfect. </p>
<p>You&#39;ve got the Vim way and the Unix way.</p>
<h4><a name="the-vim-way" class="anchor" href="#the-vim-way"><span class="header-link"></span></a>The Vim Way</h4>
<p>There are a couple of potential work-arounds in Vim. One way is to use either multiple files already open 
(so multiple buffers are open) or multiple files specified as arguments when opening Vim.</p>
<p>This relies on either the <code>bufdo</code> or <code>argdo</code> command (depending on whether
you&#39;re going to use buffers or arguments)..</p>
<p><code>bufdo</code> executes a command for all buffers open, and <code>argdo</code> does the same for
files specified via arguments when opening Vim.</p>
<p>There is also <code>windo</code> if you have multiple windows open.</p>
<p>The command to run would be (I&#39;m going to use <code>bufdo</code> as I almost never open Vim
with files specified via arguments, I always use Ctrl-p to open files): </p>
<p><code>:bufdo %s/search/replace/ge | update</code></p>
<p>...the trick is the <code>e</code> flag which tells Vim to ignore any errors (which could
occur if a file you&#39;re searching doesn&#39;t find a match). </p>
<p>The first half of the command tells Vim to do the search and replace and updates
the buffers, but we don&#39;t <em>write</em> to the buffer! That&#39;s why we then pipe over to
the <code>update</code> command to write to the files (this only writes to the file if it
has been modified).</p>
<p>If you want to use the argument list but not have to pass all those names as
arguments when opening Vim then you can just use <code>:args *.txt</code> to add all txt
files to the argument list (note: doing this will open each of those files,
again one of the downsides of using Vim for this task).</p>
<p><strong>Problems?</strong></p>
<p>Again, search and replace across multiple files is really difficult for Vim
sadly.</p>
<p>One of the main issues is that Vim will open all the specified files (which
could be a lot of files!). You could limit the number of files it searches by
specifying a directory or subset of files to check, but if you don&#39;t know
where to search then your only option is to search the entire code base and
that&#39;s a crazy number of files (it would be for me working on the BBC News code base) to have open within Vim.</p>
<p>There are alternatives but they also aren&#39;t as great as you&#39;d hope, such as not using Vim at all...</p>
<h4><a name="the-unix-way" class="anchor" href="#the-unix-way"><span class="header-link"></span></a>The Unix Way</h4>
<p><code>sed -i -- &#39;s/search_pattern/replacement/&#39; *.txt &amp;&amp; rm *.txt--</code></p>
<p>...this uses
<a href="http://www.integralist.co.uk/posts/unix-commands/#sed-find-and-replace">sed</a>
along with the &#39;edit in place&#39; <code>-i</code> flag (which tells sed to apply the changes
to a temp file first and then overwrite the original file).</p>
<p>Typically the <code>-i</code> flag will be followed with a file extension so sed knows what
type of temp file needs to be saved to (e.g. <code>-i.bak</code> would save the changes
temporarily to a test1.txt.bak file), so I opted for <code>--</code>.</p>
<p>After that you pass in the search pattern and the replacement and then what
files to check against.</p>
<p>Finally we need to remove the temp files that have been created <code>rm *.txt--</code>.</p>
<p>Not completely ideal, I know, as it effectively has similar issues to the Vim way in
that you have to try and filter down files searched (although I&#39;d argue doing
this via the shell should/could be more efficient than from within Vim).</p>
<h4><a name="the-gnu-way" class="anchor" href="#the-gnu-way"><span class="header-link"></span></a>The GNU Way</h4>
<p>The very last way is the same as the previous solution but is the one I use
now...</p>
<p><code>gsed -i &#39;s/search_pattern/replacement/&#39; **/*.txt</code></p>
<p>...this is the GNU version of the sed command which you can install using <code>brew
install gnu-sed</code>.</p>
<p>Notice that you don&#39;t need to specify a temporary file to write to (and so no
extra files to have to remove).</p>
<p>This for me is the best way to handle this type of issue.</p>
<p>All of the above should cover the majority of solutions you&#39;ll find on the internet for this problem.</p>
<h3><a name="moving-between-brackets" class="anchor" href="#moving-between-brackets"><span class="header-link"></span></a>Moving between brackets</h3>
<p>It can be useful sometimes to be able to jump between opening and closing
brackets (especially when working on code), this is where <code>Shift-%</code> comes in.</p>
<h3><a name="auto-indenting" class="anchor" href="#auto-indenting"><span class="header-link"></span></a>Auto indenting</h3>
<p>This is one of those Vim commands most people (even experienced Vim users
aren&#39;t aware of). It&#39;s an essential tool for me when programming now and since
discovering it I find I use it all the time.</p>
<p>If we want to auto indent all content inside a code block then we can do this
one of two ways:</p>
<ol>
<li>whilst cursor is placed on either the opening or closing code block bracket</li>
<li>whilst cursor is somewhere inside the code block</li>
</ol>
<p>For the first scenario you can use: <code>=%</code></p>
<p>For the second scenario you can use: <code>=i{</code> or <code>=i}</code></p>
<h3><a name="changing-content" class="anchor" href="#changing-content"><span class="header-link"></span></a>Changing content</h3>
<p>Another small tip that really does save we a lot of time is when I&#39;m in the
middle of a word and I want to either edit or select that word.</p>
<p>What I used to do was move <code>b</code> to the start of the word and then either <code>ce</code> or <code>ve</code>.</p>
<p>But I discovered recently that I can skip the first <code>b</code> command. I can do what I
need to whilst my cursor is placed anywhere inside the word using: <code>ciw</code> (change
inside word) or <code>viw</code> (select inside word).</p>
<p>Also, I recently discovered that you can delete a specific number of characters using something 
like <code>c2l</code> or <code>d2l</code> (change or delete 2 characters). In this command <code>l</code> means &#39;letter&#39;. That can
be quite useful as well.</p>
<h3><a name="selecting-content" class="anchor" href="#selecting-content"><span class="header-link"></span></a>Selecting content</h3>
<p>Most Vim users probably know this but just in case you don&#39;t, to be able to
select content inside of a set of punctuation (such as a brackets or quotations)
then use: <code>vi(</code> or <code>vi&#39;</code> or <code>vi&quot;</code> (you get the idea).</p>
<h3><a name="using-the-register" class="anchor" href="#using-the-register"><span class="header-link"></span></a>Using the register</h3>
<p>One of the real annoying issues I have is when I have some content I want to
copy and paste to another place in my code. Imagine you have the following
code...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * @param abc</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">someThing</span> <span class="p">(</span><span class="nx">def</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>...I want to replace <code>def</code> with <code>abc</code> so the first thing I do is yank/copy the
<code>abc</code>, then move to the parenthesis, but rather than manually delete <code>def</code> and
then paste my content I&#39;ll do a <code>di(</code> to delete the content first. </p>
<p>This causes me a problem because it updates the register list (which tracks 
everything that has been yanked). Any time you change or delete content it gets 
copied to the register list. So if I was to paste now I&#39;d just end up pasting
<code>def</code> as the delete command has placed that at the top of my register list.</p>
<p>So I&#39;ll end up having to go back and re-copy <code>abc</code> and then head back again to
the parenthesis to paste it in.</p>
<p>My colleague showed me this alternative better workflow: copy <code>abc</code> and still delete
inside the parenthesis, but if you execute <code>:reg</code> and look at the list there
you&#39;ll see something like <code>&quot;1 abc</code>. I can then reuse that particular item by
typing <code>&quot;1p</code> (so I grab what&#39;s held at <code>&quot;1</code> and then use the paste command).</p>
<p>It might sound like I&#39;m doing more work by looking up what&#39;s in the register
list, but really I&#39;m saving myself time compared to moving my cursor back to the original
location and re-copying <code>abc</code> and then moving back to parenthesis and pasting.</p>
<h3><a name="buffer-management" class="anchor" href="#buffer-management"><span class="header-link"></span></a>Buffer management</h3>
<p>This should be common knowledge for Vim users: when you open a file then Vim
places the contents of that file inside of a buffer. When you edit the buffer
then the original file is left unchanged until the buffer itself is written back
to the file (e.g. <code>:w</code>).</p>
<p>When you have multiple files open then you have multiple buffers. To close the
current buffer you can run the command <code>:bd</code>.</p>
<p>You can also view all open buffers with <code>:ls</code>.</p>
<p>But the one trick I find most useful is to close all open buffers and this again
relies on <code>bufdo</code> which we saw earlier when looking at a global search and
replace solution.</p>
<p>If you run the command <code>:bufdo bd</code> then it&#39;ll simply run the close buffer
command <code>bd</code> for every buffer currently open. Simple.</p>
<p>Within my .vimrc file I&#39;ve mapped those last two items to more easily accessible keys...</p>
<pre><code class="lang-vim"><div class="highlight"><pre><span class="c">&quot; List Buffers</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span>yt :<span class="k">ls</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>

<span class="c">&quot; Delete all Buffers (runs the delete buffer command on all open buffers)</span>
map <span class="p">&lt;</span>leader<span class="p">&gt;</span>yd :<span class="k">bufdo</span> <span class="k">bd</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</pre></div>
</code></pre>
<h3><a name="jump-list" class="anchor" href="#jump-list"><span class="header-link"></span></a>Jump List</h3>
<p>The &#39;jump list&#39; keeps a record of all your cursor positions/movements. It came
in handy whilst I was writing this post actually and I&#39;ll explain how in a
moment.</p>
<p>To view all cursor positions/movements just run the <code>:jumps</code> command.</p>
<p>To move backwards through each jump item use <code>Ctrl-o</code> and to move forward use
<code>Ctrl-i</code>. Straight forward enough.</p>
<p>The reason this was useful to me was I wanted to create a &#39;Table of Contents&#39;
for this post and so I already had the headers (e.g. <code>### Jump List</code>) written
out and so what I was doing was using the <code>/</code> find command to locate all <code>###</code>
and then copying the title and moving back to the top of the document to paste
it into a list.</p>
<p>The problem I was having was after I pasted the item at the top of this post&#39;s
source file, I couldn&#39;t remember the line number I had just come from. So
instead of pressing <code>n</code> to start moving back through all highlighted <code>###</code>
headers I instead just pressed <code>Ctrl-o</code> and it too me back to the last <code>###</code> I
had just moved from. Meaning I could continue on from where I left off.</p>
<p>As you can see, it&#39;s knowledge such as this that makes Vim users more efficient.
I might not use this technique often, but because I know it exists I can take
advantage of it when I do need it.</p>
<h3><a name="change-list" class="anchor" href="#change-list"><span class="header-link"></span></a>Change List</h3>
<p>The &#39;change list&#39; is the same as the &#39;<a href="#jump-list">jump list</a>&#39;. But as I&#39;m sure you&#39;ve already
guessed, it records any changes made to the document. </p>
<p>What might not be clear is that it only records changes made when inside INSERT mode.</p>
<p>So to view all changes run the command <code>:changes</code>.</p>
<p>To move back through the change list use <code>g;</code> and to move forward use <code>g,</code>.</p>
<p>Be aware that this isn&#39;t the same as (u)ndo or <code>Ctrl-r</code> (redo) as they move
backwards and forwards through changes and actually affect the list. The change
list just moves the cursor&#39;s position to the place of a change.</p>
<h3><a name="case-insensitive-searching" class="anchor" href="#case-insensitive-searching"><span class="header-link"></span></a>Case Insensitive Searching</h3>
<p>Although you can set a case-insensitive search (e.g. <code>/mySearchTerm</code>) via your .vimrc, 
you can also use the <code>\c</code> flag at the end of your search term <code>/mySearchTerm\c</code>.</p>
<h3><a name="regular-expressions" class="anchor" href="#regular-expressions"><span class="header-link"></span></a>Regular Expressions</h3>
<p>If you look at <a href="http://vimregex.com/"><a href="http://vimregex.com/">http://vimregex.com/</a></a> you&#39;ll realise that
Vim only supports a subset of modern Regex features.</p>
<p>To make things more awkward Vim also has an odd default engine which means
things like capturing groups <code>(stuff to be captured)</code> needs to be escaped like
so: <code>\(stuff to be captured\)</code> which is ugly and hard to have to remember
(considering nearly all programming languages don&#39;t require this type of syntax
modification).</p>
<p>So to resolve that you can tell Vim to use &quot;very magic mode&quot; (there are other
modes for Vim to use with Regular Expressions but this is the only one of
importance to me - and likely to you as well).</p>
<p>To use &quot;very magic mode&quot; just add <code>\v</code> to the beginning of your regex. </p>
<p>So imagine you want to capture the words &quot;very magic&quot; in standard Vim regex mode
you&#39;d need to write <code>:%s/\(very magic\)//gc</code> but we don&#39;t want to have to escape
the capturing group syntax so we do the following instead <code>:%s/\v(very magic)//gc</code></p>
<p>Note: referencing captured groups differs between programming languages. Some
use <code>$1</code> and others use <code>\1</code> (which makes them consistent with &#39;back
references&#39;). In Vim they use the latter <code>\1</code> style.</p>
<h3><a name="removing-line-spaces" class="anchor" href="#removing-line-spaces"><span class="header-link"></span></a>Removing line spaces</h3>
<p>Pressing <code>Shift-J</code> will remove a line break for you.</p>
<p>This doesn&#39;t sound like much of a tip but this is another of those commands I
end up using a lot.</p>
<p>So it&#39;ll convert...</p>
<pre><code><div class="highlight"><pre><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">some</span> <span class="nx">text</span>
<span class="nx">that</span> <span class="nx">is</span> <span class="nx">split</span> <span class="nx">by</span> <span class="nx">a</span> <span class="nx">line</span> <span class="k">break</span>
</pre></div>
</code></pre>
<p>...into...</p>
<pre><code><div class="highlight"><pre><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">some</span> <span class="nx">text</span> <span class="nx">that</span> <span class="nx">is</span> <span class="nx">split</span> <span class="nx">by</span> <span class="nx">a</span> <span class="nx">line</span> <span class="k">break</span>
</pre></div>
</code></pre>
<h3><a name="switching-case" class="anchor" href="#switching-case"><span class="header-link"></span></a>Switching case</h3>
<p>One thing I used to hate doing is going into INSERT mode to change either a
single character or word (or worse still, an entire sentence) into different
case.</p>
<p>The <code>~</code> tilda command does that for you. </p>
<p>So if your cursor is on a single character such as the &#39;t&#39; of the word &#39;today&#39; 
and you press <code>~</code> (you&#39;ll likely need to hold down the Shift key if
you&#39;re on a Mac) then the casing will switch to uppercase and become &#39;Today&#39;.</p>
<p>This can be done letter by letter or chunks of selected text.</p>
<h3><a name="moving-forward-and-backwards-by-code-not-words" class="anchor" href="#moving-forward-and-backwards-by-code-not-words"><span class="header-link"></span></a>Moving forward and backwards by code not words</h3>
<p>Something I didn&#39;t realise for a long time was that I could use the capitalised
version of most commands for them to do the opposite of what they normally do.</p>
<p>For example, <code>fa</code> will move the cursor to the first instance of the <code>a</code>
character. But <code>F</code> will move backwards for the first instance of <code>a</code> it can
find.</p>
<p>The reason this is important is when I&#39;m programming and I want to move
backwards or forwards I typically use the <code>w</code> and <code>e</code> keys, but programming
syntax can be a pain to jump through like that.</p>
<p>Consider (and this is a contrived example, so forgive me, I realise there are
better ways)...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">this</span><span class="p">.</span><span class="nx">handlePrevImageCalculations</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">debounce</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</pre></div>
</code></pre>
<p>...if I want to get my cursor to just before <code>=</code> then pressing <code>e</code> would take about
three presses as it would stop at the end of <code>this</code> and then <code>.</code> and finally at
the end of <code>handlePrevImageCalculations</code>.</p>
<p>But using <code>E</code> just the once moves there by ignoring punctuation between words.</p>
<p>This is the same for <code>W</code> and <code>B</code>.</p>
<h3><a name="repeating-yourself" class="anchor" href="#repeating-yourself"><span class="header-link"></span></a>Repeating yourself</h3>
<p>Using the <code>.</code> command can be really useful for saving yourself time repeating
yourself. Whether you&#39;ve made an edit or you&#39;ve indented a line of code
(whatever it happens to be), pressing <code>.</code> will repeat that change. Try and get
into the habbit of using it.</p>
<p>To give you an example, I used the Surround plugin (described above) to wrap my
table of contents in square brackets using <code>ys$]</code> and for each line I just
pressed <code>.</code> and it meant I didn&#39;t have to think about which four characters I 
needed to type out multiple times.</p>
<h3><a name="appending-to-end-of-a-line" class="anchor" href="#appending-to-end-of-a-line"><span class="header-link"></span></a>Appending to end of a line</h3>
<p>This tip really does save me a lot of time.</p>
<p>When I wanted to add some content to the end of a line I would typically use <code>$</code>
and then <code>a</code> until I realised I could just press <code>A</code> and that would do the same
thing.</p>
<p>OK so it saves you one key stroke. But I do this type of movement ALL THE TIME
and so that&#39;s a lot of savings you end up making.</p>
<h3><a name="searching-for-current-word" class="anchor" href="#searching-for-current-word"><span class="header-link"></span></a>Searching for current word</h3>
<p>If you want to search for the word your cursor is currently on, don&#39;t do this:</p>
<ul>
<li>select word <code>yiw</code></li>
<li>press <code>/</code></li>
<li>paste copied word <code>p</code></li>
</ul>
<p>...instead just press <code>Shift-8</code> and that&#39;ll do all of that for you.</p>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>So there you have it. This is my attempt to explain my Vim workflow and to
hopefully have shared some useful Vim tips and tricks.</p>
<p>If you want to see my full dotfile set-up (this includes my .vimrc and other Vim
configurations) then check out my public GitHub repo &quot;<a href="https://github.com/Integralist/Fresh-Install">Fresh
Install</a>&quot; which should tell you
everything you need to know (I update this a lot as I find better ways of doing
things).</p>
]]></description><link>http://www.integralist.co.uk/posts/vim-workflow-part-deux/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/vim-workflow-part-deux/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 17 Nov 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Refactoring Techniques]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 18mins</em></p>
<ul>
<li>Introduction</li>
<li>Languages</li>
<li>Why refactor?</li>
<li>When should refactor?</li>
<li>Tests</li>
<li>Refactoring Techniques<ul>
<li><a href="#rename-method">Rename Method</a></li>
<li><a href="#introduce-explaining-variable">Introduce Explaining Variable</a></li>
<li><a href="#inline-temp">Inline Temp</a></li>
<li><a href="#split-temp-variable">Split Temp Variable</a></li>
<li><a href="#replace-temp-with-query">Replace Temp With Query</a></li>
<li><a href="#replace-temp-with-chain">Replace Temp With Chain</a></li>
<li><a href="#extract-method">Extract Method</a></li>
<li><a href="#inline-method">Inline Method</a></li>
<li><a href="#move-method">Move Method</a></li>
<li><a href="#replace-method-with-method-object">Replace Method With Method Object</a></li>
<li><a href="#replace-loop-with-collection-closure-method">Replace Loop With Collection Closure Method</a></li>
<li><a href="#pull-up-method">Pull Up Method</a></li>
<li><a href="#form-template-method">Form Template Method</a></li>
<li><a href="#extract-surrounding-method">Extract Surrounding Method</a></li>
<li><a href="#self-encapsulate-field">Self Encapsulate Field</a></li>
<li><a href="#introduce-named-parameter">Introduce Named Parameter</a></li>
</ul>
</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>Let&#39;s begin by considering: &quot;What is Refactoring?&quot;</p>
<p>The definition of refactoring is:</p>
<blockquote>
<p>a disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behaviour</p>
</blockquote>
<p>Refactoring is a term originated from the <a href="http://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a> community of developers back in the mid-late nineties. </p>
<p>Two of the most prolific programmers of recent times, <a href="http://martinfowler.com/">Martin Fowler</a> and <a href="http://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a> literally wrote the book on the subject of refactoring called &quot;<a href="http://www.amazon.com/gp/product/0201485672">Refactoring: Improving the Design of Existing Code</a>&quot; (well, written by Martin with contributions from Kent).</p>
<p>In 2009 both Martin and Kent helped with a rewrite of the book that focused more on the Ruby language than the original book&#39;s target language of Java. This follow-up book was called &quot;<a href="http://www.amazon.com/Refactoring-Ruby-Edition-Jay-Fields/dp/0321603508">Refactoring: The Ruby Edition</a>&quot; and it&#39;s that book which is the primary driving force of this post.</p>
<p>Since reading the Ruby edition I wanted to have a short summarised version of some of the more commonly used refactoring techniques (mainly for my own reference). By that I mean the techniques described in the book that I find interesting and use a lot in my day to day programming life.</p>
<h2><a name="languages" class="anchor" href="#languages"><span class="header-link"></span></a>Languages</h2>
<p>These refactoring techniques aren&#39;t specific to the Ruby language. You can use them when working with JavaScript or PHP (or any other language for that matter). </p>
<p>Programming languages don&#39;t all offer identical APIs and so sometimes you might need to tweak the examples slightly to fit your environment. </p>
<p>Regardless, the idioms and syntax differences between languages become redundant when you just focus on the pattern(s) behind the proposed solution.</p>
<h2><a name="why-refactor" class="anchor" href="#why-refactor"><span class="header-link"></span></a>Why refactor?</h2>
<p>The purpose of refactoring is to improve the quality, clarity and maintainability of your code. Simple really.</p>
<p>But also, refactoring can be a great lesson in understanding an unfamiliar code base.</p>
<p>Think about it, if you inherit a poorly designed code base that you&#39;ve not seen before and you now need to either fix a bug or add a new feature, then implementing the code necessary would be a lot easier once you had refactored it to be in a more stable, maintainable and ultimately &#39;understandable&#39; state. </p>
<p>Otherwise you would be forced to retro fit your new code on top of a poorly designed foundation and that would be the start of a very unhappy relationship.</p>
<h2><a name="when-should-you-refactor" class="anchor" href="#when-should-you-refactor"><span class="header-link"></span></a>When should you refactor?</h2>
<p>You&#39;ll usually find the time you start refactoring the most is when you are fixing bugs or adding new features.</p>
<p>For example, you typically first need to understand the code that has already been written (regardless of whether it was you who wrote it originally or someone else). </p>
<p>The process of refactoring helps you better understand the code, in preparation for modifying it.</p>
<p>But don&#39;t fall into the trap of thinking that refactoring is something you set aside time for, or only consider at the start/end of a project. It&#39;s not. Refactoring should be done in small chunks throughout the entire life cycle of the project.</p>
<p>As the great <a href="http://www.cleancoder.com/">Uncle Bob</a> once said:</p>
<blockquote>
<p>leave a module in a better state than you found it</p>
</blockquote>
<p>...what this suggests is that refactoring is essential to your daily coding process.</p>
<h3><a name="tests" class="anchor" href="#tests"><span class="header-link"></span></a>Tests</h3>
<p>Before we get started, it&#39;s important to mention that you should have tests in place when you&#39;re refactoring. </p>
<p>You <em>can</em> refactor without tests, but realise that without tests to back you up then you can have no confidence in the refactoring you are implementing.</p>
<p>Refactoring can result in substantial changes to the code and architecture but still leave the top layer API the same. So while you&#39;re refactoring remember the old adage...</p>
<blockquote>
<p>program to an interface, not an implementation</p>
</blockquote>
<p>We want to avoid changing a public API where ever possible (as that&#39;s one of the tenets of refactoring).</p>
<p>If you don&#39;t have tests then I recommend you write some (now)... don&#39;t worry, I&#39;ll wait.</p>
<p>Remember, the process of writing tests (even for an application you don&#39;t know) will help solidify your understanding and expectations of the code you&#39;re about to work on.</p>
<p>Code should be tested regularly while refactoring to ensure you don&#39;t break anything. Keep the &#39;red, green, refactor&#39; feedback loop tight. Tests help confirm if your refactoring has worked or not. Without them you&#39;re effectively flying blind.</p>
<p>So although I won&#39;t explicitly mention it below when discussing the different refactoring techniques, it is implied that on every change to your code you should really be running the relevant tests to ensure no broken code appears.</p>
<h2><a name="refactoring-techniques" class="anchor" href="#refactoring-techniques"><span class="header-link"></span></a>Refactoring Techniques</h2>
<p>There are many documented refactoring techniques and I do not attempt to cover them all, as this post would end up becoming a book in itself. So I&#39;ve picked what I feel are the most common and useful refactoring techniques and I try my best to explain them in a short and concise way.</p>
<p>I&#39;ve put these techniques in order of how you might approach refactoring a piece of code, in a linear, top to bottom order. This is a personal preference and doesn&#39;t necessarily represent the best way to refactor.</p>
<p>Final note: with some of the techniques I have provided a basic code example, but to be honest some techniques are so simple they do not need any example. The <a href="#extract-method">Extract Method</a> is one such technique that although really useful and important, providing a code example would be a waste of time and space.</p>
<p>So without further ado, let&#39;s begin...</p>
<h3><a name="rename-method" class="anchor" href="#rename-method"><span class="header-link"></span></a>Rename Method</h3>
<p>The single most effective and simple refactoring you can implement is to rename a property/attribute, method or object.</p>
<p>Renaming identifiers can reduce the need for code comments and nearly always helps to promote greater clarity.</p>
<p>You&#39;ll find that renaming things is a fundamental part of other refactoring techniques to aid understanding of the code.</p>
<p>This technique relies on giving items a descriptive name to ensure the developer knows at a glance exactly what it does. The following technique <a href="#introduce-explaining-variable">Introduce Explaining Variable</a> is effectively the same.</p>
<h3><a name="introduce-explaining-variable" class="anchor" href="#introduce-explaining-variable"><span class="header-link"></span></a>Introduce Explaining Variable</h3>
<p>So here is a technique specifically based around the premise of renaming. </p>
<p>If you have a complicated expression (for example, you&#39;ll typically have a long winded set of conditions within an <code>if</code> statement) then place that complex expression into a temp variable and give it a descriptive identifier. </p>
<p>For example:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">unless</span> <span class="s2">&quot;This is a String with some CAPS&quot;</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/([A-Z])/</span><span class="p">)</span><span class="o">.</span><span class="n">empty?</span>
  <span class="nb">puts</span> <span class="s2">&quot;capitalised text was found&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Should be:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">caps_not_found</span> <span class="o">=</span> <span class="s2">&quot;This is a String with some CAPS&quot;</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/([A-Z])/</span><span class="p">)</span><span class="o">.</span><span class="n">empty?</span>

<span class="k">unless</span> <span class="n">caps_not_found</span>
  <span class="nb">puts</span> <span class="s2">&quot;capitalised text was found&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Note: this is the only technique that finds temps (i.e. local variables) acceptable. This is because temps are deemed to be less reusable than methods (due to their very nature being &#39;local&#39;) and so introducing temps is something that shouldn&#39;t be considered lightly. Maybe consider using the <a href="#extract-method">Extract Method</a> technique instead before using this particular technique. </p>
<p>Also, don&#39;t worry about performance until you know you have a performance issue to worry about. Developers will always suggest that calling methods is slower than running code inline, but good programming is about readability and maintainability, and extracted methods are not only easier to understand but are much more reusable by other methods. </p>
<p>So if you are considering using the <a href="#introduce-explaining-variable">Introduce Explaining Variable</a> technique, first decide whether the temp would be more useful if it was available to other methods (that way you could use <a href="#extract-method">Extract Method</a> instead and avoid defining a temp altogether).</p>
<h3><a name="inline-temp" class="anchor" href="#inline-temp"><span class="header-link"></span></a>Inline Temp</h3>
<p>Temp variables are a bit of a code smell as they make methods longer and can make the <a href="#extract-method">Extract Method</a> more awkward (as you&#39;d have to pass through more data to the extracted method).</p>
<p>Inline Temp effectively removes the temp variable altogether by just using the value assigned to it (I&#39;d only suggest doing this if the temp is only used once or if the resulting value has come from a method invocation).</p>
<p>For example:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">add_stuff</span>
    <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">do_something</span>
    <span class="n">temp_variable_with_descriptive_name</span> <span class="o">=</span> <span class="n">add_stuff</span>
    <span class="nb">puts</span> <span class="s2">&quot;Number is </span><span class="si">#{</span><span class="n">temp_variable_with_descriptive_name</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Should be:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">add_stuff</span>
    <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">do_something</span>
    <span class="nb">puts</span> <span class="s2">&quot;Number is </span><span class="si">#{</span><span class="n">add_stuff</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Note: a temp by itself doesn&#39;t do any harm, and in some instances can actually make the code clearer (especially if using a result from a method invocation and the method identifier doesn&#39;t indicate the intent as well as it should).</p>
<p>But most likely you&#39;ll end up using this technique to aid the <a href="#extract-method">Extract Method</a> technique as less temp vars means less requirement to pass through additional parameters to the extracted method.</p>
<h3><a name="split-temp-variable" class="anchor" href="#split-temp-variable"><span class="header-link"></span></a>Split Temp Variable</h3>
<p>This technique aims to resolve the concern of violating the SRP (Single Responsibility Principle), although slightly tamer in the sense that SRP is aimed more at Classes/Objects and methods, not typically variable assignments.</p>
<p>But regardless if a temporary variable is assigned to more than once and it is not a loop variable or a collecting/accumulator variable then it is a temp considered to have too many responsibilities.</p>
<p><strong>For example</strong>: (this is a daft example, but what the heck)</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">temp</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">width</span><span class="p">)</span>
<span class="n">temp</span> <span class="o">=</span> <span class="n">height</span> <span class="o">*</span> <span class="n">width</span>
</pre></div>
</code></pre>
<p><strong>Becomes</strong>:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">perimeter</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">width</span><span class="p">)</span>
<span class="n">area</span> <span class="o">=</span> <span class="n">height</span> <span class="o">*</span> <span class="n">width</span>
</pre></div>
</code></pre>
<p>As you can see, the temp variable was handling more responsibility than it should be and so by creating two appropriately distinct temps we ensure greater code clarity.</p>
<h3><a name="replace-temp-with-query" class="anchor" href="#replace-temp-with-query"><span class="header-link"></span></a>Replace Temp With Query</h3>
<p>This technique has a very similar intent to <a href="#inline-temp">Inline Temp</a> in that one of its primary focuses is to aid the <a href="#extract-method">Extract Method</a>.</p>
<p>The subtle but important difference between this technique and <a href="#inline-temp">Inline Temp</a> is that the complex expression assigned to the temp needs to be first moved to a method (where as the <a href="#inline-temp">Inline Temp</a> technique is different in that the temp may already be using a method invocation).</p>
<p>For example:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Box</span>
  <span class="kp">attr_reader</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">:width</span><span class="p">,</span> <span class="ss">:height</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">length</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span>
    <span class="vi">@length</span> <span class="o">=</span> <span class="n">length</span>
    <span class="vi">@width</span>  <span class="o">=</span> <span class="n">width</span>
    <span class="vi">@height</span> <span class="o">=</span> <span class="n">height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">volume</span>
    <span class="c1"># `area` is the temp</span>
    <span class="n">area</span> <span class="o">=</span> <span class="n">length</span> <span class="o">*</span> <span class="n">width</span>
    <span class="n">area</span> <span class="o">*</span> <span class="n">height</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Becomes:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Box</span>
  <span class="kp">attr_reader</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">:width</span><span class="p">,</span> <span class="ss">:height</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">length</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span>
    <span class="vi">@length</span> <span class="o">=</span> <span class="n">length</span>
    <span class="vi">@width</span>  <span class="o">=</span> <span class="n">width</span>
    <span class="vi">@height</span> <span class="o">=</span> <span class="n">height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">volume</span>
    <span class="c1"># notice `area` is now a direct method call</span>
    <span class="n">area</span> <span class="o">*</span> <span class="n">height</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">area</span>
    <span class="n">length</span> <span class="o">*</span> <span class="n">width</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>This technique can help to shorten a long method by not having to define lots of temp variables just to hold values.</p>
<p>If the extracted query method is given an identifier that aptly describes its purpose then the code still can be considered clear and descriptive. </p>
<p>Also, it is considered bad form to define a variable which changes once it has been set (hence moving to a method better indicates an unstable value). </p>
<p>Note: this technique can sometimes be made easier to implement once you&#39;ve used <a href="#split-temp-variable">Split Temp Variable</a>. </p>
<p>Remember this technique (as with other techniques) is an incremental step towards removing non-essential temps, so consider using <a href="#inline-temp">Inline Temp</a> afterwards, thus removing the need for the temp altogether.</p>
<h3><a name="replace-temp-with-chain" class="anchor" href="#replace-temp-with-chain"><span class="header-link"></span></a>Replace Temp With Chain</h3>
<p>This is yet another technique designed to rid your code of temp variables. </p>
<p>If you have a temp variable holding the result of calling an object&#39;s method, and follow the assignment by using that temp to carry out more method calls, then you should consider chaining method calls instead.</p>
<p>The implementation is quite simple, you just have to ensure the methods called return <code>self</code> (or <code>this</code> if using a language like JavaScript).</p>
<p>By allowing methods to chain we again have the opportunity to remove an unnecessary temps.</p>
<p><strong>For example</strong>:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">College</span>
    <span class="k">def</span> <span class="nf">create_course</span>
        <span class="nb">puts</span> <span class="s2">&quot;create course&quot;</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add_student</span>
        <span class="nb">puts</span> <span class="s2">&quot;add student&quot;</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">temp</span> <span class="o">=</span> <span class="no">College</span><span class="o">.</span><span class="n">new</span>
<span class="n">temp</span><span class="o">.</span><span class="n">create_course</span>
<span class="n">temp</span><span class="o">.</span><span class="n">add_student</span>
<span class="n">temp</span><span class="o">.</span><span class="n">add_student</span>
<span class="n">temp</span><span class="o">.</span><span class="n">add_student</span>
</pre></div>
</code></pre>
<p><strong>Becomes</strong>:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">College</span>
    <span class="c1"># static method so can be accessed without creating an instance</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_course</span>
        <span class="n">college</span> <span class="o">=</span> <span class="no">College</span><span class="o">.</span><span class="n">new</span>
        <span class="nb">puts</span> <span class="s2">&quot;create course&quot;</span>
        <span class="n">college</span> <span class="c1"># return new object instance</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add_student</span>
        <span class="nb">puts</span> <span class="s2">&quot;add student&quot;</span>
        <span class="nb">self</span> <span class="c1"># refers to the new object instance</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">college</span> <span class="o">=</span> <span class="no">College</span><span class="o">.</span><span class="n">create_course</span>
                 <span class="o">.</span><span class="n">add_student</span>
                 <span class="o">.</span><span class="n">add_student</span>
                 <span class="o">.</span><span class="n">add_student</span>
</pre></div>
</code></pre>
<h3><a name="extract-method" class="anchor" href="#extract-method"><span class="header-link"></span></a>Extract Method</h3>
<p>Here it is! In my opinion &#39;<em>The</em>&#39; most used and important refactoring technique.</p>
<p>The implementation behind this technique is very simple. It consists of breaking up long methods by shifting overly complex chunks of code into new methods which have very descriptive identifiers. </p>
<p>For example:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
  <span class="kp">attr_reader</span> <span class="ss">:bar</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">bar</span>
    <span class="vi">@bar</span> <span class="o">=</span> <span class="n">bar</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">do_something</span>
    <span class="nb">puts</span> <span class="s2">&quot;my baz&quot;</span> <span class="c1"># notice this is duplication</span>
    <span class="nb">puts</span> <span class="n">bar</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">do_something_else</span>
    <span class="nb">puts</span> <span class="s2">&quot;my baz&quot;</span> <span class="c1"># notice this is duplication</span>
    <span class="nb">puts</span> <span class="s2">&quot;Something else&quot;</span>
    <span class="nb">puts</span> <span class="n">bar</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Becomes:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
  <span class="kp">attr_reader</span> <span class="ss">:bar</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">bar</span>
    <span class="vi">@bar</span> <span class="o">=</span> <span class="n">bar</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">do_something</span>
    <span class="n">baz</span>
    <span class="nb">puts</span> <span class="n">bar</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">do_something_else</span>
    <span class="n">baz</span>
    <span class="nb">puts</span> <span class="s2">&quot;Something else&quot;</span>
    <span class="nb">puts</span> <span class="n">bar</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">baz</span>
    <span class="nb">puts</span> <span class="s2">&quot;my baz&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>But be careful with handling local variables as you&#39;ll need to pass them through to the extracted method and that can be difficult if there are lots of temps in use. Sometimes to facility the Extract Method you&#39;ll need to first incorporate other techniques such as <a href="#replace-temp-with-query">Replace Temp With Query</a> and <a href="#inline-temp">Inline Temp</a>.</p>
<h3><a name="inline-method" class="anchor" href="#inline-method"><span class="header-link"></span></a>Inline Method</h3>
<p>Sometimes you want the opposite of the <a href="#extract-method">Extract Method</a> technique. Imagine a method exists whose content is already simple and clear, and whose identifier adds no extra benefit. In this instance we&#39;re just making an extra call for no real benefit.</p>
<p>So to fix this problem we&#39;ll convert the method invocation into an inlined piece of code (unless of course the method is used in multiple places, in that case leave it where it is as having it in a separate method keeps our code DRY).</p>
<h3><a name="move-method" class="anchor" href="#move-method"><span class="header-link"></span></a>Move Method</h3>
<p>In a previous post about <a href="http://www.integralist.co.uk/posts/object-oriented-design-ood/#class-analysis">Object-Oriented Design</a> I explained that you should query your classes/objects to ensure the methods they define are actually where they should be (another reason is &#39;feature envy&#39;, if a method is asking another class a lot of questions then it may be an indication the method is on the wrong object).</p>
<p>The Move Method technique ensures this decoupling by simply moving the identified misplaced method onto the correct one.</p>
<p>Once the method has been moved you should clean up the previously passed parameters by seeing what can be moved over to the other object or whether additional data needs to be passed over now via the method invocation. </p>
<p>For example:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Gear</span>
    <span class="kp">attr_reader</span> <span class="ss">:chainring</span><span class="p">,</span> <span class="ss">:cog</span><span class="p">,</span> <span class="ss">:rim</span><span class="p">,</span> <span class="ss">:tire</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">(</span><span class="n">chainring</span><span class="p">,</span> <span class="n">cog</span><span class="p">,</span> <span class="n">rim</span><span class="p">,</span> <span class="n">tire</span><span class="p">)</span>
      <span class="vi">@chainring</span> <span class="o">=</span> <span class="n">chainring</span>
      <span class="vi">@cog</span>       <span class="o">=</span> <span class="n">cog</span>
      <span class="vi">@rim</span>       <span class="o">=</span> <span class="n">rim</span>
      <span class="vi">@tire</span>      <span class="o">=</span> <span class="n">tire</span>

      <span class="c1"># let&#39;s asked the question:</span>
      <span class="c1"># &quot;Please Mr. Gear what is your tire size?&quot;</span>
      <span class="c1"># hmm? notice this doesn&#39;t sound like it quite fits the purpose of a &#39;Gears&#39; class</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">ratio</span>
      <span class="n">chainring</span> <span class="o">/</span> <span class="n">cog</span><span class="o">.</span><span class="n">to_f</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">gear_inches</span>
        <span class="c1"># tire goes around rim twice for diameter</span>
        <span class="n">ratio</span> <span class="o">*</span> <span class="p">(</span><span class="n">rim</span> <span class="o">+</span> <span class="p">(</span><span class="n">tire</span> <span class="o">*</span> <span class="mi">2</span><span class="p">))</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Becomes:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Gear</span>
    <span class="kp">attr_reader</span> <span class="ss">:chainring</span><span class="p">,</span> <span class="ss">:cog</span><span class="p">,</span> <span class="ss">:rim</span><span class="p">,</span> <span class="ss">:tire</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">(</span><span class="n">chainring</span><span class="p">,</span> <span class="n">cog</span><span class="p">,</span> <span class="n">rim</span><span class="p">,</span> <span class="n">tire</span><span class="p">)</span>
      <span class="vi">@chainring</span> <span class="o">=</span> <span class="n">chainring</span>
      <span class="vi">@cog</span>       <span class="o">=</span> <span class="n">cog</span>
      <span class="vi">@rim</span>       <span class="o">=</span> <span class="n">rim</span>
      <span class="vi">@tire</span>      <span class="o">=</span> <span class="n">tire</span><span class="o">.</span><span class="n">size</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">ratio</span>
      <span class="n">chainring</span> <span class="o">/</span> <span class="n">cog</span><span class="o">.</span><span class="n">to_f</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">gear_inches</span>
        <span class="c1"># tire goes around rim twice for diameter</span>
        <span class="n">ratio</span> <span class="o">*</span> <span class="p">(</span><span class="n">rim</span> <span class="o">+</span> <span class="p">(</span><span class="n">tire</span> <span class="o">*</span> <span class="mi">2</span><span class="p">))</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tire</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">size</span>
    <span class="mi">5</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>From the original class/object keep the original method in place while you test and change it so it now delegates to the method on the new object. Then slowly refactor by replacing delegating calls throughout your code base with direct calls to the method via its new host. </p>
<p>Finally, remove the old method altogether and the tests should tell you if you missed a replacement somewhere.</p>
<h3><a name="replace-method-with-method-object" class="anchor" href="#replace-method-with-method-object"><span class="header-link"></span></a>Replace Method With Method Object</h3>
<p>You may run into a problem where you have a long method you want to use <a href="#extract-method">Extract Method</a> on, but the number of temporary local variables are too great to allow you to utilise the <a href="#extract-method">Extract Method</a> technique (because passing around that many variables would be just as messy as the long method itself).</p>
<p>To resolve this issue you could look at different types of smaller refactors (such as <a href="#inline-temp">Inline Temp</a>) but in some cases it would actually be better to first move the contents of the long method into an entirely new object.</p>
<p>So the first thing to do is create a new class named after the long method and add the temp local vars as properties/attributes of the class/object.</p>
<p>Now when you try to implement <a href="#extract-method">Extract Method</a> you don&#39;t have to pass around the temp vars because they are now available throughout the class/object. </p>
<p>Then from within the original class/object you can delegate any calls to the original method on to the object (you&#39;ll still pass on the original arguments to the method within the new object but from there on the method extraction becomes easier).</p>
<p>For example:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
  <span class="k">def</span> <span class="nf">bar</span>
    <span class="nb">puts</span> <span class="s2">&quot;We&#39;re doing some bar stuff&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">baz</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="s1">&#39;something&#39;</span>
      <span class="c1"># do something</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="s1">&#39;else&#39;</span>
      <span class="c1"># do else</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;none&#39;</span>
      <span class="c1"># do none</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Becomes:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
  <span class="k">def</span> <span class="nf">bar</span>
    <span class="nb">puts</span> <span class="s2">&quot;We&#39;re doing some bar stuff&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Baz</span>
  <span class="kp">attr_accessor</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:c</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="n">a</span>
    <span class="vi">@b</span> <span class="o">=</span> <span class="n">b</span>
    <span class="vi">@c</span> <span class="o">=</span> <span class="n">c</span>

    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="s1">&#39;something&#39;</span>
      <span class="c1"># do something</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="s1">&#39;else&#39;</span>
      <span class="c1"># do else</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s1">&#39;none&#39;</span>
      <span class="c1"># do none</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>From here we&#39;re now in a better state to use both the <a href="#extract-method">Extract Method</a> and <a href="/posts/even-more-refactoring-techniques/#replace-conditional-with-polymorphism">Replace Conditional with Polymorphism</a> techniques to refactor the <code>Baz</code> class.</p>
<h3><a name="replace-loop-with-collection-closure-method" class="anchor" href="#replace-loop-with-collection-closure-method"><span class="header-link"></span></a>Replace Loop With Collection Closure Method</h3>
<p>If you write a loop that parses a collection and interacts with the individual elements within the collection then move that interaction out into a separate closure based method (meaning you replace the loop with an Enumerable method). </p>
<p>This refactoring may not be as clear or impressive as other refactoring techniques but the motivation behind it is that you hide the ugly details of the loop behind a nicer iteration method, allowing the developer looking at the code to focus on the business logic instead.</p>
<p><strong>For example</strong>:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">managers</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">employees</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
    <span class="n">managers</span> <span class="o">&lt;&lt;</span> <span class="n">e</span> <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">manager?</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p><strong>Becomes</strong>:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">managers</span> <span class="o">=</span> <span class="n">employees</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">manager?</span> <span class="p">}</span>
</pre></div>
</code></pre>
<p>Ruby has a few of these types of enumerable methods but other languages such as PHP and JavaScript aren&#39;t so lucky. </p>
<p>JavaScript has a couple of accumulators: <code>Array#reduce</code> and <code>Array#reduceRight</code> but they aren&#39;t very useful as closure based collection methods compared to Ruby which has methods such as <code>Enumerable#inject</code>, <code>Enumerable#select</code> (seen in above example) or <code>Enumerable#collect</code>. </p>
<p>Note: in JavaScript you can implement a similar effect with clever use of closures.</p>
<h3><a name="pull-up-method" class="anchor" href="#pull-up-method"><span class="header-link"></span></a>Pull Up Method</h3>
<p>When you have duplicated code across two separate classes then the best refactoring technique to implement is to pull that duplicate code up into a super class so we DRY (Don&#39;t Repeat Yourself) out the code and allow it to be used in multiple places without duplication (meaning changes in future only have to happen in one place).</p>
<p>For example:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Person</span>
  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span>
    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="k">class</span> <span class="nc">MalePerson</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="c1"># This is duplicated in the `FemalePerson` class</span>
  <span class="k">def</span> <span class="nf">full_name</span>
    <span class="n">first_name</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">last_name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">gender</span>
    <span class="s2">&quot;M&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">FemalePerson</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="c1"># This is duplicated in the `MalePerson` class</span>
  <span class="k">def</span> <span class="nf">full_name</span>
    <span class="n">first_name</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">last_name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">gender</span>
    <span class="s2">&quot;F&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Becomes:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Person</span>
  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span>
    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">full_name</span>
    <span class="n">first_name</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">last_name</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">MalePerson</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">def</span> <span class="nf">gender</span>
    <span class="s2">&quot;M&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">FemalePerson</span> <span class="o">&lt;</span> <span class="no">Person</span>
  <span class="k">def</span> <span class="nf">gender</span>
    <span class="s2">&quot;F&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<h3><a name="form-template-method" class="anchor" href="#form-template-method"><span class="header-link"></span></a>Form Template Method</h3>
<p>The technique is reliant on inheritance: a parent class and two sub classes of
that parent. The two sub classes have methods which have similar steps, in the
same order and yet the steps themselves are different.</p>
<p>The technique involves moving the sequence of steps into the parent class and
then using polymorphism to allow the sub classes to handle the differences in
the steps.</p>
<p>Here is a silly example (I’m no good at giving real examples; you may have noticed), here is an
example of our problematic code…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span><span class="p">;</span> <span class="k">end</span>

<span class="k">class</span> <span class="nc">Bar</span> <span class="o">&lt;</span> <span class="no">Foo</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@hey</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="vi">@hai</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">qux</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="vi">@hey</span> <span class="o">+</span> <span class="vi">@hai</span>
    <span class="vi">@b</span> <span class="o">=</span> <span class="vi">@a</span> <span class="o">*</span> <span class="mi">10</span>
    <span class="vi">@a</span> <span class="o">+</span> <span class="vi">@b</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Baz</span> <span class="o">&lt;</span> <span class="no">Foo</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@hey</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="vi">@hai</span> <span class="o">=</span> <span class="mi">7</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">qux</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="vi">@hey</span> <span class="o">+</span> <span class="vi">@hai</span>
    <span class="vi">@b</span> <span class="o">=</span> <span class="vi">@a</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">20</span>
    <span class="vi">@a</span> <span class="o">+</span> <span class="vi">@b</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">bar</span> <span class="o">=</span> <span class="no">Bar</span><span class="o">.</span><span class="n">new</span>
<span class="n">baz</span> <span class="o">=</span> <span class="no">Baz</span><span class="o">.</span><span class="n">new</span>

<span class="nb">puts</span> <span class="n">bar</span><span class="o">.</span><span class="n">qux</span>
<span class="nb">puts</span> <span class="n">baz</span><span class="o">.</span><span class="n">qux</span>
</pre></div>
</code></pre>
<p>…we could try to inject the values each sub class requires but then we still
have a lot of duplication in this code.</p>
<p>We can see the sequence of steps is:</p>
<p>determine what <code>a</code> should be<br>determine what <code>b</code> should be<br>return a specific calculation</p>
<p>…so we can clean up our code a little by abstracting the commonality...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">hey</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">hai</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="vi">@hey</span> <span class="o">=</span> <span class="n">hey</span>
    <span class="vi">@hai</span> <span class="o">=</span> <span class="n">hai</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">qux</span>
    <span class="n">determine_a</span>
    <span class="n">determine_b</span>
    <span class="n">result</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">determine_a</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="vi">@hey</span> <span class="o">+</span> <span class="vi">@hai</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">result</span>
    <span class="vi">@a</span> <span class="o">+</span> <span class="vi">@b</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Bar</span> <span class="o">&lt;</span> <span class="no">Foo</span>
  <span class="kp">protected</span>

  <span class="k">def</span> <span class="nf">determine_b</span>
    <span class="vi">@b</span> <span class="o">=</span> <span class="vi">@a</span> <span class="o">*</span> <span class="mi">10</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Baz</span> <span class="o">&lt;</span> <span class="no">Foo</span>
  <span class="kp">protected</span>

  <span class="k">def</span> <span class="nf">determine_b</span>
    <span class="vi">@b</span> <span class="o">=</span> <span class="vi">@a</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">20</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">bar</span> <span class="o">=</span> <span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">baz</span> <span class="o">=</span> <span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>

<span class="nb">puts</span> <span class="n">bar</span><span class="o">.</span><span class="n">qux</span>
<span class="nb">puts</span> <span class="n">baz</span><span class="o">.</span><span class="n">qux</span>
</pre></div>
</code></pre>
<h3><a name="extract-surrounding-method" class="anchor" href="#extract-surrounding-method"><span class="header-link"></span></a>Extract Surrounding Method</h3>
<p>If you find you have different methods which contain almost identical code but with a slight variant in the middle, then pull up the duplicated code into a single method and pass a code block to the newly created method which it yields to in order to execute the unique behaviour...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">do_something</span>
    <span class="nb">puts</span> <span class="mi">1</span>
    <span class="k">yield</span>
    <span class="nb">puts</span> <span class="mi">3</span>
<span class="k">end</span>

<span class="n">do_something</span> <span class="p">{</span> <span class="nb">puts</span> <span class="mi">2</span> <span class="p">}</span>
</pre></div>
</code></pre>
<p>This is actually a common pattern in Ruby known as the &#39;wrap around&#39; method. This technique is similar to the <a href="#form-template-method">Form Template Method</a>, but is different in that you can use it without forcing an inheritance model on your code.</p>
<p>Note: JavaScript doesn&#39;t have the ability to pass a code block but it can be replicated by passing a function that acts like a callback...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">doSomething</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="nx">callback</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">doSomething</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>...although in the latest versions of Node (as of November 2013) Generators are implemented and would allow JavaScript code to <code>yield</code> similar to how Ruby works.</p>
<h3><a name="self-encapsulate-field" class="anchor" href="#self-encapsulate-field"><span class="header-link"></span></a>Self Encapsulate Field</h3>
<p>When inheriting properties from a parent class/object then it can be more flexible if the parent class only allows access to the properties from within a getter/setter.</p>
<p>The motivation for this technique is that a sub class can override and modify the behaviour of the getter/setter without affecting the parent class&#39; implementation. Which is similar to how the Decorator design pattern works (e.g. modifying the behaviour without affecting the original).</p>
<p>This technique should only be used once you find the coupling between objects is becoming a problem. Otherwise direct access to properties and instance variables should be acceptable initially.</p>
<p>For example:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">total</span>
  <span class="vi">@base_price</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="vi">@tax_rate</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Becomes:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="kp">attr_reader</span> <span class="ss">:base_price</span><span class="p">,</span> <span class="ss">:tax_rate</span>

<span class="k">def</span> <span class="nf">total</span>
  <span class="n">base_price</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">tax_rate</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<h3><a name="introduce-named-parameter" class="anchor" href="#introduce-named-parameter"><span class="header-link"></span></a>Introduce Named Parameter</h3>
<p>When method arguments are unclear then convert them into named parameters so they become clearer (and easier to remember). </p>
<p>Although Ruby supports named parameters...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">turnOnTheTV</span> <span class="p">(</span><span class="ss">channel</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">volume</span><span class="p">:</span> <span class="mi">1</span><span class="p">);</span> <span class="k">end</span>
<span class="n">turnOnTheTV</span><span class="p">(</span><span class="ss">channel</span><span class="p">:</span> <span class="mi">101</span><span class="p">,</span> <span class="ss">volume</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</pre></div>
</code></pre>
<p>...neither PHP or JavaScript do, so for PHP you can pass an associated Array and with JavaScript you can pass an Object/Hash.</p>
<p><strong>For example (JavaScript)</strong>:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">function</span> <span class="n">turnOnTheTV</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">v</span><span class="p">){}</span>
<span class="n">turnOnTheTV</span><span class="p">(</span><span class="mi">101</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</pre></div>
</code></pre>
<p><strong>Becomes</strong>:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">function</span> <span class="n">turnOnTheTV</span> <span class="p">(</span><span class="n">config</span><span class="p">)</span> <span class="p">{</span>
    <span class="sr">//</span> <span class="n">config</span><span class="o">.</span><span class="n">channel</span> <span class="o">===</span> <span class="mi">101</span>
    <span class="o">//</span> <span class="n">config</span><span class="o">.</span><span class="n">volume</span>  <span class="o">===</span> <span class="mi">10</span>
<span class="p">}</span>
<span class="n">turnOnTheTV</span><span class="p">({</span> <span class="ss">channel</span><span class="p">:</span> <span class="mi">101</span><span class="p">,</span> <span class="ss">volume</span><span class="p">:</span> <span class="mi">10</span> <span class="p">});</span>
</pre></div>
</code></pre>
<p>Note: ECMAScript 6.0 (the latest JavaScript specification - which is still being worked on as of Nov 2013) implements named parameters.</p>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>There are still many different refactoring techniques that I&#39;ve not included. But hopefully you&#39;ve found this quick reference useful so far. I&#39;ll continue these on in another post.</p>
]]></description><link>http://www.integralist.co.uk/posts/refactoring-techniques/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/refactoring-techniques/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 10 Nov 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[MVCP: Model, View, Controller, Presenter]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 8mins</em></p>
<ul>
<li>Introduction<ul>
<li>Model</li>
<li>View</li>
<li>Controller</li>
</ul>
</li>
<li>Mixed definitions<ul>
<li>God Controller</li>
<li>Problems</li>
<li>Skinny Controller</li>
</ul>
</li>
<li>Presenters?<ul>
<li>What problem are Presenters trying to solve?</li>
<li>How do they work?</li>
</ul>
</li>
<li>Code Example<ul>
<li>Controller</li>
<li>View</li>
<li>Presenter</li>
</ul>
</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>Model, View, Controller (MVC). This is a pretty standard architectural pattern and has been in use when developing software since the early 1970&#39;s.</p>
<p>The basic principle of the pattern is to separate the different areas of logic from your application into distinct compartments.</p>
<h3><a name="model" class="anchor" href="#model"><span class="header-link"></span></a>Model</h3>
<p>The model holds your business data. Typically this will be data that is pulled in from a database or external data service of some kind.</p>
<h3><a name="view" class="anchor" href="#view"><span class="header-link"></span></a>View</h3>
<p>The view is your user interface. This is what the client will interact with when using your application.</p>
<h3><a name="controller" class="anchor" href="#controller"><span class="header-link"></span></a>Controller</h3>
<p>The controller is the boss. He sits at the top and delegates responsibilities to either the view or the model.</p>
<h2><a name="mixed-definitions" class="anchor" href="#mixed-definitions"><span class="header-link"></span></a>Mixed definitions</h2>
<p>There seems to be a dispute in the dev community regarding how the responsibilities should be divided.</p>
<p>Some feel a &#39;fat controller&#39; principle is best (where by the controller tells the model not only <em>when</em> but <em>where</em> and <em>how</em> it should get its data).</p>
<p>My understanding of the pattern is that it was designed so that the Controller stays &#39;skinny&#39;. It may be the boss, but like most good bosses it doesn&#39;t try and stay in control. It knows the best team member for the job at hand and delegates accordingly.</p>
<p>This is also good code design because the Controller doesn&#39;t have too much <em>context</em> (i.e. it doesn&#39;t know everything, which means it&#39;ll be easier to maintain and scale).</p>
<h3><a name="god-controller" class="anchor" href="#god-controller"><span class="header-link"></span></a>God Controller</h3>
<p>There are a few ways we can implement an MVC pattern, one is known as the &#39;God Controller&#39;. </p>
<p>This is where a single Controller exists and it oversees everything no matter what was requested by the client. </p>
<p>For example, the single Controller would be passed the request from the client (usually handled by a custom routing application, and most frameworks will provide their own).</p>
<p>The Controller would determine what type of request was made (if the request was for a &#39;contact&#39; page then it&#39;ll make a request for the Contact model, or if the request was for the &#39;about&#39; page then it&#39;ll make a request for the About model).</p>
<p>Once it knows the type of request it&#39;ll proceed to get the relevant model data and assign it to some View variables and render the required View.</p>
<h3><a name="problems" class="anchor" href="#problems"><span class="header-link"></span></a>Problems</h3>
<p>Now there are two problems with this implementation:</p>
<ol>
<li>maintainability</li>
<li>scalability</li>
</ol>
<p>As mentioned before, this comes down to bad code design. The &#39;God Controller&#39; knows too much and tries to do too much. Once you start getting above a few different types of requests you&#39;ll start to understand what a mess the code can become by having multiple branches for different routing scenarios.</p>
<p>I work as an engineer for the BBC News team in London and we had suffered from this exact set-up (hence the lessons the team has learnt and improved upon are the reason why I&#39;m able to write this post for you now).</p>
<h3><a name="skinny-controller" class="anchor" href="#skinny-controller"><span class="header-link"></span></a>Skinny Controller</h3>
<p>There is another approach we can take which is known as the &#39;skinny controller&#39; approach.</p>
<p>The way it works is that a request will come into the application and will get passed to a page specific Controller.</p>
<p>The page specific Controller will call the relevant Model and will assign the returned data to a few View variables.</p>
<p>The Controller will then render a View and pass through the variables into the View for it to use.</p>
<p>As you can see, this isn&#39;t that different from the &#39;God Controller&#39; with the exception that the Routing part of the application now will have extra logic which determines which specific Controller should be loaded. This is a better situation to be in because you&#39;re making your code base both more maintainable and scalable.</p>
<p>Note: as I mentioned in the previous section, BBC News had a sort of &#39;God Controller&#39; issue and our first step to resolving the problem was to take a similar approach as described above (i.e. to start creating page specific Controllers). That was a good first step. </p>
<p>The next step from here was to separate out our logic even further by implementing Presenters, and it was our tech lead at BBC News (<a href="http://twitter.com/jcleveley">John Cleveley</a>) who made that decision which resulted in a much more efficient, maintainable and scalable code base.</p>
<h2><a name="presenters" class="anchor" href="#presenters"><span class="header-link"></span></a>Presenters</h2>
<h3><a name="what-problem-are-presenters-trying-to-solve" class="anchor" href="#what-problem-are-presenters-trying-to-solve"><span class="header-link"></span></a>What problem are Presenters trying to solve?</h3>
<p>Let&#39;s imagine we&#39;ve gone for the &#39;Skinny Controller&#39; approach. There are still some inherent issues… </p>
<p>First of all, our Controller can still have too much context and be handling more information than it should. </p>
<p>But also, and more importantly, you may find there is still a lot of duplication of code across your Controllers.</p>
<p>The reasoning for this is that if you consider the structure of a web page/application you&#39;ll notice that it is typically made up of unique &#39;features&#39;. For example, if you&#39;re displaying your tweets on a page then that&#39;s a unique feature.</p>
<p>Each feature must be able to stand on its own. We normally describe these features as being &#39;components&#39;. Each component can be loaded whenever and wherever needed. Having a component based architecture allows your code base to become more modular and reusable.</p>
<p>For example the navigation menu on a page could be considered a &#39;component&#39;. Also, the navigation menu component is likely going to need to appear on every single page of the application.</p>
<p>So, if you&#39;re splitting up your logic into page specific Controllers then it&#39;s possible that you&#39;re still repeating code across the Controllers to handle the loading of re-occurring components such as the navigation (e.g. pulling its data from a navigation Model and setting View variables etc).</p>
<p>Now there are ways that this code repetition can be avoided, and one such way is to use the concept of Presenters.</p>
<h3><a name="how-do-they-work" class="anchor" href="#how-do-they-work"><span class="header-link"></span></a>How do they work?</h3>
<p>Presenters (like everything in software engineering) can be implemented in many different ways. </p>
<p>For example, at BBC News we initially were manually creating new Presenter instances within our page Controllers. But the team here are quite clever chaps (especially <a href="http://twitter.com/kenturamon">Robert Kenny</a> and <a href="http://twitter.com/sthulb">Simon Thulbourn</a>) and they realised that this process could be greatly improved by using configuration files instead (specifically <a href="http://yaml.org/">YAML</a>). As we have multiple teams working on the BBC News code base and in multiple languages, using configuration files is a much easier and maintainable solution.</p>
<p>I&#39;m not going to go into the configuration set-up we use at BBC News. Instead I&#39;ll focus on the basic principles of how Presenters work, which is quite simply a case of moving the logic (getting component specific Model data and assigning it to to component specific variables) into separate files called Presenters which you can instantiate within your controller.</p>
<h2><a name="code-example" class="anchor" href="#code-example"><span class="header-link"></span></a>Code Example</h2>
<h3><a name="controller" class="anchor" href="#controller"><span class="header-link"></span></a>Controller</h3>
<p>Here is a basic example in Ruby…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;app/presenters/a&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;app/presenters/b&#39;</span>

<span class="k">class</span> <span class="nc">AboutController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="no">Presenters</span><span class="o">::</span><span class="n">A</span><span class="o">.</span><span class="n">new</span>
    <span class="vi">@b</span> <span class="o">=</span> <span class="no">Presenters</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span>

    <span class="n">title</span> <span class="s1">&#39;About&#39;</span>
    <span class="n">erb</span> <span class="ss">:about</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…in this example we have an &#39;About&#39; page which is made up of two components <code>a</code> and <code>b</code>. As you can see we <code>require</code> the presenters which handle those two components and within our Controller we instantiate the Presenters.</p>
<p>Notice that&#39;s all we do. Each Presenter encapsulates the logic needed to prepare the data to be passed to the <code>:about</code> view template.</p>
<h3><a name="view" class="anchor" href="#view"><span class="header-link"></span></a>View</h3>
<p>Before I show you the Presenter code itself, I&#39;ll show you the View template file… </p>
<pre><code class="lang-erb"><div class="highlight"><pre><span class="x">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="x">&lt;/h1&gt;</span>

<span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@a</span><span class="o">.</span><span class="n">run</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">partial</span> <span class="ss">:&quot;components/a&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="vi">@a</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="ss">:summary</span> <span class="o">=&gt;</span> <span class="vi">@a</span><span class="o">.</span><span class="n">summary</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="vi">@a</span><span class="o">.</span><span class="n">data</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>

<span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@b</span><span class="o">.</span><span class="n">run</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">partial</span> <span class="ss">:&quot;components/b&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="vi">@b</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="vi">@b</span><span class="o">.</span><span class="n">age</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</pre></div>
</code></pre>
<p>…as you can see we have very minimal logic in place. If anything I have too much logic in the View as I initially was re-using the same View template over and over and so I wanted to protect again errors appearing when loading a template which referenced a component I wasn&#39;t loading, but I&#39;ve since changed how my application was working but left the conditional checks in as an example of how code can evolve over time.</p>
<p> We literally just check to see if the component has been initialised (in this case we created a <code>run</code> property we set to <code>true</code> when the component&#39;s Presenter is first initialised).</p>
<p>We then render the View for the component and pass through the variables that were set-up from within the Presenter.</p>
<p>Now I can also open up my <code>:home</code> View file and add in the <code>a</code> component there as well just as easily. It would be even easier if I didn&#39;t have to manually add the <code>a</code> component to the <code>:home</code> View file but that&#39;s where running from configuration files like we do at BBC News would come in handy (but that would have been too complicated an implementation for the sake of such a basic example as required for this post).</p>
<h3><a name="presenter" class="anchor" href="#presenter"><span class="header-link"></span></a>Presenter</h3>
<p>Now let&#39;s take a look at one of our Presenters, in this case the Presenter for our <code>b</code> component… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;app/presenters/base&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;app/models/b&#39;</span>

<span class="k">class</span> <span class="nc">Presenters</span><span class="o">::</span><span class="n">B</span> <span class="o">&lt;</span> <span class="no">Presenters</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">attr_reader</span> <span class="ss">:run</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@run</span> <span class="o">=</span> <span class="kp">true</span>

    <span class="n">model</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Mark&#39;</span><span class="p">,</span> <span class="s1">&#39;99&#39;</span><span class="p">)</span>
    <span class="n">prepare_view_data</span><span class="p">({</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">.</span><span class="n">age</span> <span class="p">})</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…as you can see we load a specific Model for this component and then generate our View data by passing the Model information through to a <code>prepare_view_data</code> method (see below for the implementation details).</p>
<p>The <code>Base</code> Presenter which our component Presenters inherit from is very straight forward as you can see from the following example… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">module</span> <span class="nn">Presenters</span>
  <span class="k">class</span> <span class="nc">Base</span>
    <span class="kp">attr_accessor</span> <span class="ss">:model</span>

    <span class="k">def</span> <span class="nf">prepare_view_data</span> <span class="nb">hash</span>
      <span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…it&#39;s just a module namespace with a base class that has a single method <code>prepare_view_data</code> which dynamically generates instance variables based on the data we passed through from the inheriting Presenter class and which then are usable within the View.</p>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>That&#39;s all there is to it as far as understanding the Presenter pattern. It&#39;s a nice clean solution for componentising your different page features and keeping your code more easily maintainable.</p>
<p>I&#39;ve created a repo on GitHub called <a href="https://github.com/Integralist/MVCP">MVCP</a> which is written in <a href="https://www.ruby-lang.org/">Ruby</a> and uses the <a href="http://www.sinatrarb.com/">Sinatra</a> web framework. Note: I had some help from my colleague <a href="http://twitter.com/sthulb">Simon</a> in cleaning up and refactoring some of the code (it may only have been minor changes but as with all good refactorings it made a massive difference to the quality of the code, so thanks to him for helping out).</p>
<p>If you have any questions then feel free to contact me either here on <a href="http://twitter.com/integralist">twitter</a> and let me know your thoughts.</p>
]]></description><link>http://www.integralist.co.uk/posts/mvcp-model-view-controller-presenter/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/mvcp-model-view-controller-presenter/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Tue, 22 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[SQLite and ActiveRecord]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 14mins</em></p>
<ul>
<li>Introduction</li>
<li>SQLite</li>
<li>ActiveRecord</li>
<li>Installation</li>
<li>Set-up</li>
<li>Schema</li>
<li>Creating<ul>
<li>Association</li>
<li>Record Creation</li>
</ul>
</li>
<li>Querying</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>This was intended to be a quick post about how to use the embedded relational database &quot;<a href="http://www.sqlite.org/">SQLite</a>&quot; with a Ruby/Sinatra application but will also include information on incorporating the ActiveRecord pattern as well.</p>
<p>We&#39;ll look at installing and setting up SQLite and incorporating the ActiveRecord pattern using the open-source library of the same name (which is included as part of the <a href="http://rubyonrails.org/">Ruby on Rails Framework</a>).</p>
<h2><a name="sqlite" class="anchor" href="#sqlite"><span class="header-link"></span></a>SQLite</h2>
<p>Typically if you&#39;re developing an application in Ruby using the <a href="http://rubyonrails.org/">Ruby on Rails framework</a> then you&#39;ll use SQLite in development and then switch over to another database for production (maybe <a href="http://www.mysql.com/">MySQL</a> or <a href="http://www.postgresql.org/">PostgreSQL</a>). </p>
<p>What most people don&#39;t realise is that if you have a low traffic website then SQLite is fine to use. </p>
<p>The only thing to be aware of when using SQLite in production is that it inherently isn&#39;t designed to scale. To help clarify, the author of SQLite had this to say on the subject… </p>
<blockquote>
<p>SQLite usually will work great as the database engine for low to medium traffic websites. The amount of web traffic that SQLite can handle depends, of course, on how heavily the website uses its database. Generally speaking, any site that gets fewer than 100K hits/day should work fine with SQLite. The 100K hits/day figure is a conservative estimate, not a hard upper bound. SQLite has been demonstrated to work with 10 times that amount of traffic.</p>
<p>SQLite will normally work fine as the database backend to a website. But if your website is so busy that you are thinking of splitting the database component off onto a separate machine, then you should definitely consider using an enterprise-class client/server database engine instead of SQLite.</p>
</blockquote>
<h2><a name="activerecord" class="anchor" href="#activerecord"><span class="header-link"></span></a>ActiveRecord</h2>
<p>So most Ruby developers will know of <a href="http://guides.rubyonrails.org/active_record_querying.html">ActiveRecord</a> but may not realise that it&#39;s actually an architectural pattern and the term was originally coined by <a href="http://martinfowler.com/">Martin Fowler</a> (a legend in the field of software engineering and data modeling).</p>
<p>The pattern describes how to provide an Interface that lets the user interact with a relational database in a more user friendly fashion rather than constructing their own SQL queries.</p>
<p>We&#39;ll be using Ruby on Rails&#39; implementation of the pattern which they&#39;ve extracted into an external library/module (so it&#39;s not specifically reliant on the Ruby on Rails framework if you&#39;re using something more lightweight like Sinatra).</p>
<h2><a name="installation" class="anchor" href="#installation"><span class="header-link"></span></a>Installation</h2>
<p>There are a couple of things we need to do:</p>
<ol>
<li>Install the SQLite libraries</li>
<li>Install the SQLite Ruby module</li>
<li>Install the ActiveRecord Ruby module</li>
</ol>
<p>So if you have <a href="http://brew.sh/">Homebrew</a> installed then you can simply run <code>brew install sqlite</code>.</p>
<p>Note: you may need to run <code>brew --force link</code> afterwards, as a much older version of SQLite is already installed on the Mac OS and so the OS will attempt to load that first.</p>
<p>To install the ruby module just run <code>gem install sqlite3</code></p>
<p>To install the ActiveRecord ruby module just run <code>gem install activerecord</code></p>
<h2><a name="command-line-tool" class="anchor" href="#command-line-tool"><span class="header-link"></span></a>Command Line Tool</h2>
<p>Once the SQLite libraries are installed you will have access to a command line tool that lets you directly inspect the contents of a SQLite database file.</p>
<p>For example, if you have a database file called <code>test.db</code> then you can run <code>sqlite3 test.db</code> to open the database.</p>
<p>You can then run SQL commands against the database such as <code>select * from tableName;</code> (notice the semicolon at the end <code>;</code> you&#39;ll need this otherwise the command won&#39;t know when it is considered completed, the plus side is that you can write complex SQL queries across multiple lines).</p>
<h2><a name="set-up" class="anchor" href="#set-up"><span class="header-link"></span></a>Set-up</h2>
<p>Imagine we have a single file <code>sqlite-example.rb</code> with the following content… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;database.log&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">))</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span>
  <span class="ss">:adapter</span>  <span class="o">=&gt;</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span>
  <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s1">&#39;example.db&#39;</span>
<span class="p">)</span>
</pre></div>
</code></pre>
<p>…so let&#39;s analyse what this script is doing.</p>
<p>First thing we&#39;re doing is loading the SQLite module.</p>
<p>Second, ActiveRecord allows us to specify a recipient for any log information. In this instance we store any log information into a file called <code>database.log</code>. We could also send the log information directly to the terminal screen using <code>Logger.new(STDERR)</code> instead.</p>
<p>Thirdly, we actually connect to the SQLite database. ActiveRecord has adapters for multiple databases and so here we specify we&#39;re using SQLite and that we want to connect to the <code>example.db</code> database. We could store data all in memory if we wanted (e.g. it wouldn&#39;t persist after the application has finished running), we do this by changing to…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s1">&#39;:memory:&#39;</span>
</pre></div>
</code></pre>
<h2><a name="schema" class="anchor" href="#schema"><span class="header-link"></span></a>Schema</h2>
<p>As you should probably already know, we need to define a Schema for our database. Because although we&#39;re using an ActiveRecord interface we&#39;re still interacting with a relational database underneath that layer.</p>
<p>A Schema helps dictate in code what the structure of the database should be and what the different columns/rows and data types should be used.</p>
<p>To do this we&#39;ll add… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
  <span class="k">unless</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tables</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;albums&#39;</span>
    <span class="n">create_table</span> <span class="ss">:albums</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span>     <span class="ss">:string</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:performer</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">unless</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tables</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;tracks&#39;</span>
    <span class="n">create_table</span> <span class="ss">:tracks</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:album_id</span><span class="p">,</span>     <span class="ss">:integer</span> <span class="c1"># foreign key &lt;table-name-singular&gt;_id (i.e. this is the primary key from the &#39;albums&#39; table)</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:track_number</span><span class="p">,</span> <span class="ss">:integer</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span>        <span class="ss">:string</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…as you might be able to tell, we&#39;re doing a couple of things.</p>
<p>First we&#39;re defining a new Schema.</p>
<p>Second, we&#39;re creating two tables: <code>albums</code> and <code>tracks</code> (we wrap the creation of the tables in a condition so we make sure we don&#39;t cause any errors by trying to create a table that already exists). Also, the convention is to name the tables as plurals (notice we don&#39;t call it <code>album</code> or <code>track</code> as they&#39;ll be holding multiples of that data).</p>
<p>Thirdly, inside of the table creation we&#39;re specifying specific columns and what their data types should be.</p>
<p>When we create a table a &quot;<a href="http://en.wikipedia.org/wiki/Primary_key">primary key</a>&quot; is automatically created for us and is named after the table. So in this instance we have two primary keys created for us: <code>albums_id</code> and <code>tracks_id</code> (notice the naming convention of <code>tableName_id</code> - singular, not plural).</p>
<p>Inside the <code>tracks</code> table you&#39;ll see the first column we create is actually a &quot;<a href="http://en.wikipedia.org/wiki/Foreign_key">foreign key</a>&quot; because we&#39;re creating a column which is named after the <code>albums</code> table&#39;s primary key (<code>album_id</code>).</p>
<h2><a name="creating" class="anchor" href="#creating"><span class="header-link"></span></a>Creating</h2>
<p>The ActiveRecord pattern is based on conventions, so in this instance we&#39;ll create two new classes that inherit from ActiveRecord&#39;s base class and we&#39;ll use these two classes for creating new records for each table… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tracks</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Track</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:album</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;In Utero&#39;</span><span class="p">)</span>
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
    <span class="ss">:title</span>     <span class="o">=&gt;</span> <span class="s1">&#39;In Utero&#39;</span><span class="p">,</span>
    <span class="ss">:performer</span> <span class="o">=&gt;</span> <span class="s1">&#39;Nirvana&#39;</span>
  <span class="p">)</span>

  <span class="n">track_listing</span> <span class="o">=</span> <span class="o">[</span>
    <span class="kp">nil</span><span class="p">,</span>
    <span class="s1">&#39;Serve the Servants&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Scentless Apprentice&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Heart-Shaped Box&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Rape Me&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Frances Farmer&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Dumb&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Very Ape&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Milk It&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Pennyroyal Tea&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Radio Friendly Unit Shifter&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Tourettes&#39;</span><span class="p">,</span>
    <span class="s1">&#39;All Apologies&#39;</span>
  <span class="o">]</span>

  <span class="n">track_listing</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="n">index</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">===</span> <span class="mi">0</span> <span class="c1"># skip zero index</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">)</span>
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
    <span class="ss">:title</span>     <span class="o">=&gt;</span> <span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">,</span>
    <span class="ss">:performer</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tool&#39;</span>
  <span class="p">)</span>

  <span class="n">track_listing</span> <span class="o">=</span> <span class="o">[</span>
    <span class="kp">nil</span><span class="p">,</span>
    <span class="s1">&#39;The Grudge&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Eon Blue Apocalypse&#39;</span><span class="p">,</span>
    <span class="s1">&#39;The Patient&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Mantra&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Schism&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Parabol&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Parabola&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Ticks &amp; Leeches&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Lateralus&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Disposition&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Reflection&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Triad&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Faaip de Oiad&#39;</span>
  <span class="o">]</span>

  <span class="n">track_listing</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="n">index</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">===</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…OK, so there are a couple of things worth noting here:</p>
<p>When we inherit from <code>ActiveRecord::Base</code> our class is mapped to a table of the same name. So for example our class <code>Album</code> is mapped to the <code>albums</code> table.</p>
<p>Also, as we&#39;re inheriting from the ActiveRecord Base class, we don&#39;t need to specify attributes (for example, inside our Tracks class) such as <code>:title</code> or <code>:track_number</code> within our class, as they will be indirectly inferred from the Schema we defined earlier and will come from that table which the class is mapped to.</p>
<h3><a name="association" class="anchor" href="#association"><span class="header-link"></span></a>Association</h3>
<p>You&#39;ll notice within the <code>Album</code> class we call a <code>has_many</code> method (provided through the inheritance chain via <code>ActiveRecord::Base</code>) which sets up the association between &#39;albums&#39; and &#39;tracks&#39;.</p>
<p>Similarly, within the <code>Track</code> class we call <code>belongs_to</code> and tell it that our tracks belong to the &#39;albums&#39; table. We should only do this when the class/table holds the foreign key for the table we&#39;re saying it belongs to. In this case our &#39;Track&#39; class holds the foreign key that points to the &#39;albums&#39; table.</p>
<h3><a name="record-creation" class="anchor" href="#record-creation"><span class="header-link"></span></a>Record Creation</h3>
<p>Finally we actually create some records to insert into each table.</p>
<p>We call a <code>create</code> method like so…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</pre></div>
</code></pre>
<p>…which is equivalent to… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">);</span>
<span class="n">album</span><span class="o">.</span><span class="n">save</span>
</pre></div>
</code></pre>
<p>…so it saves us a little extra typing (which is nice).</p>
<p>You&#39;ll also notice that when we create a new <code>Album</code> instance we can access and create new <code>Tracks</code> as well (via the <code>album</code> instance: <code>album.tracks.create(…)</code>). This is because we&#39;ve made an association within the top level classes between Albums and Tracks.</p>
<p>In my example I&#39;m trying to be a bit smarter by not repeating the same chunk of code over and over. So rather than doing… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span>
<span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>
<span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>
<span class="c1">#…rinse repeat…</span>
</pre></div>
</code></pre>
<p>…instead, I create the track listing as an <code>Array</code> and then loop the Array creating new records. </p>
<p>The only additional logic I need is to avoid including the <code>[0]</code> item in the Array which I do using <code>album.tracks.create(…) unless index === 0</code>. </p>
<p>The reason I avoid it is simply because track listings on albums always start at <code>1</code> where as our Array is zero-indexed.</p>
<h2><a name="querying" class="anchor" href="#querying"><span class="header-link"></span></a>Querying</h2>
<p>Now in my example code you&#39;ll find me wrapping certain chunks in <code>begin/rescue</code> as my example isn&#39;t made to work when accessed multiple times (<em>it&#39;s just a silly example to demonstrate how to connect, populate and query data using ActiveRecords</em>). So don&#39;t worry about those aspects and instead just focus on the APIs I&#39;m using. Specifically…</p>
<h3><a name="find" class="anchor" href="#find"><span class="header-link"></span></a><code>find</code></h3>
<p>This allows you to find a record by ID. So <code>Album.find(1)</code> would return the first album in the table. <code>Album.find(1).tracks.length</code> would then tell you the number of tracks that particular album held.</p>
<h3><a name="find-by" class="anchor" href="#find-by"><span class="header-link"></span></a><code>find_by</code></h3>
<p>This is actually a very intelligent method. It is based on conventions again, so <code>find_by_title</code> maps to a standard <code>find_by</code> method but passes through <code>title</code> as the attribute we&#39;re interested in searching within: <code>Album.find_by_title(&#39;La-te-ra-lus&#39;)</code></p>
<h3><a name="all" class="anchor" href="#all"><span class="header-link"></span></a><code>all</code></h3>
<p>This is an alias for <code>find(:all)</code>. So <code>Album.all</code> would return all records found within the &#39;Album` table.</p>
<h3><a name="where" class="anchor" href="#where"><span class="header-link"></span></a><code>where</code></h3>
<p>This is a conditional that maps to SQL&#39;s <code>where</code> clause. So <code>Track.where(title: &#39;Triad&#39;)</code> would return the record(s) within the Track database whose <code>title</code> attribute contained the value <code>Triad</code>. You can do more complicated filters such as: <code>Table.where(user_name: user_name, password: password).first</code> which safely sanitises your input and checks two different attributes and then returns the first record found (in case there are multiples).</p>
<h3><a name="first" class="anchor" href="#first"><span class="header-link"></span></a><code>first</code></h3>
<p>We&#39;ve seen this used already and works in a similar way to how Ruby&#39;s <code>first</code> property works (it returns the first item found).</p>
<h3><a name="last" class="anchor" href="#last"><span class="header-link"></span></a><code>last</code></h3>
<p>Same as <code>first</code> but returns the last item found.</p>
<h3><a name="delete" class="anchor" href="#delete"><span class="header-link"></span></a><code>delete</code></h3>
<p>Once you&#39;ve found a record then you can delete it using this method. So <code>Album.first.delete</code> would find the first record in the <code>Album</code> table and then delete that record.</p>
<h3><a name="save" class="anchor" href="#save"><span class="header-link"></span></a><code>save</code></h3>
<p>You can modify records by first locating them and simply assigning a new value to them, but you would then use the <code>save</code> method to store that update back to the database: <code>track = Track.where(title: &#39;yolo&#39;).first.title = &#39;Blah&#39;; track.save</code></p>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>So we&#39;ve not delved too deeply (as there is far too much to cover in one post) but hopefully this has been a good starting point for you.</p>
<p>The complete code I was using looks like this… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;database.log&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">))</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span>
  <span class="ss">:adapter</span>  <span class="o">=&gt;</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span>
  <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s1">&#39;example.db&#39;</span>
<span class="p">)</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
  <span class="k">unless</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tables</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;albums&#39;</span>
    <span class="n">create_table</span> <span class="ss">:albums</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span>     <span class="ss">:string</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:performer</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">unless</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tables</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;tracks&#39;</span>
    <span class="n">create_table</span> <span class="ss">:tracks</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:album_id</span><span class="p">,</span>     <span class="ss">:integer</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:track_number</span><span class="p">,</span> <span class="ss">:integer</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span>        <span class="ss">:string</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tracks</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Track</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:album</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;In Utero&#39;</span><span class="p">)</span>
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
    <span class="ss">:title</span>     <span class="o">=&gt;</span> <span class="s1">&#39;In Utero&#39;</span><span class="p">,</span>
    <span class="ss">:performer</span> <span class="o">=&gt;</span> <span class="s1">&#39;Nirvana&#39;</span>
  <span class="p">)</span>

  <span class="n">track_listing</span> <span class="o">=</span> <span class="o">[</span>
    <span class="kp">nil</span><span class="p">,</span>
    <span class="s1">&#39;Serve the Servants&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Scentless Apprentice&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Heart-Shaped Box&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Rape Me&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Frances Farmer&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Dumb&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Very Ape&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Milk It&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Pennyroyal Tea&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Radio Friendly Unit Shifter&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Tourettes&#39;</span><span class="p">,</span>
    <span class="s1">&#39;All Apologies&#39;</span>
  <span class="o">]</span>

  <span class="n">track_listing</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="n">index</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">===</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">)</span>
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
    <span class="ss">:title</span>     <span class="o">=&gt;</span> <span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">,</span>
    <span class="ss">:performer</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tool&#39;</span>
  <span class="p">)</span>

  <span class="n">track_listing</span> <span class="o">=</span> <span class="o">[</span>
    <span class="kp">nil</span><span class="p">,</span>
    <span class="s1">&#39;The Grudge&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Eon Blue Apocalypse&#39;</span><span class="p">,</span>
    <span class="s1">&#39;The Patient&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Mantra&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Schism&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Parabol&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Parabola&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Ticks &amp; Leeches&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Lateralus&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Disposition&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Reflection&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Triad&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Faaip de Oiad&#39;</span>
  <span class="o">]</span>

  <span class="n">track_listing</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="n">index</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">===</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">begin</span>
  <span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">length</span> <span class="c1"># 13 (on first run of this script it&#39;s fine, but next run we&#39;ve deleted the record)</span>
<span class="k">rescue</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span>
  <span class="nb">p</span> <span class="s1">&#39;We just rescued a &quot;RecordNotFound&quot; error&#39;</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">length</span> <span class="c1"># 14</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">title</span> <span class="c1"># &quot;La-te-ra-lus&quot;</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;Very Ape&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">album_id</span> <span class="c1"># 1</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">all</span> <span class="c1"># ActiveRecord::Relation =&gt; complete set of database records</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">length</span> <span class="c1"># 2</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">all</span> <span class="c1"># ActiveRecord::Relation =&gt; complete set of database records</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Triad&#39;</span><span class="p">)</span> <span class="c1"># ActiveRecord::Relation =&gt; single record</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">track_number</span><span class="p">:</span> <span class="mi">6</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span><span class="p">)</span> <span class="c1"># returns tracks 6 to 8 from all albums</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">first</span> <span class="c1"># returns first record (calling `Album.find(:first|:last) is deprecated`)</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">last</span> <span class="c1"># returns last record</span>

<span class="k">if</span> <span class="no">Album</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span>
  <span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">delete</span> <span class="c1"># delete the first record</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">all</span> <span class="c1"># now we&#39;ll see there is only one record remaining</span>

<span class="n">track_to_be_modified</span> <span class="o">=</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;The Grudge&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
<span class="n">track_to_be_modified</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Grudgeola&#39;</span>
<span class="n">track_to_be_modified</span><span class="o">.</span><span class="n">save</span>
<span class="nb">p</span> <span class="n">track_to_be_modified</span> <span class="c1"># displays modified record</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;The Grudge&#39;</span><span class="p">)</span> <span class="c1"># empty Array (not found as we&#39;ve overridden the original record)</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Grudgeola&#39;</span><span class="p">)</span> <span class="c1"># displays Array of records found (only one, the modified record)</span>
</pre></div>
</code></pre>
<p>But remember this was just a quick introduction to the concepts of the ActiveRecord pattern (and using it with a SQLite database). There are <em>many</em> different querying methods available via ActiveRecord so do get stuck into the API documentation to see what other goodies are at your disposal. </p>
<p>If you don&#39;t use/like Ruby then as I said previously: there are many different adaptations of the ActiveRecord pattern so look out for implementations in your language of choice.</p>
]]></description><link>http://www.integralist.co.uk/posts/sqlite-and-activerecord/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/sqlite-and-activerecord/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Fri, 11 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Unix Commands]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 15mins</em></p>
<ul>
<li>Introduction</li>
<li>Basics<ul>
<li>What directory am I currently in?</li>
<li>How can I see what&#39;s in this directory?</li>
<li>Moving around</li>
<li>Display content of a file</li>
<li>Copy a file</li>
<li>Move a file</li>
<li>Rename a file</li>
<li>Delete a file</li>
<li>Delete a directory</li>
<li>Create a directory</li>
</ul>
</li>
<li>Grep (Searching for patterns)</li>
<li>Sed (Find and Replace)</li>
<li>Awk (Looping Logic)</li>
<li>Piping I/O<ul>
<li>Input and Output</li>
<li>Redirection</li>
<li>Piping</li>
<li>Piping examples</li>
</ul>
</li>
<li>Miscellaneous Commands<ul>
<li>tee</li>
<li>dig</li>
<li>ps</li>
<li>xargs</li>
<li>cut</li>
</ul>
</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>The unix command line has a hundred or so commands, and a small majority of those you can realistically find yourself using on a regular basis. In this post I want to cover some common commands that can actually be quite useful to you.</p>
<p>Shell commands aren&#39;t something you can cover in one post. Entire books have been written on the subject. So don&#39;t expect anything other than the bare bone basics here, which should hopefully give you enough of an understanding to take your own learning forward.</p>
<p>So let&#39;s begin… </p>
<h2><a name="basics" class="anchor" href="#basics"><span class="header-link"></span></a>Basics</h2>
<p>OK, so I&#39;ll assume you have absolutely no prior command line experience which means we need to start at the basics.</p>
<p>So, first things first: open up your shell (if you&#39;re on a Mac then this will be your <code>Terminal.app</code> application.</p>
<h3><a name="what-directory-am-i-currently-in" class="anchor" href="#what-directory-am-i-currently-in"><span class="header-link"></span></a>What directory am I currently in?</h3>
<p><code>pwd</code> - this stands for &quot;Print Working Directory&quot;</p>
<h3><a name="how-can-i-see-whats-in-this-directory" class="anchor" href="#how-can-i-see-whats-in-this-directory"><span class="header-link"></span></a>How can I see what&#39;s in this directory?</h3>
<p><code>ls</code> - this tells the shell to list out any files or folders in the current working directory.</p>
<p>You can also tell the command a directory path you want it to look inside of: <code>ls ~/Desktop</code> (this will list all files and folders on your desktop).</p>
<p><code>ls -l</code> - the <code>-l</code> flag tells the command to stack the list when it prints its output to the shell.</p>
<p><code>ls -la</code> - this is a combination of the previous flag and the <code>-a</code> flag which means &quot;show all files&quot; (by this I mean, it&#39;ll show you hidden files).</p>
<h3><a name="moving-around" class="anchor" href="#moving-around"><span class="header-link"></span></a>Moving around</h3>
<p>To move around your file system you use the &#39;change directory&#39; command <code>cd</code>.</p>
<p>So: <code>cd ~/Desktop</code> will put you in the Desktop.</p>
<p>You can also use relative paths such as <code>cd ../</code> which will take you up one level from wherever you happen to be.</p>
<h3><a name="displaying-content-of-a-file" class="anchor" href="#displaying-content-of-a-file"><span class="header-link"></span></a>Displaying content of a file</h3>
<p>The <code>cat</code> command is a concatenation command, meaning that if you ran <code>cat original.txt new.txt</code> it would display on your screen the combination of the content from both files specified.</p>
<p>So, with that understanding we can use <code>cat original.txt</code> (i.e. specifying just a single file) to show the contents of that file.</p>
<h3><a name="lets-copy-a-file" class="anchor" href="#lets-copy-a-file"><span class="header-link"></span></a>Let&#39;s copy a file</h3>
<p>To copy a file we need the <code>cp</code> command, and we tell it what file to copy and where to copy it to.</p>
<p>So: <code>cp ~/Downloads/test.txt ~/Desktop/test.txt</code> will copy the file <code>test.txt</code> (which is inside our &#39;Downloads&#39; folder) and put the copy on our Desktop.</p>
<h3><a name="lets-move-a-file" class="anchor" href="#lets-move-a-file"><span class="header-link"></span></a>Let&#39;s move a file</h3>
<p>To move a file you need the <code>mv</code> command, and we tell it what file to move and where to move it to.</p>
<p>So: <code>mv ~/Downloads/test.txt ~/Desktop/test.txt</code> will move the file <code>test.txt</code> from our &#39;Downloads&#39; folder onto our &#39;Desktop&#39;.</p>
<h3><a name="lets-rename-a-file" class="anchor" href="#lets-rename-a-file"><span class="header-link"></span></a>Let&#39;s rename a file</h3>
<p>There is no <code>rename</code> command on Unix (although there is in Linux) and so we need to use a trick, the trick being to use the <code>mv</code> command.</p>
<p>So: <code>mv ~/Downloads/test.txt ~/Downloads/new.txt</code> will actually rename the file <code>test.txt</code> to <code>new.txt</code> as we&#39;ve moved the file into the same directory it was already in but with a different name (effectively acting like we renamed it)</p>
<h3><a name="lets-delete-a-file" class="anchor" href="#lets-delete-a-file"><span class="header-link"></span></a>Let&#39;s delete a file</h3>
<p>To delete a file we need the &#39;remove&#39; command <code>rm</code>.</p>
<p>So: <code>rm ~/Downloads/test.txt</code> will delete our <code>test.txt</code> file.</p>
<h3><a name="lets-delete-a-directory" class="anchor" href="#lets-delete-a-directory"><span class="header-link"></span></a>Let&#39;s delete a directory</h3>
<p>To delete a folder we need the &#39;remove&#39; command <code>rm</code> again but this time we need to pass in a couple of flags to the command.</p>
<p>The first flag is <code>-f</code> which means &#39;force&#39; the removal (otherwise if you try to remove a folder then the shell will try and prevent this as it&#39;ll assume you&#39;ve made a mistake, and deleting a whole folder could be a big mistake if you&#39;re not careful).</p>
<p>The second flag is <code>-r</code> which means &#39;recursively&#39;. So you&#39;ll recursively delete files within the folder.</p>
<p>So: <code>rm -rf ~/Desktop/some-folder</code> will delete our <code>some-folder</code> folder on the Desktop.</p>
<h3><a name="lets-create-a-directory" class="anchor" href="#lets-create-a-directory"><span class="header-link"></span></a>Let&#39;s create a directory</h3>
<p>To create a directory you can use the make directory command <code>mkdir my_folder_name</code></p>
<p>To make creating lots of sub directories easier you can pass a <code>-p</code> flag like so <code>mkdir -p Assets/{Scripts,Styles}</code> (notice we use interpolation <code>{}</code> which lets use specify multiple folder names in the current directory level).</p>
<h2><a name="grep-searching-for-patterns" class="anchor" href="#grep-searching-for-patterns"><span class="header-link"></span></a>Grep (Searching for patterns)</h2>
<p>Grep is a command that lets you find a pattern (either a string or a regular expression) inside of a file or list of files.</p>
<p>So: <code>grep &#39;something&#39; test.txt</code> looks for the word &#39;something&#39; inside of the file <code>test.txt</code>.</p>
<p>To use grep on a directory of files then we need to use an additional flag: <code>-r</code> which means &#39;recursive&#39; (similar to the <code>rm</code> command we saw previously).</p>
<p>So: <code>grep -r &#39;something&#39; ~/Desktop</code> looks for the word &#39;something&#39; inside of any files on the Desktop.</p>
<h2><a name="sed-find-and-replace" class="anchor" href="#sed-find-and-replace"><span class="header-link"></span></a>Sed (Find and Replace)</h2>
<p>The <code>sed</code> command stands for (S)tream (Ed)itor and allows you to  read in the contents of a file and then write the modified output to another file or pipe it through to another I/O command (we&#39;ll cover piping later).</p>
<p>A basic example of its use would be: <code>sed s/day/night/ novel.txt</code></p>
<p>This replaces the first occurrence of &#39;day&#39; to &#39;night&#39;. If we wanted to replace multiple occurrences then you would need to pass a <code>g</code> flag (meaning global) to the regular expression like so: <code>sed s/day/night/g novel.txt</code></p>
<h2><a name="awk-looping-logic" class="anchor" href="#awk-looping-logic"><span class="header-link"></span></a>Awk (Looping Logic)</h2>
<p>The <code>awk</code> command reads in each line of a file and splits the line into fields (using whitespace - space, tab - as its default delimiter).</p>
<p>You can then execute commands for each line and reference each field.</p>
<p>A basic example of its use would be: <code>awk &#39;{ print $1 }&#39;</code> which means &quot;print the first field found in the current line&quot;.</p>
<p>So imagine you have the following <code>test.txt</code> file…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>This is my first line
This is my second line
This is my third line
</pre></div>
</code></pre>
<p>…you could print the line number followed by a specific word (in this case the second from last word on each line) using the following awk command: <code>awk &#39;{ print &quot;Line &quot; NR &quot;: &quot; $(NF-1) }&#39; test.txt</code></p>
<p>Which would display the following content on your screen… </p>
<pre><code class="lang-sh"><div class="highlight"><pre>Line 1: first
Line 2: second
Line 3: third
</pre></div>
</code></pre>
<p>Let&#39;s break this command down a little…</p>
<ul>
<li>Awk commands are placed inside of single quotes <code>awk &#39;commands go here&#39;</code>.</li>
<li>Inside the single quotes we need a set of brackets to place our specific code we want to run: <code>awk &#39;{ code to run here }&#39;</code></li>
<li>We specifically tell awk to <code>print</code> something to stdout (i.e. the terminal screen).</li>
<li>In this case we tell it to print the text &quot;Line &quot; followed by the current line number <code>NR</code>.</li>
<li>As part of the same print command we then tell it to print &quot;: &quot; followed by the second from last number.</li>
<li>To do that we use two pieces of syntax <code>$()</code> and <code>NF</code>.</li>
<li><code>NF</code> stands for (N)umber of (F)ields.</li>
<li>The <code>$()</code> wrapping around <code>NF</code> is our &#39;process substitution&#39;. This means we&#39;re not just outputting some data but manipulating it by using logic to give us 1 field back from the last, hence it needs to be wrapped in <code>$()</code></li>
</ul>
<h2><a name="piping-io" class="anchor" href="#piping-io"><span class="header-link"></span></a>Piping I/O</h2>
<p>The previous commands <code>awk</code>, <code>sed</code>, <code>grep</code> are all really useful, but it&#39;s when you can combine them that their true power shines.</p>
<h3><a name="input-and-output" class="anchor" href="#input-and-output"><span class="header-link"></span></a>Input and Output</h3>
<p>Unix is based on the principle of &quot;input&quot; and &quot;output&quot; (known as &quot;I/O&quot;). In the Shell you have <code>stdin</code> (standard input) and <code>stdout</code> (standard output).</p>
<p>By default, <code>stdin</code> is your keyboard (i.e. whatever you type into the terminal shell) and <code>stdout</code> is the terminal (i.e. your screen).</p>
<h3><a name="redirection" class="anchor" href="#redirection"><span class="header-link"></span></a>Redirection</h3>
<p>Once you understand <code>stdin</code> and <code>stdout</code> you can start to look at redirecting them.</p>
<p>For example when using the <code>sed</code> command you could use redirection to not overwrite your original file and instead direct the output <code>stdout</code> coming from the <code>sed</code> command to another file: <code>sed s/day/night/g original.txt &gt; new.txt</code></p>
<h3><a name="piping" class="anchor" href="#piping"><span class="header-link"></span></a>Piping</h3>
<p>Another way to <em>direct</em> input and output is to use pipes <code>|</code> (a vertical bar).</p>
<p>A really simple example would be: look at the <code>sed</code> command we used earlier (<code>sed s/day/night/ novel.txt</code>). Rather than actually execute it and have it make the specified change to our file <code>novel.txt</code> we could instead test the command to make sure it does what we expect it to.</p>
<p>To do that we would use the <code>cat</code> command (which we looked at previously) and pipe its output through to the <code>sed</code> command like so… </p>
<p><code>cat original.txt | sed s/day/night/g</code></p>
<p>So, to clarify how this works: we&#39;re redirecting the <code>cat</code> command&#39;s <code>stdout</code> through to the <code>sed</code> command&#39;s <code>stdin</code>. </p>
<p>In our original <code>sed</code> example we directed the <code>sed</code> command&#39;s <code>stdout</code> to an actual file (<code>novel.txt</code>), but in this case it has no <code>stdout</code> specified so it falls back to the default <code>stdout</code> which in this case is the terminal shell itself.</p>
<p>Hence the results of the <code>sed</code> command (the modified content) are displayed on your screen.</p>
<h3><a name="piping-to-vim" class="anchor" href="#piping-to-vim"><span class="header-link"></span></a>Piping to Vim</h3>
<p>One thing I discovered recently (via <a href="http://twitter.com/Pand0ra83">Crystal Hirschorn</a>) was that you can&#39;t just pipe <code>stdout</code> into Vim unless you add a hyphen/dash <code>-</code> to the end of the command like so: <code>ls | vim -</code></p>
<p>Otherwise Vim will complain that: <code>Input is not from a terminal</code></p>
<p>That&#39;s a good one to remember!</p>
<p>Also you can pipe the input into Vim in read-only mode using the <code>-R</code> flag as well: <code>ls | vim -R -</code></p>
<h3><a name="piping-examples" class="anchor" href="#piping-examples"><span class="header-link"></span></a>Piping examples</h3>
<p>Here are three real world examples I&#39;ve used recently…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>phantomjs 2&gt;<span class="p">&amp;</span>1 network-test.js <span class="p">|</span> tee log.txt
</pre></div>
</code></pre>
<p>In this example I&#39;m executing a <a href="http://phantomjs.org/">PhantomJS</a> script <code>network-test.js</code> but I wanted to capture both the results of the script (which just logs out DNS information into the terminal) and any errors that may have occurred into a log text file.</p>
<p>The way it works might be a little confusing as it shows some things you might not have seen before: <code>2&gt;&amp;1</code> and <code>tee</code>.</p>
<p>Those two commands may look confusing but it just comes down to understanding the numbers that are associated with specific processes, so…</p>
<ul>
<li><code>0</code> = <code>stdin</code></li>
<li><code>1</code> = <code>stdout</code></li>
<li><code>2</code> = <code>stderr</code></li>
</ul>
<p>…this means <code>2&gt;&amp;1</code> is saying direct <code>2</code> (any errors) through to <code>1</code> (standard output).</p>
<p>We then pipe the <code>stdout</code> through to the <code>tee</code> command which copies it into a file called <code>log.txt</code>.</p>
<pre><code class="lang-sh"><div class="highlight"><pre>ls File-* <span class="p">|</span> sed <span class="s1">&#39;s/\(File-[^-]*\)-\(.*\)/mv &amp; \1\2/&#39;</span> <span class="p">|</span> sh
</pre></div>
</code></pre>
<p>In this example I&#39;m trying to remove a hyphen <code>-</code> from some file names.</p>
<p>The files I have look like <code>File-A-B.gif</code> and I want them to be renamed to <code>File-AB.gif</code>.</p>
<p>So first I list out any files in the current directory that begin <code>File-</code> and then pipe those results through to <code>sed</code>.</p>
<p>Sed then uses Regular Expressions to store a reference to the opening part of the file name (in this case <code>File-A</code>) and then stores the end part of the file name (in this case <code>B.gif</code>).</p>
<p>In the second part of the <code>sed</code> command, instead of doing a &#39;replace&#39; of what we&#39;ve found, we actually pass in a <code>mv</code> command (remember from before that we can rename a file by using <code>mv original.txt new.txt</code>). In this case the stored references to the beginning and ending parts of the file&#39;s name can be referenced within the replacement section using <code>\1</code> and <code>\2</code> (and the <code>&amp;</code> in regular expressions means, the original string being inspected).</p>
<p>So when we use <code>mv &amp; \1\2</code> we&#39;re saying &quot;move the original file and move it to the same directory but using the new name of File-AB.gif (remember <code>\1</code> is &quot;File-A&quot; and <code>\2</code> is &quot;B.gif&quot;).</p>
<p>Finally, because the <code>sed</code> command&#39;s replacement is an actual command rather than just a string replacement we pipe that replacement content (which is now <code>sed</code>&#39;s <code>stdout</code>) over to the <code>sh</code> bin command to execute and hence actually rename the file(s).</p>
<p>Note: whenever you write a shell script, you would store it (for example) inside a file with the extension of <code>sh</code> and then you&#39;d use the terminal command <code>sh</code> to execute that shell script.</p>
<pre><code class="lang-sh"><div class="highlight"><pre>tmux ls <span class="p">|</span> cut -d : -f 1 <span class="p">|</span> xargs -I <span class="o">{}</span> tmux <span class="nb">kill</span>-session -t <span class="o">{}</span>
</pre></div>
</code></pre>
<p>So in this example I wanted an easy way to destroy all my tmux sessions. </p>
<p>Typically I would run <code>tmux ls</code> to see what sessions I had (it returns something like <code>0: 1 windows (created Fri Oct  4 18:24:38 2013) [129x33]</code>, where the opening <code>0</code> is the number/name of the session followed by details about the session -&gt; in this case <code>1 window</code>, and when it was created, and the size of that window).</p>
<p>Once I had my session number (in this case <code>0</code>) I could run the command <code>tmux kill-session -t 0</code> but if I had loads of sessions open I would have to run the same command for all of them.</p>
<p>To fix this I tried using the commands Awk and Sed but discovered an issue with &#39;scope&#39; (which I&#39;m still not 100% sure I understand, but I&#39;ll explain what happened any way)… </p>
<p>I was using <code>tmux ls | awk &#39;{print $1}&#39; | sed &#39;s/://g&#39; | xargs -I {} tmux kill-session -t {}</code>. This works, but not when you stick it inside an alias for easy reuse.</p>
<p>The way it works is that it lists out all the tmux sessions and pipes it over to Awk.</p>
<p>Awk then grabs the first field <code>0:</code> (remember Awk splits the input line into &#39;fields&#39; using a space delimiter). We then pipe that over to Sed.</p>
<p>Sed then uses a regular expression to remove the <code>:</code> from the <code>0:</code> leaving us with just <code>0</code>. We then pipe that through to xargs.</p>
<p>xargs runs our kill-session command and passes through the value of <code>0</code> into that command using the placeholder <code>{}</code>.</p>
<p>We define what the placeholder will be using <code>-I</code> so we could of used <code>-I target</code> instead if we wanted to like so: <code>tmux ls | awk &#39;{print $1}&#39; | sed &#39;s/://g&#39; | xargs -I target tmux kill-session -t target</code> and it would of achieved the same.</p>
<p>Like I say, this works. But I wanted it inside an alias so I could easily reuse it (I mean, just <em>try</em> and memorise that massive chunk of commands!?). The moment it went into an alias the xargs failed to work because instead of getting <code>0</code> it got the entire line <code>0: 1 windows (created Fri Oct  4 18:24:38 2013) [129x33]</code>. The scope of the argument was being lost some how? A bit annoying really.</p>
<p>My colleague at BBC News (<a href="http://twitter.com/sthulb">Simon Thulbourn</a> - all round command line wizard, amongst many other technical talents) helped me understand a more efficient and fully functioning version (i.e. it can be safely aliased): <code>tmux ls | cut -d : -f 1 | xargs -I {} tmux kill-session -t {}</code>.</p>
<p>So the only difference here is instead of using both Awk and Sed, we&#39;re just using Cut. I&#39;ve not mentioned it before but <code>cut</code> works like this: </p>
<p>Cut splits the input into fields (like Awk does). We then tell it that we want the fields to be split by <code>:</code> (that&#39;s the <code>-d :</code> section). Then finally we use <code>-f 1</code> to say we want the first field, which we pipe over to xargs. Otherwise the rest of the command is the same as before.</p>
<p>Nice huh!</p>
<h2><a name="miscellaneous-commands" class="anchor" href="#miscellaneous-commands"><span class="header-link"></span></a>Miscellaneous Commands</h2>
<h3><a name="tee" class="anchor" href="#tee"><span class="header-link"></span></a><code>tee</code></h3>
<p>The <code>tee</code> command you&#39;ve seen already now (in our above example) but just to reiterate its use, here is how the manual describes it… </p>
<blockquote>
<p>The tee utility copies standard input to standard output, making a copy in zero or more files.</p>
</blockquote>
<h3><a name="dig" class="anchor" href="#dig"><span class="header-link"></span></a><code>dig</code></h3>
<p>The <code>dig</code> command is used for carrying out DNS lookups: <code>dig integralist.co.uk</code> returns the DNS records found for my domain name.</p>
<h3><a name="ps" class="anchor" href="#ps"><span class="header-link"></span></a><code>ps</code></h3>
<p>The <code>ps</code> command stands for (p)rocess (s)tatus</p>
<p>It shows you all running processes on your computer.</p>
<p>You can use piping again to narrow down the results to something in particular you know is causing your computer to slow down and then execute another command to kill that process.</p>
<p>So: <code>ps aux | grep ruby</code></p>
<p>In the above example we also pass <code>aux</code> which basically specifies table of results that should be returned (see: <a href="http://en.wikipedia.org/wiki/Ps_\(Unix\"><a href="http://en.wikipedia.org/wiki/Ps_(Unix">http://en.wikipedia.org/wiki/Ps_(Unix</a>)</a>) for more information).</p>
<p>We then pipe that through to <code>grep</code> and tell it we&#39;re interested only in processes that have the text <code>ruby</code> somewhere (that way we can narrow down the results printed to the screen).</p>
<p>Finally to kill a particular process you&#39;ll need its PID number (which <code>ps aux</code> would have displayed) so locate that PID and then run <code>kill -9 xxxx</code> where <code>xxxx</code> is the PID number you want to stop.</p>
<h3><a name="xargs" class="anchor" href="#xargs"><span class="header-link"></span></a><code>xargs</code></h3>
<p>I know we&#39;ve covered Xargs already in my previous examples, but it&#39;s worth mentioning that you can also use the <code>-0</code> flag which helps with some commands that won&#39;t work when passed arguments that have spaces in them (imagine a file name with spaces). Using the <code>-0</code> flag resolves that issue.</p>
<p>Also, if the command you want to run only excepts a single argument (for example <code>echo 123</code>) then you can omit the <code>-I {}</code> placeholder definition. </p>
<h3><a name="cut" class="anchor" href="#cut"><span class="header-link"></span></a><code>cut</code></h3>
<p>Again, we&#39;ve covered Cut above already, but just to note that you can change the field delimiter using <code>-d</code> (e.g. <code>-d ,</code> would split the line on commas).</p>
<p>Also, <code>-f</code> allows a range, not just a single field index. So if you wanted fields 3 to 4 you could do <code>-f 3,4</code></p>
<p>Another feature of <code>cut</code> is the <code>-c</code> flag which cuts based on &#39;character position&#39; rather than &#39;fields&#39; like <code>-f</code> does. </p>
<p>One way you could use the <code>-c</code> flag is to remove whitespace at the start and end of a line like so… </p>
<p><code>echo &quot; xyz &quot; | cut -c 2- | rev | cut -c 2- | rev</code></p>
<p>…notice our text &quot;xyz&quot; has one character of white space at the start and end. So we specifically tell <code>cut</code> to start at character 2 <code>x</code> and cut until the end of the line <code>2-</code> and then we use the <code>rev</code> command which reverses the content so it becomes &quot; zyx&quot; and then we again cut from the 2nd character (this time <code>z</code>) and cut until the end of the line and finally we reverse the line one more time so we&#39;re back to where we were initially but with the white space removed.</p>
<p>There are probably more elegant ways to achieve this but it gives you an indication of how you might want to use a command in unique ways.</p>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>This was a pretty fast paced run through of some different unix commands. As time goes on I&#39;ll update this post to include other commands and real work use cases that I think would be interesting and useful to those readers new to the command line.</p>
<p>If there were any errors or any thing like that then just let me know by pinging me on <a href="http://twitter.com/integralist">twitter</a>.</p>
]]></description><link>http://www.integralist.co.uk/posts/unix-commands/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/unix-commands/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Tue, 01 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Vim Workflow]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 7mins</em></p>
<ul>
<li>Introduction</li>
<li>Starting up</li>
<li>Top Pane</li>
<li>What if there isn&#39;t enough space to work in one of the panes?</li>
<li>What if you need more than three panes?</li>
<li>Why not just use Vim panes?</li>
<li>Downsides to using tmux panes?</li>
<li>Buffer lists</li>
<li>Mapping NERDTree</li>
<li>Global find and replace using Ack</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>If you saw my last post about <a href="http://integralist.co.uk/VIM.html">Vim</a> you&#39;ll see that I&#39;ve started using Vim as my main editor for development work.</p>
<p>But up until this point I had just been whimsically opening files and editing them and I realised quite quickly this wasn&#39;t going to &#39;cut it&#39; in the long run. So I wanted to show you the work flow I&#39;m currently using in my day to day life.</p>
<h2><a name="starting-up" class="anchor" href="#starting-up"><span class="header-link"></span></a>Starting up</h2>
<p>First thing first, I&#39;ve found the best way to work is to keep things simple (oh wow, that &#39;simple&#39; philosophy just keeps cropping up <em>everywhere</em> doesn&#39;t it, must be a sign! Maybe keeping things simple is the way we should do things. What a novel idea!)</p>
<p>So to achieve this let&#39;s just have two panes open.<br>One to hold our code and one to handle our terminal.</p>
<p>It&#39;ll look something like this…</p>
<div class="delayed-image-load" data-src="/images/generated/Vim-TwoPane-1024.png" data-width="1024"></div>

<p>The idea being: in my Vim pane I can then split into two panes if I really need to, like so…</p>
<div class="delayed-image-load" data-src="/images/generated/Vim-ThreePane-1024.png" data-width="1024"></div>

<p>But anything more than that then you&#39;ll want to open a new tmux window as otherwise you have too much going on.</p>
<p>To do this I run the following commands…</p>
<ol>
<li><code>tmux</code></li>
<li><code>Ctrl-b</code> (or whatever your tmux prefix command is) and then <code>Shift-&quot;</code> (to create a horizontal split pane)</li>
<li>In the bottom pane I&#39;ll <code>cd</code> into whatever directory my project is</li>
<li>Then in the bottom pane we&#39;ll run <code>Ctrl-b</code> and type <code>:resize-pane -D 5</code>** to change the height of the bottom pane</li>
<li>In the top panel I&#39;ll run <code>vim</code></li>
</ol>
<p>That&#39;s it.</p>
<p>**if I&#39;m on a large screen and not my laptop then I&#39;ll change the value from 5 to 10</p>
<h2><a name="top-pane" class="anchor" href="#top-pane"><span class="header-link"></span></a>Top Pane</h2>
<p>So as I said, the top pane is there literally to just run Vim. But because I use the <a href="https://github.com/kien/ctrlp.vim">Ctrl-P</a> plugin and Vim has been opened from the root directory of my project, I can just run a fuzzy file search using Ctrl-P to easily open up any file in my project work space. So I don&#39;t need lots of panes open as I can just keep jumping around my files really easily with fuzzy searching.</p>
<p>If for whatever reason I feel I need another file open side by side then I&#39;ll run tmux&#39;s prefix command followed by <code>Shift-5</code> to create a vertical split pane, where I can then run <code>vim</code> and again use my fuzzy file search to locate the file I want.</p>
<p>I don&#39;t open any more panes than that (3 max).</p>
<h2><a name="what-if-there-isnt-enough-space-to-work-in-one-of-the-panes" class="anchor" href="#what-if-there-isnt-enough-space-to-work-in-one-of-the-panes"><span class="header-link"></span></a>What if there isn&#39;t enough space to work in one of the panes?</h2>
<p>Just make the pane you&#39;re currently working in full screen by running <code>Ctrl-b</code> then <code>z</code>. Just run that same command again to go back to the normal pane size.</p>
<h2><a name="what-if-you-need-more-than-three-panes" class="anchor" href="#what-if-you-need-more-than-three-panes"><span class="header-link"></span></a>What if you need more than three panes?</h2>
<p>If I do need more than three panes then I&#39;ll just open up a new tmux window. No point over loading the screen unnecessarily. Why make your life difficult, that&#39;s what windows are there for!</p>
<h2><a name="why-not-just-use-vim-panes" class="anchor" href="#why-not-just-use-vim-panes"><span class="header-link"></span></a>Why not just use Vim panes?</h2>
<p>I don&#39;t use Vim&#39;s own panes. I prefer tmux&#39;s. </p>
<p>There are two reasons for this:</p>
<ol>
<li><p>If I used Vim&#39;s own panes exclusively (so all 3 panes were Vim panes) then I couldn&#39;t have the terminal running in the bottom pane. Yes I can run terminal commands either in Vim (or suspend Vim) but this isn&#39;t as nice as having a proper terminal screen running freely in the bottom pane.</p>
</li>
<li><p>Also, if I open Vim in my top pane and then decide to create a vertical split, the file in the right side <em>has</em> to be handled by Vim. I can&#39;t just split the top pane in two and do what I want in the top right pane.</p>
</li>
</ol>
<h2><a name="downsides-to-using-tmux-panes" class="anchor" href="#downsides-to-using-tmux-panes"><span class="header-link"></span></a>Downsides to using tmux panes?</h2>
<p><del>Yes, there is one downside to using tmux&#39;s panes which I can&#39;t seem to work around, and that is my speed is restricted.</del></p>
<p><del>By that I mean: if I move to another pane I have to wait a fraction of a second before I can use my arrow keys (or <code>hjkl</code> keys) as tmux will try to move me back to the other pane again.</del></p>
<p><del>That can be frustrating, but I&#39;m learning to live with it.</del></p>
<p><strong>UPDATE:</strong> there is a solution!</p>
<blockquote>
<p>The reason this happens is because the default bindings for the arrow keys are setup with <code>bind-key -r</code>, specifying that they may be repeated.</p>
</blockquote>
<p>So to resolve the issue you re-bind the keys without <code>-r</code>:</p>
<pre><code><div class="highlight"><pre><span class="nx">bind</span><span class="o">-</span><span class="nx">key</span> <span class="nx">Up</span>    <span class="nx">select</span><span class="o">-</span><span class="nx">pane</span> <span class="o">-</span><span class="nx">U</span>
<span class="nx">bind</span><span class="o">-</span><span class="nx">key</span> <span class="nx">Down</span>  <span class="nx">select</span><span class="o">-</span><span class="nx">pane</span> <span class="o">-</span><span class="nx">D</span>
<span class="nx">bind</span><span class="o">-</span><span class="nx">key</span> <span class="nx">Left</span>  <span class="nx">select</span><span class="o">-</span><span class="nx">pane</span> <span class="o">-</span><span class="nx">L</span>
<span class="nx">bind</span><span class="o">-</span><span class="nx">key</span> <span class="nx">Right</span> <span class="nx">select</span><span class="o">-</span><span class="nx">pane</span> <span class="o">-</span><span class="nx">R</span>
</pre></div>
</code></pre>
<h2><a name="buffer-lists" class="anchor" href="#buffer-lists"><span class="header-link"></span></a>Buffer lists</h2>
<p>In my Vim pane, as I use the CtrlP plugin to open up multiple files, I&#39;m able to jump between files really easily using its <code>:CtrlPBuffer</code> command, but I make this command quicker to access by configuring Vim to let me access the <code>:CtrlPBuffer</code> using the shortcut <code>&lt;leader&gt;y</code> (the <code>&lt;leader&gt;</code> key is a similar concept to the <code>&lt;prefix&gt;</code> key in tmux).</p>
<p>So if I want to jump back to a recently opened file then I&#39;ll just run the command <code>\y</code> (by default the <code>&lt;leader&gt;</code> key is a backslash <code>\</code>) and this will show me CtrlP&#39;s buffer list.</p>
<p>Once we have the buffer list open we can just select the file we want to re-open. This makes it really quick for jumping back and forth between two or more files we happen to be editing a lot.</p>
<p>You can configure your <code>.vimrc</code> file to use this shortcut like so: <code>map &lt;leader&gt;y :CtrlPBuffer&lt;cr&gt;</code></p>
<h2><a name="mapping-nerdtree" class="anchor" href="#mapping-nerdtree"><span class="header-link"></span></a>Mapping NERDTree</h2>
<p>I don&#39;t use NERDTree very often but when I do it&#39;s tedious so I mapped <code>map &lt;leader&gt;&#39; :NERDTreeToggle</code> so it&#39;s a lot less annoying to open and close it.</p>
<h2><a name="global-find-and-replace-using-ack" class="anchor" href="#global-find-and-replace-using-ack"><span class="header-link"></span></a>Global find and replace using Ack</h2>
<p>I like to use the <a href="https://github.com/mileszs/ack.vim">Ack plugin</a> for carrying out a global &#39;find and replace&#39; function on my files.</p>
<p>Ack is the same concept as Grep (e.g. use either a string or a Regular Expression to find a match in a list of files). But Ack has been written to be much faster than Grep**.</p>
<p>**Technically, in the background (configured within my <code>.vimrc</code> file), I alias the <code>Ack</code> command within Vim so it uses <a href="https://github.com/ggreer/the_silver_searcher">The Silver Searcher</a> instead, which has the same API as Ack but is blazingly fast (even more so than Ack!).</p>
<p>To use the plugin you simple run <code>:Ack &#39;pattern&#39; directory</code> (note: if you leave off the directory then the plugin will use the current directory).</p>
<p>Note: when you use the plugin Vim will show the results inside of a <code>Quickfix</code> pane. Navigating this pane requires a few extra commands…</p>
<ul>
<li><code>o</code> = opens the file (and puts focus on that pane)</li>
<li><code>go</code> = quick preview of the file instead (so you stay inside of the Quickfix pane)</li>
<li><code>:copen</code> = if the Quickfix pane is still open and you&#39;re not focused on it, then this command puts your focus back to that pane so you can look at the rest of the results</li>
<li><code>:ccl</code> = closes the Quickfix pane</li>
</ul>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>That&#39;s pretty much all there is to it (at the moment). If things change then I&#39;ll be sure to update this post but simplicity is the key.</p>
<p>Let me know your thoughts and how <em>you</em> do things. I&#39;m interested to know how other Vim users work.</p>
]]></description><link>http://www.integralist.co.uk/posts/vim-workflow/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/vim-workflow/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sat, 21 Sep 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[A guide to getting started with Vim]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 26mins</em></p>
<ul>
<li>Introduction</li>
<li>Here comes the old man</li>
<li>The focus of this post</li>
<li>Step 1: Installation</li>
<li>TMUX</li>
<li>TMUXinator</li>
<li>Vundle<ul>
<li>Set-up some bundles</li>
<li>Where can I find bundles?</li>
</ul>
</li>
<li>NERDTree</li>
<li>Ctrl+P</li>
<li>Vim<ul>
<li>Vim Basics</li>
<li>Using Ctrl+p to do fuzzy file searching</li>
<li>Updating Ctrl+P&#39;s list</li>
<li>Using NERDTree to search our file system</li>
<li>Command Structure</li>
<li>More Commands</li>
<li>Cursor Movement</li>
<li>Page Movement</li>
<li>Motions</li>
<li>Operators</li>
<li>Deleting</li>
<li>Deleting a tag</li>
<li>Search within a file</li>
<li>Search and Replace</li>
<li>Viewing different buffers</li>
<li>Change list</li>
<li>Jump list</li>
<li>Diff Tool</li>
<li>Code Comments</li>
<li>Syntax Formatting</li>
<li>Auto Indenting</li>
<li>Run terminal commands within Vim</li>
<li>Suspend Vim</li>
<li>Visual Block Mode</li>
<li>Vim Windows</li>
<li>Repeating Yourself</li>
<li>Making life easier (changing case)</li>
<li>Keep to the basics</li>
</ul>
</li>
<li>Vim Configuration</li>
<li>Other plugins</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>So, what editor do you use for programming?</p>
<p>In case you&#39;re wondering, here is the list of editors I&#39;ve tried at one point or another…</p>
<ul>
<li>Homesite</li>
<li>DreamWeaver</li>
<li>NetBeans</li>
<li>Aptana</li>
<li>Coda</li>
<li>Chocolat</li>
<li>Sublime Text</li>
</ul>
<p>…and that&#39;s not including some of the real <em>random</em> editors that have cropped up over the years.</p>
<p>It seems popular editors nowadays are becoming more minimalist (oxymoron?)</p>
<p>The UI appears to be reducing in favour of keyboard short-cuts, with the intention of improving developer productivity.</p>
<p>One example of this is the use of a &#39;fuzzy keyword search&#39;. The principle idea being that you press a short-cut key and you&#39;re presented with a field where you can type whatever you like and the editor will attempt to list out a group of files that match (in some way) what you&#39;ve typed.</p>
<p>The reason this is a good thing is that it makes finding and opening files a lot quicker.</p>
<p>Imagine you don&#39;t know where a file lives (easily done in a cross team environment where other devs are working on code for a feature you&#39;re not). Fuzzy file searching makes life a lot easier.</p>
<p>Even if you <em>do</em> know where a file lives, fuzzy file searching is still quicker than reaching for your mouse, moving over to the file system and clicking on folders until you find the file and then double click to open it.</p>
<p>A lot of editors have a feature like this nowadays (Sublime Text is one such popular example).</p>
<div class="delayed-image-load" data-src="/images/generated/sublime-text-fuzzy-1024.png" data-width="1024"></div>

<p>The problem is that most editors don&#39;t normally have a long shelf life (none that any serious developer would consider using  nowadays -&gt; I&#39;m looking at Dreamweaver here**).</p>
<p>**yes I&#39;m sure they&#39;ll be some people who still use Dreamweaver and will not like that sentence, but I think it&#39;s safe to say that the developer community has grown up considerably since those early Macromedia days and developers have long since moved away to other more advanced and efficient development environments.</p>
<p>For example, the current hotness (as of 2013) is to use Sublime Text (a nice editor with good keyboard based features but also allows users to interact with it using a mouse). But what happens when Sublime Text stops getting updates (TextMate? Don&#39;t think it can&#39;t happen), or gets bought out by a competitor and then is dumped (this happens <em>all</em> the time in the software industry)?</p>
<p>Where do developers go next?
Typically developers find another editor.</p>
<h2><a name="here-comes-the-old-man" class="anchor" href="#here-comes-the-old-man"><span class="header-link"></span></a>Here comes the old man</h2>
<p>Well, there is an editor that has been around for a <em>very</em> long time and is available everywhere (and in most cases is installed by default) but also has tons of plug-ins and is pretty much the Perl of keyboard short-cuts.</p>
<p>That editor is <a href="http://en.wikipedia.org/wiki/Vi">VI</a> (well, as you&#39;ll see, more specifically Vim) and it was originally created back in 1976!</p>
<p>Since then there has been improvements to the editor which nowadays (~1981 onwards) is more commonly known as Vim (meaning: VI Improved) and you can find more information on Vim at its website <a href="http://www.vim.org/"><a href="http://www.vim.org/">http://www.vim.org/</a></a>.</p>
<h2><a name="the-focus-of-this-post" class="anchor" href="#the-focus-of-this-post"><span class="header-link"></span></a>The focus of this post</h2>
<p>OK, so the problem with Vim is that although it&#39;s a great program to use, it unfortunately has a <em>very</em> steep learning curve which puts off new comers.</p>
<p>Also, Vim by itself isn&#39;t as useful (as a development environment) without a few plug-ins that help give it a bit of jazz. That also trips up new comers to Vim as they assume what they see other developers using is <em>just</em> Vim but it&#39;s not. Vim by itself is very nondescript, it&#39;s the plug-ins and custom Vim configurations that make all the difference to the look and feel of Vim.</p>
<p>So, the key to using Vim (for the first time) as a developer tool is:</p>
<ul>
<li>Get a nice clean command line shell</li>
<li>Get ourselves a set of primary plugins installed first</li>
<li>Then focus on basic Vim commands last (typically this is considered the first step, but I think that&#39;s a mistake)</li>
</ul>
<p>I want to get the primary tools set-up first, and to show you those BEFORE we get ourselves bogged down with Vim commands.</p>
<h2><a name="step-1-installation" class="anchor" href="#step-1-installation"><span class="header-link"></span></a>Step 1: Installation</h2>
<p>I&#39;m not going to cover the installation of Vim because chances are it&#39;s already installed! Also, I&#39;m running a Mac and so this tutorial is aimed at that environment (i.e. your mileage may vary otherwise if you&#39;re on Windows or a non Unix system).</p>
<h3><a name="updating-your-vim-version" class="anchor" href="#updating-your-vim-version"><span class="header-link"></span></a>Updating your Vim version?</h3>
<p>If you decide you want to update your version of Vim (which when using a Mac is probably something you&#39;ll want to do as the included version is quite old).</p>
<p>You can do this by installing the latest version of Vim using <a href="http://brew.sh/">Homebrew</a>: <code>brew install vim</code>.</p>
<p>The problem you&#39;ll likely hit is that the Mac will still be using the original version of Vim.</p>
<p>Run <code>which vim</code> to see where the system is looking for Vim and if it&#39;s not running from a local user directory then you&#39;ll know it&#39;s not using the Homebrew install version. </p>
<p>So go to that directory specified by <code>which vim</code> and then rename the Vim folder (e.g. VimVersionXXXX) and then run <code>which vim</code> again and you should find that your system tries looking elsewhere for Vim and it will find the Homebrew install.</p>
<h3><a name="things-were-going-to-install-to-go-along-with-vim" class="anchor" href="#things-were-going-to-install-to-go-along-with-vim"><span class="header-link"></span></a>Things we&#39;re going to install to go along with Vim</h3>
<p>But here are the things we&#39;re going to install…</p>
<ul>
<li>Pure Zsh</li>
<li>TMUX</li>
<li>Vundle</li>
<li>NERDTree</li>
<li>Ctrl+p</li>
</ul>
<p>…now there are loads of plugins you could install but the above are the fundamental ones that you&#39;ll require (you might decide that&#39;s all you need, I&#39;ll leave it up to you to decide).</p>
<h2><a name="zsh" class="anchor" href="#zsh"><span class="header-link"></span></a>Zsh</h2>
<p>To use Vim we&#39;ll need to use a terminal shell. So let&#39;s get that open now (if you&#39;re on a Mac you&#39;ll have a Terminal.app you can run).</p>
<p>The default terminal shell for the GNU operating system, Linux and Mac OS X is &#39;Bash&#39; but we want to use &#39;Zsh&#39; instead.</p>
<p>I won&#39;t delve into the reasons why but effectively Zsh is a more efficient shell and offers better features than Bash and in general is more enjoyable to use.</p>
<p>To see what shells are available on your system you can run the command <code>cat /etc/shells</code> (hopefully you&#39;ll see <code>/bin/zsh</code> in the list).</p>
<p>To change shells run the command <code>chsh -s /bin/zsh</code>.</p>
<p>Terminal shells can be configured using (what&#39;s typically referred to as) a &#39;dot file&#39;. These are files that are prefixed with a period character and so are hidden from standard users.</p>
<p>To see the hidden files in a directory just run the command <code>ls -la</code> and you should see a whole host of hidden dot files and folders.</p>
<p>For Zsh there should be a <code>.zshrc</code> file in your home directory (if there isn&#39;t then create one, as we&#39;ll need it shortly). You can do this very simply using the command <code>touch .zshrc</code>.</p>
<p>As we&#39;ll be using Vim there should also be in the home directory a <code>.vimrc</code> file for configuring Vim. If there isn&#39;t then create one (again, we&#39;ll be needing it shortly).</p>
<h2><a name="pure-zsh" class="anchor" href="#pure-zsh"><span class="header-link"></span></a>Pure Zsh</h2>
<p>Now that we have Zsh running let&#39;s make it look a bit nicer by using &#39;Pure Zsh&#39;. I&#39;m going to let the author have the pleasure of describing it…</p>
<blockquote>
<p>Most prompts are cluttered, ugly and slow. I wanted something visually pleasing that stayed out of my way. Pretty, minimal and fast.</p>
</blockquote>
<p>So let&#39;s get it installed. Go to <a href="https://github.com/sindresorhus/pure"><a href="https://github.com/sindresorhus/pure">https://github.com/sindresorhus/pure</a></a> and download the file <code>pure.zsh</code> to your home directory (or wherever you want, just remember where you save it).</p>
<p>You can import the <code>pure.zsh</code> file by adding the following line into the <code>.zshrc</code> file: <code>. /path/to/pure.zsh</code></p>
<div class="delayed-image-load" data-src="/images/generated/pure-zsh-1024.png" data-width="1024"></div>

<h2><a name="tmux" class="anchor" href="#tmux"><span class="header-link"></span></a>TMUX</h2>
<p>So what is tmux? The authors definition is…</p>
<blockquote>
<p>It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more.</p>
</blockquote>
<p>OK, so in short tmux makes it easy for you to create new terminal windows with panes and complex layouts (stuff you can do with raw Vim but tmux makes easier).</p>
<p>There are a couple of ways to install <a href="http://tmux.sourceforge.net/">TMUX</a> the easiest is with <a href="http://brew.sh/">Homebrew</a>: <code>brew install tmux</code></p>
<p>Once you have tmux installed you can start it by simply running the command <code>tmux</code> in your terminal.</p>
<p>You may wonder if anything has actually happened because tmux doesn&#39;t look any different from what your normal terminal shell looks like, but what you don&#39;t realise is that you now have quite a few new keyboard shortcuts you can use to split your terminal into &#39;panes&#39;, &#39;windows&#39; or &#39;tabs&#39;.</p>
<div class="delayed-image-load" data-src="/images/generated/tmux-1024.png" data-width="1024"></div>

<h3><a name="prefix" class="anchor" href="#prefix"><span class="header-link"></span></a>Prefix?</h3>
<p>In tmux whenever you want to run a command you first run a opening command called &#39;the prefix&#39;. The prefix is typically <code>Ctrl+b</code> (i.e. press the <code>Ctrl</code> button and then the <code>b</code> key). </p>
<p>In my case I&#39;ve updated the prefix to be <code>Ctrl+a</code> instead of <code>Ctrl+b</code> via a <code>tmux.conf</code> configuration file (you&#39;ll find out more about this file in the next section &quot;tmuxinator&quot;).</p>
<h3><a name="creating-windows" class="anchor" href="#creating-windows"><span class="header-link"></span></a>Creating windows</h3>
<p>To create a new window just run the prefix command and then press the <code>c</code> key (e.g. <code>Ctrl+b</code> then <code>c</code>)</p>
<p>To close a window either run <code>exit</code> or press <code>Ctrl+d</code></p>
<h3><a name="renaming-windows" class="anchor" href="#renaming-windows"><span class="header-link"></span></a>Renaming windows</h3>
<p>You can rename a window by running the prefix command and then pressing the <code>,</code> key.</p>
<h3><a name="changing-windows" class="anchor" href="#changing-windows"><span class="header-link"></span></a>Changing windows</h3>
<p>You can move around your tmux windows using the prefix command and either <code>n</code> (for next) or <code>p</code> (for previous) or specifying a number that correlates with the window number.</p>
<h3><a name="creating-panes" class="anchor" href="#creating-panes"><span class="header-link"></span></a>Creating panes</h3>
<p>To create a new horizontal pane run the prefix command and then press <code>Shift+5</code> (the <code>%</code> key).</p>
<div class="delayed-image-load" data-src="/images/generated/tmux-horizontal-1024.png" data-width="1024"></div>

<p>To create a new vertical pane run the prefix command and then press <code>Shift+&#39;</code> (the <code>&quot;</code> key).</p>
<div class="delayed-image-load" data-src="/images/generated/tmux-vertical-1024.png" data-width="1024"></div>

<h3><a name="full-screen-a-pane" class="anchor" href="#full-screen-a-pane"><span class="header-link"></span></a>Full screen a pane</h3>
<p>At any time you can turn a pane into a full screen view (and back again) by running the prefix command followed by <code>z</code>. Run that again to toggle back to the pane view.</p>
<h3><a name="move-a-pane-into-a-different-pane-space" class="anchor" href="#move-a-pane-into-a-different-pane-space"><span class="header-link"></span></a>Move a pane into a different pane space</h3>
<p>You can actually shift the panes around so that if a pane is in one position (let&#39;s say top left), you can move it to a different location (let&#39;s say bottom right) simply by running the prefix command followed by <code>Shift+{</code>, every time you press that combination all the panes will shift around.</p>
<h3><a name="renaming-a-session" class="anchor" href="#renaming-a-session"><span class="header-link"></span></a>Renaming a session</h3>
<p>When you create a new tmux session (i.e. run <code>tmux</code>). You can opt to give it a name using <code>tmux new -s session_name</code>, but if you forget to do that and want to give the session a name later on (I do this all the time) then from within the session just run the prefix command followed by <code>Shift+4</code> (which is the <code>$</code> key) or alternatively run the prefix command followed by a <code>:</code> and then <code>rename-session -t [current-name] [new-name]</code> (if it has no current name then you&#39;ll just use the number assigned).</p>
<h2><a name="tmuxinator" class="anchor" href="#tmuxinator"><span class="header-link"></span></a>TMUXinator</h2>
<p>We&#39;re now going to set-up a tool associated with tmux called &#39;<a href="https://github.com/aziz/tmuxinator">tmuxinator</a>&#39; and this will help us manage complex tmux sessions.</p>
<p>Basically, rather than you (every day) opening up the terminal and manually creating the same set of panes and windows and opening files in tmux, we can just store these preferences as a template. We do this by creating a text file that holds this configuration information.</p>
<p>First thing to do is to install TMUXinator.</p>
<p>Sorry, but we need more technologies and this time it&#39;s Ruby.</p>
<p>To install it we need to run the command <code>gem install tmuxinator</code>.</p>
<p>Once installed we can create a new instance by running the command <code>tmuxinator new [project]</code>. You can call your project whatever you like (I went with <code>tmuxinator new work</code>).</p>
<p>Running this command is going to create a dot file <code>.tmux.conf</code> and also a dot folder called <code>.tmuxinator</code> which holds a <code>project.yml</code> (where the name of the file matches the name of the project, so for me it created a <code>work.yml</code> file).</p>
<p>If you open the yaml file you&#39;ll see it has a basic example set-up ready for you to configure…</p>
<pre><code class="lang-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test-project</span>
<span class="l-Scalar-Plain">root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">~/Code/news/workspace/</span>

<span class="l-Scalar-Plain">windows</span><span class="p-Indicator">:</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">editor</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-vertical</span>
      <span class="l-Scalar-Plain">panes</span><span class="p-Indicator">:</span>
        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vim</span>
        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git status</span>
        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cd path/to/my/cheatsheet &amp;&amp; vim cheat-sheet.txt</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sandbox</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vagrant ssh</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">grunt watch:service:news</span>
</pre></div>
</code></pre>
<p>…above is an example of my <code>work.yml</code>.</p>
<p>You can see I specify that I want to have three tabs created:</p>
<ul>
<li>editor</li>
<li>sandbox</li>
<li>sass</li>
</ul>
<p>Within the first tab <code>editor</code> I have a specific layout used called <code>main-vertical</code> (tmux comes with many different pre-built layouts, this is just one of them).</p>
<p>The layout I&#39;m using splits the screen into two columns. In the left column I have <code>vim</code> running and in the right column I have two rows. The top row checks the status of my git repository, and the bottom row opens up a Vim cheat sheet.</p>
<p>In the second tab <code>sandbox</code> I&#39;ve told tmux I want to connect to our local development sandbox (via ssh).</p>
<p>In the third tab <code>sass</code> I&#39;ve told tmux I want to run a task that watches our Sass development files for any changes (and then compiles the files when a change is detected).</p>
<div class="delayed-image-load" data-src="/images/generated/tmuxinator-1024.png" data-width="1024"></div>

<h3><a name="starting-tmuxinator" class="anchor" href="#starting-tmuxinator"><span class="header-link"></span></a>Starting tmuxinator</h3>
<p>Now we have a template set-up, to use it we just run <code>tmuxinator start project</code> (or in my case <code>tmuxinator start work</code>).</p>
<h3><a name="closing-tmux" class="anchor" href="#closing-tmux"><span class="header-link"></span></a>Closing tmux</h3>
<p>Chances are you&#39;ll just leave the tmux session open, but if you want a quick way to detach from the tmux session (but leave the session open in the background so you can come back to it) then just run <code>Ctrl+a d</code></p>
<p>You can see what tmux sessions are still open by running <code>tmux ls</code> which will show a number and a associated session.</p>
<p>You can re-attach to an existing session by running <code>tmux attach -t {number|name}</code> where <code>{number|name}</code> is either the number or the name of the session.</p>
<p>If there is only one session then you can just run <code>tmux attach</code>.</p>
<p>To totally kill a session just run <code>tmux kill-session -t {number|name}</code>.</p>
<h2><a name="vundle" class="anchor" href="#vundle"><span class="header-link"></span></a>Vundle</h2>
<p>This is a plug-in manager for Vim.</p>
<p>To install Vundle run <code>git clone  
https://github.com/gmarik/  
vundle.git  
~/.vim/bundle/vundle</code></p>
<p>Now you have it installed, you can add plug-ins to your <code>.vimrc</code> configuration file and install them by running a <code>:BundleInstall</code> command from within Vim.</p>
<p>You can also just run <code>vim +BundleInstall</code> from the command line.</p>
<h3><a name="set-up-some-bundles" class="anchor" href="#set-up-some-bundles"><span class="header-link"></span></a>Set-up some bundles</h3>
<p>We&#39;re jumping ahead a little bit (because at the end of this section you&#39;ll see we&#39;ll be using Vim to type one command, but it&#39;s OK we won&#39;t do any more than that until later).</p>
<p>Let&#39;s open our <code>.vimrc</code> file and add some plug-ins we&#39;re going to need (code comments start with &quot;)…</p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="nb">set </span>rtp+<span class="o">=</span><span class="nv">$HOME</span>/.vim/bundle/vundle
call vundle#rc<span class="o">()</span>
Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
filetype plugin indent on

<span class="s2">&quot; ALL OF THE ABOVE IS ALSO REQUIRED</span>
<span class="s2">&quot;</span> FOR SUCCESSFUL VUNDLE INSTALL
<span class="err">&quot;</span> THE FOLLOWING IS NEW FOR US…

Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
Bundle <span class="s1">&#39;vim-scripts/The-NERD-tree&#39;</span>
</pre></div>
</code></pre>
<p>…so you may have noticed we&#39;ve specified two plug-ins:</p>
<ol>
<li>NERDTree</li>
<li>Ctrl+p</li>
</ol>
<p>If you check the Vundle README on GitHub you&#39;ll see there are multiple ways to specify a &#39;bundle&#39;, in our case we&#39;re installing two bundles that are available on GitHub so you&#39;ll notice that the paths specified are actually the GitHub username/repo-name.</p>
<p>To actually get these two bundles installed (using the Vundle plug-in) means we need to first open Vim so we can run the relevant install command.</p>
<p>So to open Vim literally just run: <code>vim</code> and then to run the install command press ESC (just to make sure you&#39;re in the right mode, don&#39;t worry we&#39;ll cover this later) then type <code>:BundleInstall</code> and press ENTER.</p>
<h3><a name="where-can-i-find-bundles" class="anchor" href="#where-can-i-find-bundles"><span class="header-link"></span></a>Where can I find bundles?</h3>
<p>Bundles are just pointers to Vim scripts.</p>
<p>The two bundles we&#39;ve pointed to are references to their GitHub repositories.</p>
<p>But you can also point to non-github repos, local git repos, or direct to Vim scripts. See the Vundle README for more information.</p>
<h2><a name="nerdtree" class="anchor" href="#nerdtree"><span class="header-link"></span></a>NERDTree</h2>
<p>NERDTree is a tree explorer plugin for navigating the filesystem. This is the closest thing you&#39;re going to get to a standard editor feature.</p>
<p>We&#39;ll cover how to use it in the following Vim Basics section. Suffice to say, with the <code>Ctrl+p</code> plug-in we shouldn&#39;t need to use the NERDTree very often (but sometimes it can come in handy)</p>
<h2><a name="ctrlp" class="anchor" href="#ctrlp"><span class="header-link"></span></a>Ctrl+p</h2>
<p>This is a fuzzy file finder so it makes it easy for you to locate files within your project by just typing a couple of characters of the files name.</p>
<p>Again, we&#39;ll cover how to use it in the following Vim Basics section.</p>
<h2><a name="vim" class="anchor" href="#vim"><span class="header-link"></span></a>Vim</h2>
<p>So here we are! We made it to the part where we can actually use Vim! So let&#39;s get stuck in...</p>
<h3><a name="vim-basics" class="anchor" href="#vim-basics"><span class="header-link"></span></a>Vim Basics</h3>
<p>Vim is all about not using the mouse, just the keyboard.</p>
<p>One of the first things to know about Vim are that it has 3 modes:</p>
<ol>
<li>NORMAL (you run the majority of your commands from this mode)</li>
<li>INSERT (you spend the least amount of time in this mode)</li>
<li>VISUAL (you select text in this mode)</li>
</ol>
<p>To switch modes you first press the <code>ESC</code> key and then either <code>i</code> to go into INSERT mode and <code>v</code> to go into VISUAL mode. The act of pressing <code>ESC</code> automatically puts you into NORMAL mode.</p>
<p>Once you&#39;re in NORMAL or VISUAL mode, to actually run a command (let&#39;s say the command we want is <code>d$</code>, don&#39;t worry what that means for now) you first press <code>:</code> followed by <code>d$</code>.</p>
<h3><a name="using-ctrlp-to-do-fuzzy-file-searching" class="anchor" href="#using-ctrlp-to-do-fuzzy-file-searching"><span class="header-link"></span></a>Using Ctrl+p to do fuzzy file searching</h3>
<p>Get ourselves into NORMAL mode by pressing <code>ESC</code>, followed by <code>:</code>, followed by <code>CtrlP</code> (note: for this particular plug-in, if you&#39;re already in NORMAL mode, you can just press the <code>Ctrl</code> and <code>p</code> keys together to trigger the fuzzy search to open, but to not confuse ourselves let&#39;s keep to the standard <code>:some-command</code> format).</p>
<p>Once the plug-in is open we can just start typing the name of the file we&#39;re looking for, and you&#39;ll see that it lists all the files it thinks matches what we&#39;re looking for.</p>
<p>Simply use the arrow keys to select the relevant file you want to open and press ENTER.</p>
<div class="delayed-image-load" data-src="/images/generated/ctrlp-1024.png" data-width="1024"></div>

<h3><a name="updating-ctrlps-list" class="anchor" href="#updating-ctrlps-list"><span class="header-link"></span></a>Updating Ctrl+P&#39;s list</h3>
<p>If you have Vim open and you add a new file then the list that Ctrl+P uses (which is cached) will be out of date. To fix this, open Ctrl+P and then press <code>F5</code> to refresh the list of files it can search for.</p>
<h3><a name="using-nerdtree-to-search-our-file-system" class="anchor" href="#using-nerdtree-to-search-our-file-system"><span class="header-link"></span></a>Using NERDTree to search our file system</h3>
<p>When Vim is open and in NORMAL mode press <code>:</code> followed by <code>NERDTreeToggle</code> this will open NERDTree at the current location. You can then use your arrow keys to move up and down the file system and press <code>ENTER</code> to open folders. Once you find a file you want to open press <code>ENTER</code> once you&#39;re cursor is on the item of interest.</p>
<div class="delayed-image-load" data-src="/images/generated/nerdtree-1024.png" data-width="1024"></div>

<h3><a name="command-structure" class="anchor" href="#command-structure"><span class="header-link"></span></a>Command Structure</h3>
<p>It&#39;s worth remembering that most commands follow the format: <code>operator [number] motion</code> (not all the time, but enough of the time - you&#39;ll soon get used to the order you do things).</p>
<p>What follows is a super short list of commands and what they do.</p>
<h3><a name="cursor-movement" class="anchor" href="#cursor-movement"><span class="header-link"></span></a>Cursor Movement</h3>
<p><code>h</code>    : left<br><code>l</code>    : right<br><code>k</code>    : up<br><code>j</code>    : down</p>
<p>Note: you can use your arrow keys still, but it&#39;s considered best practice by the Vim community to get used to using the above keys rather than the arrow keys.</p>
<h3><a name="page-movement" class="anchor" href="#page-movement"><span class="header-link"></span></a>Page Movement</h3>
<p>Rather than moving up and down a file line by line, we can instead just move up and down the file in sections.</p>
<p><code>Ctrl+u</code> : move one page up<br><code>Ctrl+d</code> : move one page down<br><code>Ctrl+b</code> : move half page up<br><code>Ctrl+f</code> : move half page down</p>
<h3><a name="motions" class="anchor" href="#motions"><span class="header-link"></span></a>Motions</h3>
<p>With some commands we need to indicate what direction or motion we want to take.</p>
<p><code>e</code>    : move to the end of a word<br><code>w</code>    : move to the start of next word (use with a counter -&gt; a counter meaning &quot;a number&quot;)</p>
<p><strong>Examples</strong>:</p>
<p><code>5e</code> = move to the end of the 5th word in the sentence<br><code>5w</code> = move to the start of the word after the 5th (so actually move to the start of the 6th word)</p>
<h3><a name="operators" class="anchor" href="#operators"><span class="header-link"></span></a>Operators</h3>
<p>Here are some common operators available to use:</p>
<ul>
<li><code>0</code> : moves cursor to the start of the line</li>
<li><code>$</code> : moves cursor to the end of the line</li>
<li><code>d</code> : delete (e.g. <code>d$</code> deletes the entire line)</li>
<li><code>G</code> : go to line (e.g. <code>5G</code> takes you to the 5th line of the file)</li>
<li><code>v</code>    : select (e.g. <code>v1e</code> selects one word, the act of pressing <code>v</code> automatically sticks you in VISUAL mode)</li>
<li><code>V</code>    : select entire line (e.g. <code>V</code> selects the entire line, the act of pressing <code>v</code> automatically sticks you in VISUAL mode)</li>
<li><code>j</code>    : move down one line (e.g. <code>d5j</code> deletes 5 lines)</li>
<li><code>y</code> : copy selected text (e.g. select text and then press <code>y</code>)</li>
<li><code>yy</code>    : copy line (e.g. <code>yy</code> copies line to buffer ready to be pasted)</li>
<li><code>p</code>    : paste after cursor (e.g. <code>p</code> pastes content, but obviously requires content to have been copied previously)</li>
<li><code>P</code>    : paste before cursor (e.g. <code>P</code> pastes content, but obviously requires content to have been copied previously)</li>
<li><code>c</code>    : change (the change command deletes the selection and then puts user into INSERT mode so e.g. <code>cw</code> deletes the current word ready to have a new word entered)</li>
<li><code>i</code>    : inside of (e.g. <code>yi&quot;</code> this will (y)ank all content (i)nside of the next set of quotation marks)</li>
<li><code>a</code> : same as <code>i</code> but content comes after the cursor rather than before</li>
<li><code>b</code> : moves backwards through words</li>
<li><code>o</code> : moves cursor to the next line and jumps into insert mode</li>
<li><code>f</code>    : forward (e.g. <code>f,</code> moves to first comma. if you then press <code>;</code> you&#39;ll move to the next instance of the specified character. You can also move a set number of characters, so <code>2f,</code> will move the cursor to the second instance of a comma)</li>
<li><code>x</code>    : cut after cursor (e.g. place cursor where you want to cut a character and press <code>x</code> to cut it, ready for pasting elsewhere)</li>
<li><code>u</code>    : undo (e.g. just pressing <code>u</code> will undo the last change made)</li>
<li><code>=</code> : auto indent (e.g. pressing == will indent the current line to the correct space, corresponding to the programming language being used in the current buffer)</li>
<li><code>~</code> : replaces the case of a character (e.g. converts a to A and then back again)</li>
</ul>
<h3><a name="deleting" class="anchor" href="#deleting"><span class="header-link"></span></a>Deleting</h3>
<p>You can select multiple lines and just press <code>d</code> to delete.</p>
<p>When selecting multiple lines for deletion (e.g. <code>d5j</code>) it is better to use <code>d5d</code> as it deletes the expected number of lines.</p>
<p>For example…</p>
<pre><code><div class="highlight"><pre><span class="nx">Line</span> <span class="mi">1</span>  
<span class="nx">Line</span> <span class="mi">2</span>  
<span class="nx">Line</span> <span class="mi">3</span>  
<span class="nx">Line</span> <span class="mi">4</span>  
<span class="nx">Line</span> <span class="mi">5</span>  
<span class="nx">Line</span> <span class="mi">6</span>  
<span class="nx">Line</span> <span class="mi">7</span>  
<span class="nx">Line</span> <span class="mi">8</span>  
<span class="nx">Line</span> <span class="mi">9</span>  
<span class="nx">Line</span> <span class="mi">10</span>
</pre></div>
</code></pre>
<p>…if the cursor is on line 3 and you run <code>d4j</code> you&#39;ll end up deleting lines 3-7 but if you run <code>d4d</code> you&#39;ll delete 3-6 which visually is more likely what you intended (this is because <code>j</code> includes the current line on top of the specified number of lines to delete).</p>
<h3><a name="deleting-a-tag" class="anchor" href="#deleting-a-tag"><span class="header-link"></span></a>Deleting a tag</h3>
<p>You can also delete a piece of text and its corresponding tag: <code>dat</code> which means to [d]elete [a]round [t]ag.</p>
<p>So if you had <code>&lt;div&gt;&lt;p&gt;Some text&lt;/p&gt;&lt;/div&gt;</code> and your cursor was inside the <code>&lt;p&gt;</code> then you could delete the paragraph as well as the text &quot;Some text&quot;.</p>
<h3><a name="search-within-a-file" class="anchor" href="#search-within-a-file"><span class="header-link"></span></a>Search within a file</h3>
<p>In NORMAL mode type a forward slash <code>/</code> followed by your search term.</p>
<p>e.g. <code>/theThingImLookingFor</code> -&gt; this will automatically highlight any matches of the phrase <code>theThingImLookingFor</code> inside of the current file.</p>
<p>If you press the <code>enter</code> key the matches will stay highlighted and you can press <code>n</code> to navigate through each match (or <code>Shift+n</code> to move backwards through each match).</p>
<p>You&#39;ll notice that the search is case sensitive (which is annoying). To fix this you can put <code>\c</code> at the end of the search term to make the search case insensitive.</p>
<p>e.g. <code>/tHEeThingIMLookingFor\c</code> will still find <code>theThingImLookingFor</code></p>
<p>You can add <code>set smartcase</code> and <code>set ignorecase</code> to your <code>.vimrc</code> file which can help also.</p>
<p>Also, if you press <code>Shift+8</code> any where inside of a word then that word is selected and automatically searched within the document (note: <code>Shift+3</code> does the same but searches backwards).</p>
<h3><a name="search-and-replace" class="anchor" href="#search-and-replace"><span class="header-link"></span></a>Search and Replace</h3>
<p>You can search and replace within a file by first moving into NORMAL mode and then after pressing <code>:</code> and entering the following…</p>
<p><code>50,100s/search/replace/gc</code></p>
<p>…what this means is we limit the search range from line 50 up to line 100, we then look for the phrase <code>search</code> and we replace it with the phrase <code>replace</code>. We then use the <code>g</code> global flag which means don&#39;t stop after finding the first match. The <code>c</code> flag means don&#39;t just replace the instance, check with us first by asking us if we definitely want to carry out the replace.</p>
<p>You don&#39;t have to use the range numbers, you can just use: <code>:%s/search/replace/gc</code> (but notice, now we don&#39;t have the range we need to include a <code>%</code> at the start).</p>
<p>You can also use regular expressions which is awesome. But be aware that they don&#39;t quite match the standard regex syntax (you have to escape capture groups and word boundaries are no longer <code>\b</code> they are <code>\&lt;</code> and <code>\&gt;</code> +<a href="http://vimregex.com/">many other differences</a>). BUT you can work around this by specifying a <code>\v</code> flag before the regex.</p>
<p>So for example, if you had the string <code>foo.add(&#39;bar&#39;)</code> then you could find it with something like…</p>
<p><code>:%s/\v(\.add\(&#39;.*&#39;\))/\1/gc</code></p>
<p>…notice we&#39;re not having to escape the outer parenthesis which are capturing the entire match (you&#39;ll also notice this find and replace search doesn&#39;t actually do anything because we capture the entire match and then replace it with itself <code>\1</code>, but it gives you an example of how to use the &#39;Very Magic&#39; mode).</p>
<p>Note: You can also do a site wide search and replace using the <code>Ack</code> plug-in (e.g. add <code>Bundle &#39;mileszs/ack.vim&#39;</code> to our <code>.vimrc</code> file and run the <code>:BundleInstall</code> again). Checkout the Ack repo on GitHub to see how it works.</p>
<h3><a name="viewing-different-buffers" class="anchor" href="#viewing-different-buffers"><span class="header-link"></span></a>Viewing different buffers</h3>
<p>Our <code>.vimrc</code> maps <code>\y</code>…</p>
<p><code>map &lt;leader&gt;y :CtrlPBuffer&lt;cr&gt;</code></p>
<p>…so it shows us what the current buffer is (this allows us to jump between files within Vim).</p>
<p>Note: in Vim the <code>&lt;leader&gt;</code> key is a backslash <code>\</code></p>
<h3><a name="change-list" class="anchor" href="#change-list"><span class="header-link"></span></a>Change list</h3>
<p>Vim remembers all points where an edit was made when within INSERT mode and stores them in a &#39;change list&#39;.</p>
<p>To view the change list run the command <code>:changes</code>. This will display a list of edits you made along with the number of its place in the list.</p>
<p>To access a specific change position run <code>:changes n</code> (where <code>n</code> is the number of the change position you&#39;re interested in). Moving to a previous change position doesn&#39;t undo the changes but instead just moves the cursor to that position. The reason why this is a good feature to have in Vim is because it allows you to jump around your file a lot more quickly and easily and can help to speed up your editing.</p>
<p>To sequentially move back and forth between the change list points use the commands:</p>
<p><code>g;</code> - prev<br><code>g,</code> - next</p>
<h3><a name="jump-list" class="anchor" href="#jump-list"><span class="header-link"></span></a>Jump list</h3>
<p>Similar to the &#39;change list&#39; feature, there is also a &#39;jump list&#39; which allows you to move back and forth between all cursor positions.</p>
<p>You can view all cursor positions by running the command <code>:jumps</code>.</p>
<p>To move to a previous cursor position use <code>ctrl-o</code> and to move forward use <code>ctrl-i</code>.</p>
<h3><a name="diff-tool" class="anchor" href="#diff-tool"><span class="header-link"></span></a>Diff Tool</h3>
<p>Vim comes with a built-in diff tool (useful for comparing the same file for changes).</p>
<p>Open two Vim windows in a split (so you see them both on screen at the same time).</p>
<p>Then within each window run the command <code>:diffthis</code>. You&#39;ll see any differences between the files highlighted for you along with their line number.</p>
<p>When you scroll the file then Vim will keep the scrolling in sync across both files.</p>
<p>To turn off the diff tool then run <code>:diffoff</code> in any one of the windows.</p>
<h3><a name="code-comments" class="anchor" href="#code-comments"><span class="header-link"></span></a>Code Comments</h3>
<p>The following commands use the <code>vim-commentary.git</code> plugin…</p>
<p><code>gcc</code> = comment out a line (or <code>\\\</code>)<br><code>gcu</code> = uncomment the commented line (you can do <code>gcc</code> as a toggle)</p>
<p>When you select multiple lines to comment out you can just use <code>gc</code> (rather than <code>gcc</code>)</p>
<h3><a name="syntax-formatting" class="anchor" href="#syntax-formatting"><span class="header-link"></span></a>Syntax Formatting</h3>
<p>You can set the formatting of a file using <code>:setf</code></p>
<p>e.g. <code>:setf cucumber</code> (where <code>cucumber</code> is a syntax format installed)</p>
<h3><a name="auto-indenting" class="anchor" href="#auto-indenting"><span class="header-link"></span></a>Auto Indenting</h3>
<p>You can use the auto indent feature <code>=</code> to help you while programming.</p>
<p>To indent the entire file you can use <code>gg=G</code> which breaks down to: <code>gg</code> move to the start of the file, <code>=</code> auto indent, <code>G</code> to the end of the file.</p>
<p>You can auto indent a single line: <code>==</code></p>
<p>You can auto indent a code block (while inside of it): <code>=i{</code></p>
<p>You can auto indent a code block (while outside of it by first moving to either the opening or closing curly bracket): <code>=%</code>. Note: to move to the curly bracket keep pressing <code>%</code> (it&#39;ll move to either curly or parenthesis, which ever is first it&#39;ll stop there and then toggle between the opening/closing bracket, so you may need to manually navigation to the curly bracket and then run <code>=%</code>).</p>
<h3><a name="run-terminal-commands-within-vim" class="anchor" href="#run-terminal-commands-within-vim"><span class="header-link"></span></a>Run terminal commands within Vim</h3>
<p>Running the prefix command and then typing <code>:!{terminal command}</code> allows you to run terminal commands from within Vim (e.g. <code>:!pwd</code> shows us the current working directory).</p>
<p>Note: doing this takes you out of Vim so you can see the results, but if you just press <code>ENTER</code> you&#39;ll be sent back into Vim.</p>
<h3><a name="suspend-vim" class="anchor" href="#suspend-vim"><span class="header-link"></span></a>Suspend Vim</h3>
<p>Another way to run terminal commands while Vim is running is to actually suspend Vim.</p>
<p>If you run the prefix command this will take us back to the terminal to run whatever commands we like and then in the terminal just type <code>fg</code> to bring Vim back to the (f)ore (g)round.</p>
<h3><a name="visual-block-mode" class="anchor" href="#visual-block-mode"><span class="header-link"></span></a>Visual Block Mode</h3>
<p><code>Ctrl+v</code> puts us into Visual Block mode which allows us to select single columns and make multiple changes. So for example if you have a long list of items such as…</p>
<pre><code><div class="highlight"><pre><span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">1</span>  
<span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">2</span>  
<span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">3</span>  
<span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">4</span>  
<span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">5</span>
</pre></div>
</code></pre>
<p>…if you wanted to remove the opening <code>_</code> underscore then you could enter Visual Block mode, select the underscores by using the direction keys (make sure you&#39;re on the first or last underscore when you enter Visual Block mode) and then after all are selected just press <code>d</code> to delete them.</p>
<p>Note: you might find you have an issue with editing multiple lines using insert mode. To use insert mode inside of Visual Block mode is to use <code>Shift+i</code> to jump into insert mode (just typing <code>i</code> doesn&#39;t work as that would throw you into the standard INSERT mode, so it&#39;ll remove you from Visual Mode).</p>
<p>Also you can press <code>c</code> to change multiple lines, but remember that your change only appears to have been made to one line until you escape Visual Mode, then Vim will kick in and apply the change to all other selected lines.</p>
<h3><a name="vim-windows" class="anchor" href="#vim-windows"><span class="header-link"></span></a>Vim Windows</h3>
<p>As well as having panes and windows within tmux you can create Windows within Vim (this is useful for times when you just want to do some quick hacking and tmux is too much effort -&gt; if you could believe such a thing).</p>
<p>To create a new window in Vim (which is the same concept as a &#39;pane&#39; in tmux) you can either <code>Ctrl-s</code> to create a horizontal split screen (or run the command <code>:split</code>, or just <code>:sp</code>). You can also create a vertical split screen using <code>Ctrl-v</code> (or run the command <code>:vsplit</code>, or just <code>:vsp</code>).</p>
<p>Note: if you use the execute command (i.e. <code>:</code> variation) then you can specify a file&#39;s path to be opened, otherwise Vim will automatically open the window pointing to a new buffer that is the same as the currently opened file (useful for viewing different portions of the same, but very long, file).</p>
<p>You can create as many windows as you like (e.g. windows within a window).</p>
<p>To resize a window&#39;s height you can use <code>Ctrl-w</code> then <code>-</code> or <code>+</code>. You can also use the command <code>:resize -N</code> or <code>:resize +N</code> (where <code>N</code> is the number to move by).</p>
<p>To resize a window&#39;s width you can use <code>Ctrl-w</code> then <code>&lt;</code> or <code>&gt;</code>. You can also use the command <code>:vertical resize -N</code> or <code>:vertical resize +N</code> (where <code>N</code> is the number to move by).</p>
<p>To maximise the height of the window then use <code>Ctrl-w</code> then <code>_</code>.</p>
<p>To maximise the width of the window then use <code>Ctrl-w</code> then <code>|</code>.</p>
<p>Finally, to close all windows use <code>:only</code> (which closes all the windows except the current one, where by you can just run <code>:q</code>)</p>
<h3><a name="repeating-yourself" class="anchor" href="#repeating-yourself"><span class="header-link"></span></a>Repeating Yourself</h3>
<p>Vim is designed to help you be as efficient as possible whilst editing so here is a little tip...</p>
<p>If you need to repeat an edit you just made within INSERT mode then use the <code>.</code> command. </p>
<p>For example, imagine you have the text &quot;this is text&quot; and you wanted to have the first letter of each word capitalised. </p>
<p>You could first move to the start of the line <code>0</code> and then use the &#39;toggle casing&#39; command <code>~</code> and then run the command <code>w.</code> twice which means you would: (<code>w</code>) move the cursor to the next word and then (<code>.</code>) repeat the last edit.</p>
<h3><a name="making-life-easier-changing-case" class="anchor" href="#making-life-easier-changing-case"><span class="header-link"></span></a>Making life easier (changing case)</h3>
<p>Now imagine you have the word &quot;THIS&quot; and you wanted to only have the first letter of each word capitalised. </p>
<p>Rather than manually rewrite each word, move your cursor to the start of the line and run <code>lve~</code>. </p>
<p>That will (<code>l</code>) move the cursor to the right, (<code>v</code>) select (<code>e</code>) to the end of the word and then (<code>~</code>) switch that selection&#39;s casing (so in this instance it&#39;ll change to lowercase).</p>
<p>Whenever you need to make repetitive changes try and think of how you can best utilise Vim to your advantage.</p>
<h3><a name="keep-to-the-basics" class="anchor" href="#keep-to-the-basics"><span class="header-link"></span></a>Keep to the basics</h3>
<p>The above commands quite literally do not even scratch the surface of what&#39;s available within Vim.</p>
<p>So the best thing to do is to find a comfortable set of commands from the list above and don&#39;t deviate from them until you&#39;ve got them memorised (it&#39;s ok to Google for something you don&#39;t know, but try to just focus on the basic commands for now).</p>
<h2><a name="vim-configuration" class="anchor" href="#vim-configuration"><span class="header-link"></span></a>Vim Configuration</h2>
<p>Let&#39;s now take a quick look at some configuration options we can add to our <code>.vimrc</code> file…</p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="s2">&quot; switch syntax highlighting on, when the terminal has colors</span>
<span class="s2">syntax on</span>

<span class="s2">&quot;</span> use vim, not vi api
<span class="nb">set </span>nocompatible

<span class="s2">&quot; no backup files</span>
<span class="s2">set nobackup</span>

<span class="s2">&quot;</span> no write backup
<span class="nb">set </span>nowritebackup

<span class="s2">&quot; no swap file</span>
<span class="s2">set noswapfile</span>

<span class="s2">&quot;</span> <span class="nb">command history</span>
<span class="nb">set history</span><span class="o">=</span>100

<span class="s2">&quot; always show cursor</span>
<span class="s2">set ruler</span>

<span class="s2">&quot;</span> show incomplete commands
<span class="nb">set </span>showcmd

<span class="s2">&quot; incremental searching</span>
<span class="s2">set incsearch</span>

<span class="s2">&quot;</span> highlight search
<span class="nb">set </span>hlsearch

<span class="s2">&quot; ignore case in search</span>
<span class="s2">set smartcase</span>

<span class="s2">&quot;</span> clear search buffer
:nnoremap § :nohlsearch&lt;cr&gt;

<span class="s2">&quot; make sure undo history is kept for files in buffer.</span>
<span class="s2">set hidden</span>

<span class="s2">&quot;</span> turn indentation on
filetype indent on

<span class="s2">&quot; enable filetype plugins</span>
<span class="s2">filetype plugin on</span>

<span class="s2">&quot;</span> disable folding because it is evil
<span class="nb">set </span>nofoldenable

<span class="s2">&quot; turn word wrap off</span>
<span class="s2">set nowrap</span>

<span class="s2">&quot;</span> scroll with more context
<span class="nb">set </span><span class="nv">scrolloff</span><span class="o">=</span>10

<span class="s2">&quot; allow backspace to delete end of line, indent and start of line characters</span>
<span class="s2">set backspace=indent,eol,start</span>

<span class="s2">&quot;</span> convert tabs to spaces
<span class="nb">set </span>expandtab

<span class="s2">&quot; set tab size</span>
<span class="s2">set tabstop=4</span>

<span class="s2">&quot;</span> the number of spaces inserted <span class="k">for </span>a tab
<span class="nb">set </span><span class="nv">shiftwidth</span><span class="o">=</span>4

<span class="s2">&quot; turn on line numbers</span>
<span class="s2">set number</span>

<span class="s2">&quot;</span> highlight tailing whitespace
<span class="nb">set </span>list <span class="nv">listchars</span><span class="o">=</span>tab:<span class="se">\ \ </span>,trail:·

<span class="s2">&quot; get rid of the delay when pressing O (for example)</span>
<span class="s2">&quot;</span> http://stackoverflow.com/questions/2158516/vim-delay-before-o-opens-a-new-line
<span class="nb">set </span>timeout <span class="nv">timeoutlen</span><span class="o">=</span>1000 <span class="nv">ttimeoutlen</span><span class="o">=</span>100

<span class="s2">&quot; always show status bar</span>
<span class="s2">set laststatus=2</span>

<span class="s2">&quot;</span> <span class="nb">set </span>the status line to something useful
<span class="nb">set </span><span class="nv">statusline</span><span class="o">=</span>%f<span class="se">\ </span>%<span class="o">=</span>L:%l/%L<span class="se">\ </span>%c<span class="se">\ </span><span class="o">(</span>%p%%<span class="o">)</span>

<span class="s2">&quot; hide the toolbar</span>
<span class="s2">set guioptions-=T</span>

<span class="s2">&quot;</span> utf encoding
<span class="nb">set </span><span class="nv">encoding</span><span class="o">=</span>utf-8

<span class="s2">&quot; autoload files that have changed outside of vim</span>
<span class="s2">set autoread</span>

<span class="s2">&quot;</span> jump to last cursor
autocmd BufReadPost *
  <span class="se">\ </span><span class="k">if </span>line<span class="o">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="o">)</span> &gt; 0 <span class="o">&amp;&amp;</span> line<span class="o">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="o">)</span> &lt;<span class="o">=</span> line<span class="o">(</span><span class="s2">&quot;$&quot;</span><span class="o">)</span> <span class="p">|</span>
  <span class="se">\ </span>  exe <span class="s2">&quot;normal g`\&quot;&quot;</span> <span class="p">|</span>
  <span class="se">\ </span>endif

<span class="s2">&quot; set-up ctrlp to include hidden files in its search</span>
<span class="s2">let g:ctrlp_show_hidden=1</span>

<span class="s2">&quot;</span> disable ctrlp<span class="s1">&#39;s feature where it tries to intelligently work out the current working directory to search within</span>
<span class="s1">let g:ctrlp_working_path_mode=0</span>

<span class="s1">&quot; don&#39;</span>t <span class="nb">let </span>ctrlp take over the screen!
<span class="nb">let </span>g:ctrlp_max_height<span class="o">=</span>30

<span class="s2">&quot; lets make sure we don&#39;t show these files</span>
<span class="s2">set wildignore+=*/.git/*,*/.hg/*,*/.svn/*.,*/.DS_Store</span>

<span class="s2">&quot;</span> allows us to more easily work with markdown files
Bundle <span class="s1">&#39;tpope/vim-markdown&#39;</span>

<span class="s2">&quot; allows us to comment/uncomment lines and content</span>
<span class="s2">Bundle &#39;tpope/vim-commentary.git&#39;</span>

<span class="s2">&quot;</span> remove whitespace on save
autocmd BufWritePre * :%s/<span class="se">\s\+</span><span class="nv">$/</span>/e
</pre></div>
</code></pre>
<p>…hopefully the comments are self explanatory. There is so much you can configure with Vim that you just need to take the time to look at what set-up works for you, as chances are you&#39;ll be able to change it.</p>
<p>You can find loads of Vim configurations on GitHub where you can pinch ideas and settings from.</p>
<h2><a name="other-plugins" class="anchor" href="#other-plugins"><span class="header-link"></span></a>Other plugins</h2>
<p>Here are some other really useful plugins worth your time investigating… </p>
<ul>
<li>Sparkup (ZenCoding/Emmet) <a href="http://net.tutsplus.com/tutorials/other/vim-essential-plugin-sparkup/">NetTuts Screencast</a> -&gt; uses <code>Ctrl+e</code> to generate the HTML</li>
<li>Snipmate <a href="http://net.tutsplus.com/tutorials/other/vim-essential-plugin-snipmate/">NetTuts Screencast</a> -&gt; uses a <code>tab</code> to convert the keywords into the relevant snippet of HTML</li>
</ul>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>So there you have it. A painfully short introduction to using Vim as your new web development environment. But hopefully enough to get you started.</p>
<p>Vim is so powerful that it would probably take a life time to really cover everything. It just takes dedication.</p>
]]></description><link>http://www.integralist.co.uk/posts/a-guide-to-getting-started-with-vim/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/a-guide-to-getting-started-with-vim/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 08 Sep 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Imager.js (BBC News responsive images solution)]]></title><description><![CDATA[<h2><a name="what-well-cover" class="anchor" href="#what-well-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 4mins</em></p>
<ul>
<li>Introduction</li>
<li>What&#39;s the gist?</li>
<li>Anything more technical you can tell us?</li>
<li>So it&#39;s open-sourced and ready to use right?</li>
<li>What&#39;s left to do?</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction" class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>Previously <a href="http://twitter.com/tmaslen">Tom Maslen</a> wrote a quick summary of the <a href="http://responsivenews.co.uk/post/50092458307/images">responsive image loading strategy</a> used by BBC News. This post resulted in a lot of interest from the development community and so we wanted to follow up with another quick post which explored in more detail the actual implementation of this approach.</p>
<p><a href="http://twitter.com/addyosmani">Addy Osmani</a> from the Google Chrome team recently contacted us to express his interest in the technique we are using and so we decided it would be a good idea to go the open-source route and release a version of our approach so the developer community could benefit from an alternative solution to the responsive image problem (especially considering the pre-existing proposed specifications for &#39;srcset&#39; and the &#39;Picture&#39; element aren&#39;t yet widely implemented and the currently available polyfills aren&#39;t quite up to scratch yet either).</p>
<p>The original code was written back in 2011 (and was also heavily tied into the BBC infrastructure) so the first thing we needed to do was <a href="https://gist.github.com/Integralist/6157139">rewrite the code so it could more easily be understood</a> and then we could start work on open-sourcing it and improving it.</p>
<p>Moving forward we aim to collaborate further with Addy and the rest of the community on getting the process automated using the popular front-end JavaScript task runner <a href="http://gruntjs.com/">Grunt</a>.</p>
<h2><a name="whats-the-gist" class="anchor" href="#whats-the-gist"><span class="header-link"></span></a>What&#39;s the gist?</h2>
<p>It&#39;s pretty simple really…</p>
<ol>
<li>Wherever you want an image to appear you use a <code>&lt;div&gt;</code></li>
<li>You give it a <code>class</code> and <code>data-src</code>, <code>data-width</code> attributes</li>
<li>Load and run the Imager.js code (we use a predetermined list of image sizes, but these are specific to BBC News and so can be changed to match your own requirements)</li>
<li>Imager replaces the div&#39;s with a transparent 1x1 Base64 encoded image.</li>
<li>Imager then replaces those with the most appropriately sized image (based on the current image and the user&#39;s screen dimensions and see if they correlate to our list of available image sizes).</li>
<li>Imager set-ups a resize event listener to check whether the image needs to be replaced with another more appropriately sized image.</li>
</ol>
<p>…fundamentally, that&#39;s it.</p>
<h2><a name="anything-more-technical-you-can-tell-us" class="anchor" href="#anything-more-technical-you-can-tell-us"><span class="header-link"></span></a>Anything more technical you can tell us?</h2>
<p>The way we determine what size image to place onto the page is by taking the current screen width and then looking at the &#39;rendered&#39; size of our image (using <code>myImageElement.clientWidth</code>). We then check if the rendered image size approximately matches one of the sizes available in our predefined list of image dimensions. Once we have a match we then parse the current image URL (which if using a RESTful format would look something like <code>http://your-image-service.com/horse/100/</code> -&gt; and would return an image of a horse 100px wide), finally we replace the width in the URL with the new replacement width and update the image source to load that more appropriately sized image based from the new RESTful URL we set as the image source.</p>
<p>The code for Imager.js is quite small and pretty self explanatory (considering the break-down of the process listed above), so rather than me repeat the code line for line just <a href="https://gist.github.com/Integralist/6229170">take a look here</a>.</p>
<h2><a name="so-its-open-sourced-and-ready-to-use-right" class="anchor" href="#so-its-open-sourced-and-ready-to-use-right"><span class="header-link"></span></a>So it&#39;s open-sourced and ready to use right?</h2>
<p>It&#39;s open-sourced <a href="https://github.com/BBC-News/Imager.js/"><a href="https://github.com/BBC-News/Imager.js/">https://github.com/BBC-News/Imager.js/</a></a> and is usable but it currently relies on users having their own RESTful image service.</p>
<p>For the purpose of providing a simple demonstration we used the 3rd party service <a href="http://placehold.it/">Placehold.it</a>.</p>
<h2><a name="whats-left-to-do" class="anchor" href="#whats-left-to-do"><span class="header-link"></span></a>What&#39;s left to do?</h2>
<p>Well, there are many things we want to do with Imager but the next step is to try and automate the process using <a href="http://gruntjs.com/">Grunt</a> and to supply a simple server-side script that helps users experiment with the code more easily.</p>
<p>But the beauty of the open-source community means we&#39;ve already had a member of the <a href="http://yeoman.io/">Yeoman</a> team contributing code that helps cache the generation of images, as well as improve performance by replacing the use of <code>setTimeout</code> with a polyfill for <code>requestAnimationFrame</code> (not to mention some other small refactorings).</p>
<h2><a name="conclusion" class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>Here at BBC News we have found this approach provides us a good flexible foundation to incorporate responsive images without resorting to un-stable and un-implemented official solutions or polyfills. </p>
<p>Is this the <em>best</em> solution available today? Unlikely. But the more choice developers have at their disposal the better.</p>
<p>If you have any questions then feel free to open an issue on the Imager.js <a href="https://github.com/BBC-News/Imager.js/">GitHub repo</a>.</p>
]]></description><link>http://www.integralist.co.uk/posts/imager-js-bbc-news-responsive-images-solution/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/imager-js-bbc-news-responsive-images-solution/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Wed, 14 Aug 2013 00:00:00 GMT</pubDate></item></channel></rss>