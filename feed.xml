<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Integralist: BBC News Engineer]]></title><description><![CDATA[I aim to implement Object-Oriented Design principles in which ever language I happen to be using (Node, Ruby, PHP, JavaScript, CSS/BEM)]]></description><link>http://www.integralist.co.uk/</link><generator>RSS for Node</generator><lastBuildDate>Fri, 08 Nov 2013 10:52:44 GMT</lastBuildDate><atom:link href="http://www.integralist.co.uk/feed.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Mark McDonnell]]></author><pubDate>Fri, 08 Nov 2013 10:52:44 GMT</pubDate><copyright><![CDATA[2013 Mark McDonnell]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[mark.mcdx@gmail.com]]></managingEditor><webMaster><![CDATA[mark.mcdx@gmail.com]]></webMaster><ttl>60</ttl><item><title><![CDATA[MVCP: Model, View, Controller, Presenter]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 8mins</em></p>
<ul>
<li>Introduction<ul>
<li>Model</li>
<li>View</li>
<li>Controller</li>
</ul>
</li>
<li>Mixed definitions<ul>
<li>God Controller</li>
<li>Problems</li>
<li>Skinny Controller</li>
</ul>
</li>
<li>Presenters?<ul>
<li>What problem are Presenters trying to solve?</li>
<li>How do they work?</li>
</ul>
</li>
<li>Code Example<ul>
<li>Controller</li>
<li>View</li>
<li>Presenter</li>
</ul>
</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>Model, View, Controller (MVC). This is a pretty standard architectural pattern and has been in use when developing software since the early 1970&#39;s.</p>
<p>The basic principle of the pattern is to separate the different areas of logic from your application into distinct compartments.</p>
<h3><a name="model"class="anchor" href="#model"><span class="header-link"></span></a>Model</h3>
<p>The model holds your business data. Typically this will be data that is pulled in from a database or external data service of some kind.</p>
<h3><a name="view"class="anchor" href="#view"><span class="header-link"></span></a>View</h3>
<p>The view is your user interface. This is what the client will interact with when using your application.</p>
<h3><a name="controller"class="anchor" href="#controller"><span class="header-link"></span></a>Controller</h3>
<p>The controller is the boss. He sits at the top and delegates responsibilities to either the view or the model.</p>
<h2><a name="mixed-definitions"class="anchor" href="#mixed-definitions"><span class="header-link"></span></a>Mixed definitions</h2>
<p>There seems to be a dispute in the dev community regarding how the responsibilities should be divided.</p>
<p>Some feel a &#39;fat controller&#39; principle is best (where by the controller tells the model not only <em>when</em> but <em>where</em> and <em>how</em> it should get its data).</p>
<p>My understanding of the pattern is that it was designed so that the Controller stays &#39;skinny&#39;. It may be the boss, but like most good bosses it doesn&#39;t try and stay in control. It knows the best team member for the job at hand and delegates accordingly.</p>
<p>This is also good code design because the Controller doesn&#39;t have too much <em>context</em> (i.e. it doesn&#39;t know everything, which means it&#39;ll be easier to maintain and scale).</p>
<h3><a name="god-controller"class="anchor" href="#god-controller"><span class="header-link"></span></a>God Controller</h3>
<p>There are a few ways we can implement an MVC pattern, one is known as the &#39;God Controller&#39;. </p>
<p>This is where a single Controller exists and it oversees everything no matter what was requested by the client. </p>
<p>For example, the single Controller would be passed the request from the client (usually handled by a custom routing application, and most frameworks will provide their own).</p>
<p>The Controller would determine what type of request was made (if the request was for a &#39;contact&#39; page then it&#39;ll make a request for the Contact model, or if the request was for the &#39;about&#39; page then it&#39;ll make a request for the About model).</p>
<p>Once it knows the type of request it&#39;ll proceed to get the relevant model data and assign it to some View variables and render the required View.</p>
<h3><a name="problems"class="anchor" href="#problems"><span class="header-link"></span></a>Problems</h3>
<p>Now there are two problems with this implementation:</p>
<ol>
<li>maintainability</li>
<li>scalability</li>
</ol>
<p>As mentioned before, this comes down to bad code design. The &#39;God Controller&#39; knows too much and tries to do too much. Once you start getting above a few different types of requests you&#39;ll start to understand what a mess the code can become by having multiple branches for different routing scenarios.</p>
<p>I work as an engineer for the BBC News team in London and we had suffered from this exact set-up (hence the lessons the team has learnt and improved upon are the reason why I&#39;m able to write this post for you now).</p>
<h3><a name="skinny-controller"class="anchor" href="#skinny-controller"><span class="header-link"></span></a>Skinny Controller</h3>
<p>There is another approach we can take which is known as the &#39;skinny controller&#39; approach.</p>
<p>The way it works is that a request will come into the application and will get passed to a page specific Controller.</p>
<p>The page specific Controller will call the relevant Model and will assign the returned data to a few View variables.</p>
<p>The Controller will then render a View and pass through the variables into the View for it to use.</p>
<p>As you can see, this isn&#39;t that different from the &#39;God Controller&#39; with the exception that the Routing part of the application now will have extra logic which determines which specific Controller should be loaded. This is a better situation to be in because you&#39;re making your code base both more maintainable and scalable.</p>
<p>Note: as I mentioned in the previous section, BBC News had a sort of &#39;God Controller&#39; issue and our first step to resolving the problem was to take a similar approach as described above (i.e. to start creating page specific Controllers). That was a good first step. </p>
<p>The next step from here was to separate out our logic even further by implementing Presenters, and it was our tech lead at BBC News (<a href="http://twitter.com/jcleveley">John Cleveley</a>) who made that decision which resulted in a much more efficient, maintainable and scalable code base.</p>
<h2><a name="presenters"class="anchor" href="#presenters"><span class="header-link"></span></a>Presenters</h2>
<h3><a name="what-problem-are-presenters-trying-to-solve-"class="anchor" href="#what-problem-are-presenters-trying-to-solve-"><span class="header-link"></span></a>What problem are Presenters trying to solve?</h3>
<p>Let&#39;s imagine we&#39;ve gone for the &#39;Skinny Controller&#39; approach. There are still some inherent issues… </p>
<p>First of all, our Controller can still have too much context and be handling more information than it should. </p>
<p>But also, and more importantly, you may find there is still a lot of duplication of code across your Controllers.</p>
<p>The reasoning for this is that if you consider the structure of a web page/application you&#39;ll notice that it is typically made up of unique &#39;features&#39;. For example, if you&#39;re displaying your tweets on a page then that&#39;s a unique feature.</p>
<p>Each feature must be able to stand on its own. We normally describe these features as being &#39;components&#39;. Each component can be loaded whenever and wherever needed. Having a component based architecture allows your code base to become more modular and reusable.</p>
<p>For example the navigation menu on a page could be considered a &#39;component&#39;. Also, the navigation menu component is likely going to need to appear on every single page of the application.</p>
<p>So, if you&#39;re splitting up your logic into page specific Controllers then it&#39;s possible that you&#39;re still repeating code across the Controllers to handle the loading of re-occurring components such as the navigation (e.g. pulling its data from a navigation Model and setting View variables etc).</p>
<p>Now there are ways that this code repetition can be avoided, and one such way is to use the concept of Presenters.</p>
<h3><a name="how-do-they-work-"class="anchor" href="#how-do-they-work-"><span class="header-link"></span></a>How do they work?</h3>
<p>Presenters (like everything in software engineering) can be implemented in many different ways. </p>
<p>For example, at BBC News we initially were manually creating new Presenter instances within our page Controllers. But the team here are quite clever chaps (especially <a href="http://twitter.com/kenturamon">Robert Kenny</a> and <a href="http://twitter.com/sthulb">Simon Thulbourn</a>) and they realised that this process could be greatly improved by using configuration files instead (specifically <a href="http://yaml.org/">YAML</a>). As we have multiple teams working on the BBC News code base and in multiple languages, using configuration files is a much easier and maintainable solution.</p>
<p>I&#39;m not going to go into the configuration set-up we use at BBC News. Instead I&#39;ll focus on the basic principles of how Presenters work, which is quite simply a case of moving the logic (getting component specific Model data and assigning it to to component specific variables) into separate files called Presenters which you can instantiate within your controller.</p>
<h2><a name="code-example"class="anchor" href="#code-example"><span class="header-link"></span></a>Code Example</h2>
<h3><a name="controller"class="anchor" href="#controller"><span class="header-link"></span></a>Controller</h3>
<p>Here is a basic example in Ruby…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;app/presenters/a&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;app/presenters/b&#39;</span>

<span class="k">class</span> <span class="nc">AboutController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="no">Presenters</span><span class="o">::</span><span class="n">A</span><span class="o">.</span><span class="n">new</span>
    <span class="vi">@b</span> <span class="o">=</span> <span class="no">Presenters</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span>

    <span class="n">title</span> <span class="s1">&#39;About&#39;</span>
    <span class="n">erb</span> <span class="ss">:about</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…in this example we have an &#39;About&#39; page which is made up of two components <code>a</code> and <code>b</code>. As you can see we <code>require</code> the presenters which handle those two components and within our Controller we instantiate the Presenters.</p>
<p>Notice that&#39;s all we do. Each Presenter encapsulates the logic needed to prepare the data to be passed to the <code>:about</code> view template.</p>
<h3><a name="view"class="anchor" href="#view"><span class="header-link"></span></a>View</h3>
<p>Before I show you the Presenter code itself, I&#39;ll show you the View template file… </p>
<pre><code class="lang-erb"><div class="highlight"><pre><span class="x">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="x">&lt;/h1&gt;</span>

<span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@a</span><span class="o">.</span><span class="n">run</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">partial</span> <span class="ss">:&quot;components/a&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="vi">@a</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="ss">:summary</span> <span class="o">=&gt;</span> <span class="vi">@a</span><span class="o">.</span><span class="n">summary</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="vi">@a</span><span class="o">.</span><span class="n">data</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>

<span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@b</span><span class="o">.</span><span class="n">run</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">partial</span> <span class="ss">:&quot;components/b&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="vi">@b</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="vi">@b</span><span class="o">.</span><span class="n">age</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</pre></div>
</code></pre>
<p>…as you can see we have very minimal logic in place. If anything I have too much logic in the View as I initially was re-using the same View template over and over and so I wanted to protect again errors appearing when loading a template which referenced a component I wasn&#39;t loading, but I&#39;ve since changed how my application was working but left the conditional checks in as an example of how code can evolve over time.</p>
<p> We literally just check to see if the component has been initialised (in this case we created a <code>run</code> property we set to <code>true</code> when the component&#39;s Presenter is first initialised).</p>
<p>We then render the View for the component and pass through the variables that were set-up from within the Presenter.</p>
<p>Now I can also open up my <code>:home</code> View file and add in the <code>a</code> component there as well just as easily. It would be even easier if I didn&#39;t have to manually add the <code>a</code> component to the <code>:home</code> View file but that&#39;s where running from configuration files like we do at BBC News would come in handy (but that would have been too complicated an implementation for the sake of such a basic example as required for this post).</p>
<h3><a name="presenter"class="anchor" href="#presenter"><span class="header-link"></span></a>Presenter</h3>
<p>Now let&#39;s take a look at one of our Presenters, in this case the Presenter for our <code>b</code> component… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;app/presenters/base&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;app/models/b&#39;</span>

<span class="k">class</span> <span class="nc">Presenters</span><span class="o">::</span><span class="n">B</span> <span class="o">&lt;</span> <span class="no">Presenters</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">attr_reader</span> <span class="ss">:run</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@run</span> <span class="o">=</span> <span class="kp">true</span>

    <span class="n">model</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Mark&#39;</span><span class="p">,</span> <span class="s1">&#39;99&#39;</span><span class="p">)</span>
    <span class="n">prepare_view_data</span><span class="p">({</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="n">model</span><span class="o">.</span><span class="n">age</span> <span class="p">})</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…as you can see we load a specific Model for this component and then generate our View data by passing the Model information through to a <code>prepare_view_data</code> method (see below for the implementation details).</p>
<p>The <code>Base</code> Presenter which our component Presenters inherit from is very straight forward as you can see from the following example… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">module</span> <span class="nn">Presenters</span>
  <span class="k">class</span> <span class="nc">Base</span>
    <span class="kp">attr_accessor</span> <span class="ss">:model</span>

    <span class="k">def</span> <span class="nf">prepare_view_data</span> <span class="nb">hash</span>
      <span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
        <span class="nb">instance_variable_set</span><span class="p">(</span><span class="s2">&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…it&#39;s just a module namespace with a base class that has a single method <code>prepare_view_data</code> which dynamically generates instance variables based on the data we passed through from the inheriting Presenter class and which then are usable within the View.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>That&#39;s all there is to it as far as understanding the Presenter pattern. It&#39;s a nice clean solution for componentising your different page features and keeping your code more easily maintainable.</p>
<p>I&#39;ve created a repo on GitHub called <a href="https://github.com/Integralist/MVCP">MVCP</a> which is written in <a href="https://www.ruby-lang.org/">Ruby</a> and uses the <a href="http://www.sinatrarb.com/">Sinatra</a> web framework. Note: I had some help from my colleague <a href="http://twitter.com/sthulb">Simon</a> in cleaning up and refactoring some of the code (it may only have been minor changes but as with all good refactorings it made a massive difference to the quality of the code, so thanks to him for helping out).</p>
<p>If you have any questions then feel free to contact me either here on <a href="http://twitter.com/integralist">twitter</a> and let me know your thoughts.</p>
]]></description><link>http://www.integralist.co.uk/posts/mvcp-model-view-controller-presenter/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/mvcp-model-view-controller-presenter/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Tue, 22 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[SQLite and ActiveRecord]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 14mins</em></p>
<ul>
<li>Introduction</li>
<li>SQLite</li>
<li>ActiveRecord</li>
<li>Installation</li>
<li>Set-up</li>
<li>Schema</li>
<li>Creating<ul>
<li>Association</li>
<li>Record Creation</li>
</ul>
</li>
<li>Querying</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>This was intended to be a quick post about how to use the embedded relational database &quot;<a href="http://www.sqlite.org/">SQLite</a>&quot; with a Ruby/Sinatra application but will also include information on incorporating the ActiveRecord pattern as well.</p>
<p>We&#39;ll look at installing and setting up SQLite and incorporating the ActiveRecord pattern using the open-source library of the same name (which is included as part of the <a href="http://rubyonrails.org/">Ruby on Rails Framework</a>).</p>
<h2><a name="sqlite"class="anchor" href="#sqlite"><span class="header-link"></span></a>SQLite</h2>
<p>Typically if you&#39;re developing an application in Ruby using the <a href="http://rubyonrails.org/">Ruby on Rails framework</a> then you&#39;ll use SQLite in development and then switch over to another database for production (maybe <a href="http://www.mysql.com/">MySQL</a> or <a href="http://www.postgresql.org/">PostgreSQL</a>). </p>
<p>What most people don&#39;t realise is that if you have a low traffic website then SQLite is fine to use. </p>
<p>The only thing to be aware of when using SQLite in production is that it inherently isn&#39;t designed to scale. To help clarify, the author of SQLite had this to say on the subject… </p>
<blockquote>
<p>SQLite usually will work great as the database engine for low to medium traffic websites. The amount of web traffic that SQLite can handle depends, of course, on how heavily the website uses its database. Generally speaking, any site that gets fewer than 100K hits/day should work fine with SQLite. The 100K hits/day figure is a conservative estimate, not a hard upper bound. SQLite has been demonstrated to work with 10 times that amount of traffic.</p>
<p>SQLite will normally work fine as the database backend to a website. But if your website is so busy that you are thinking of splitting the database component off onto a separate machine, then you should definitely consider using an enterprise-class client/server database engine instead of SQLite.</p>
</blockquote>
<h2><a name="activerecord"class="anchor" href="#activerecord"><span class="header-link"></span></a>ActiveRecord</h2>
<p>So most Ruby developers will know of <a href="http://guides.rubyonrails.org/active_record_querying.html">ActiveRecord</a> but may not realise that it&#39;s actually an architectural pattern and the term was originally coined by <a href="http://martinfowler.com/">Martin Fowler</a> (a legend in the field of software engineering and data modeling).</p>
<p>The pattern describes how to provide an Interface that lets the user interact with a relational database in a more user friendly fashion rather than constructing their own SQL queries.</p>
<p>We&#39;ll be using Ruby on Rails&#39; implementation of the pattern which they&#39;ve extracted into an external library/module (so it&#39;s not specifically reliant on the Ruby on Rails framework if you&#39;re using something more lightweight like Sinatra).</p>
<h2><a name="installation"class="anchor" href="#installation"><span class="header-link"></span></a>Installation</h2>
<p>There are a couple of things we need to do:</p>
<ol>
<li>Install the SQLite libraries</li>
<li>Install the SQLite Ruby module</li>
<li>Install the ActiveRecord Ruby module</li>
</ol>
<p>So if you have <a href="http://brew.sh/">Homebrew</a> installed then you can simply run <code>brew install sqlite</code>.</p>
<p>Note: you may need to run <code>brew --force link</code> afterwards, as a much older version of SQLite is already installed on the Mac OS and so the OS will attempt to load that first.</p>
<p>To install the ruby module just run <code>gem install sqlite3</code></p>
<p>To install the ActiveRecord ruby module just run <code>gem install activerecord</code></p>
<h2><a name="command-line-tool"class="anchor" href="#command-line-tool"><span class="header-link"></span></a>Command Line Tool</h2>
<p>Once the SQLite libraries are installed you will have access to a command line tool that lets you directly inspect the contents of a SQLite database file.</p>
<p>For example, if you have a database file called <code>test.db</code> then you can run <code>sqlite3 test.db</code> to open the database.</p>
<p>You can then run SQL commands against the database such as <code>select * from tableName;</code> (notice the semicolon at the end <code>;</code> you&#39;ll need this otherwise the command won&#39;t know when it is considered completed, the plus side is that you can write complex SQL queries across multiple lines).</p>
<h2><a name="set-up"class="anchor" href="#set-up"><span class="header-link"></span></a>Set-up</h2>
<p>Imagine we have a single file <code>sqlite-example.rb</code> with the following content… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;database.log&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">))</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span>
  <span class="ss">:adapter</span>  <span class="o">=&gt;</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span>
  <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s1">&#39;example.db&#39;</span>
<span class="p">)</span>
</pre></div>
</code></pre>
<p>…so let&#39;s analyse what this script is doing.</p>
<p>First thing we&#39;re doing is loading the SQLite module.</p>
<p>Second, ActiveRecord allows us to specify a recipient for any log information. In this instance we store any log information into a file called <code>database.log</code>. We could also send the log information directly to the terminal screen using <code>Logger.new(STDERR)</code> instead.</p>
<p>Thirdly, we actually connect to the SQLite database. ActiveRecord has adapters for multiple databases and so here we specify we&#39;re using SQLite and that we want to connect to the <code>example.db</code> database. We could store data all in memory if we wanted (e.g. it wouldn&#39;t persist after the application has finished running), we do this by changing to…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s1">&#39;:memory:&#39;</span>
</pre></div>
</code></pre>
<h2><a name="schema"class="anchor" href="#schema"><span class="header-link"></span></a>Schema</h2>
<p>As you should probably already know, we need to define a Schema for our database. Because although we&#39;re using an ActiveRecord interface we&#39;re still interacting with a relational database underneath that layer.</p>
<p>A Schema helps dictate in code what the structure of the database should be and what the different columns/rows and data types should be used.</p>
<p>To do this we&#39;ll add… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
  <span class="k">unless</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tables</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;albums&#39;</span>
    <span class="n">create_table</span> <span class="ss">:albums</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span>     <span class="ss">:string</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:performer</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">unless</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tables</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;tracks&#39;</span>
    <span class="n">create_table</span> <span class="ss">:tracks</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:album_id</span><span class="p">,</span>     <span class="ss">:integer</span> <span class="c1"># foreign key &lt;table-name-singular&gt;_id (i.e. this is the primary key from the &#39;albums&#39; table)</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:track_number</span><span class="p">,</span> <span class="ss">:integer</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span>        <span class="ss">:string</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…as you might be able to tell, we&#39;re doing a couple of things.</p>
<p>First we&#39;re defining a new Schema.</p>
<p>Second, we&#39;re creating two tables: <code>albums</code> and <code>tracks</code> (we wrap the creation of the tables in a condition so we make sure we don&#39;t cause any errors by trying to create a table that already exists). Also, the convention is to name the tables as plurals (notice we don&#39;t call it <code>album</code> or <code>track</code> as they&#39;ll be holding multiples of that data).</p>
<p>Thirdly, inside of the table creation we&#39;re specifying specific columns and what their data types should be.</p>
<p>When we create a table a &quot;<a href="http://en.wikipedia.org/wiki/Primary_key">primary key</a>&quot; is automatically created for us and is named after the table. So in this instance we have two primary keys created for us: <code>albums_id</code> and <code>tracks_id</code> (notice the naming convention of <code>tableName_id</code> - singular, not plural).</p>
<p>Inside the <code>tracks</code> table you&#39;ll see the first column we create is actually a &quot;<a href="http://en.wikipedia.org/wiki/Foreign_key">foreign key</a>&quot; because we&#39;re creating a column which is named after the <code>albums</code> table&#39;s primary key (<code>album_id</code>).</p>
<h2><a name="creating"class="anchor" href="#creating"><span class="header-link"></span></a>Creating</h2>
<p>The ActiveRecord pattern is based on conventions, so in this instance we&#39;ll create two new classes that inherit from ActiveRecord&#39;s base class and we&#39;ll use these two classes for creating new records for each table… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tracks</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Track</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:album</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;In Utero&#39;</span><span class="p">)</span>
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
    <span class="ss">:title</span>     <span class="o">=&gt;</span> <span class="s1">&#39;In Utero&#39;</span><span class="p">,</span>
    <span class="ss">:performer</span> <span class="o">=&gt;</span> <span class="s1">&#39;Nirvana&#39;</span>
  <span class="p">)</span>

  <span class="n">track_listing</span> <span class="o">=</span> <span class="o">[</span>
    <span class="kp">nil</span><span class="p">,</span>
    <span class="s1">&#39;Serve the Servants&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Scentless Apprentice&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Heart-Shaped Box&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Rape Me&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Frances Farmer&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Dumb&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Very Ape&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Milk It&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Pennyroyal Tea&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Radio Friendly Unit Shifter&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Tourettes&#39;</span><span class="p">,</span>
    <span class="s1">&#39;All Apologies&#39;</span>
  <span class="o">]</span>

  <span class="n">track_listing</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="n">index</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">===</span> <span class="mi">0</span> <span class="c1"># skip zero index</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">)</span>
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
    <span class="ss">:title</span>     <span class="o">=&gt;</span> <span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">,</span>
    <span class="ss">:performer</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tool&#39;</span>
  <span class="p">)</span>

  <span class="n">track_listing</span> <span class="o">=</span> <span class="o">[</span>
    <span class="kp">nil</span><span class="p">,</span>
    <span class="s1">&#39;The Grudge&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Eon Blue Apocalypse&#39;</span><span class="p">,</span>
    <span class="s1">&#39;The Patient&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Mantra&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Schism&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Parabol&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Parabola&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Ticks &amp; Leeches&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Lateralus&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Disposition&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Reflection&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Triad&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Faaip de Oiad&#39;</span>
  <span class="o">]</span>

  <span class="n">track_listing</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="n">index</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">===</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…OK, so there are a couple of things worth noting here:</p>
<p>When we inherit from <code>ActiveRecord::Base</code> our class is mapped to a table of the same name. So for example our class <code>Album</code> is mapped to the <code>albums</code> table.</p>
<p>Also, as we&#39;re inheriting from the ActiveRecord Base class, we don&#39;t need to specify attributes (for example, inside our Tracks class) such as <code>:title</code> or <code>:track_number</code> within our class, as they will be indirectly inferred from the Schema we defined earlier and will come from that table which the class is mapped to.</p>
<h3><a name="association"class="anchor" href="#association"><span class="header-link"></span></a>Association</h3>
<p>You&#39;ll notice within the <code>Album</code> class we call a <code>has_many</code> method (provided through the inheritance chain via <code>ActiveRecord::Base</code>) which sets up the association between &#39;albums&#39; and &#39;tracks&#39;.</p>
<p>Similarly, within the <code>Track</code> class we call <code>belongs_to</code> and tell it that our tracks belong to the &#39;albums&#39; table. We should only do this when the class/table holds the foreign key for the table we&#39;re saying it belongs to. In this case our &#39;Track&#39; class holds the foreign key that points to the &#39;albums&#39; table.</p>
<h3><a name="record-creation"class="anchor" href="#record-creation"><span class="header-link"></span></a>Record Creation</h3>
<p>Finally we actually create some records to insert into each table.</p>
<p>We call a <code>create</code> method like so…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</pre></div>
</code></pre>
<p>…which is equivalent to… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">);</span>
<span class="n">album</span><span class="o">.</span><span class="n">save</span>
</pre></div>
</code></pre>
<p>…so it saves us a little extra typing (which is nice).</p>
<p>You&#39;ll also notice that when we create a new <code>Album</code> instance we can access and create new <code>Tracks</code> as well (via the <code>album</code> instance: <code>album.tracks.create(…)</code>). This is because we&#39;ve made an association within the top level classes between Albums and Tracks.</p>
<p>In my example I&#39;m trying to be a bit smarter by not repeating the same chunk of code over and over. So rather than doing… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span>
<span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>
<span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>
<span class="c1">#…rinse repeat…</span>
</pre></div>
</code></pre>
<p>…instead, I create the track listing as an <code>Array</code> and then loop the Array creating new records. </p>
<p>The only additional logic I need is to avoid including the <code>[0]</code> item in the Array which I do using <code>album.tracks.create(…) unless index === 0</code>. </p>
<p>The reason I avoid it is simply because track listings on albums always start at <code>1</code> where as our Array is zero-indexed.</p>
<h2><a name="querying"class="anchor" href="#querying"><span class="header-link"></span></a>Querying</h2>
<p>Now in my example code you&#39;ll find me wrapping certain chunks in <code>begin/rescue</code> as my example isn&#39;t made to work when accessed multiple times (<em>it&#39;s just a silly example to demonstrate how to connect, populate and query data using ActiveRecords</em>). So don&#39;t worry about those aspects and instead just focus on the APIs I&#39;m using. Specifically…</p>
<h3><a name="-find-"class="anchor" href="#-find-"><span class="header-link"></span></a><code>find</code></h3>
<p>This allows you to find a record by ID. So <code>Album.find(1)</code> would return the first album in the table. <code>Album.find(1).tracks.length</code> would then tell you the number of tracks that particular album held.</p>
<h3><a name="-find_by-"class="anchor" href="#-find_by-"><span class="header-link"></span></a><code>find_by</code></h3>
<p>This is actually a very intelligent method. It is based on conventions again, so <code>find_by_title</code> maps to a standard <code>find_by</code> method but passes through <code>title</code> as the attribute we&#39;re interested in searching within: <code>Album.find_by_title(&#39;La-te-ra-lus&#39;)</code></p>
<h3><a name="-all-"class="anchor" href="#-all-"><span class="header-link"></span></a><code>all</code></h3>
<p>This is an alias for <code>find(:all)</code>. So <code>Album.all</code> would return all records found within the &#39;Album` table.</p>
<h3><a name="-where-"class="anchor" href="#-where-"><span class="header-link"></span></a><code>where</code></h3>
<p>This is a conditional that maps to SQL&#39;s <code>where</code> clause. So <code>Track.where(title: &#39;Triad&#39;)</code> would return the record(s) within the Track database whose <code>title</code> attribute contained the value <code>Triad</code>. You can do more complicated filters such as: <code>Table.where(user_name: user_name, password: password).first</code> which safely sanitises your input and checks two different attributes and then returns the first record found (in case there are multiples).</p>
<h3><a name="-first-"class="anchor" href="#-first-"><span class="header-link"></span></a><code>first</code></h3>
<p>We&#39;ve seen this used already and works in a similar way to how Ruby&#39;s <code>first</code> property works (it returns the first item found).</p>
<h3><a name="-last-"class="anchor" href="#-last-"><span class="header-link"></span></a><code>last</code></h3>
<p>Same as <code>first</code> but returns the last item found.</p>
<h3><a name="-delete-"class="anchor" href="#-delete-"><span class="header-link"></span></a><code>delete</code></h3>
<p>Once you&#39;ve found a record then you can delete it using this method. So <code>Album.first.delete</code> would find the first record in the <code>Album</code> table and then delete that record.</p>
<h3><a name="-save-"class="anchor" href="#-save-"><span class="header-link"></span></a><code>save</code></h3>
<p>You can modify records by first locating them and simply assigning a new value to them, but you would then use the <code>save</code> method to store that update back to the database: <code>track = Track.where(title: &#39;yolo&#39;).first.title = &#39;Blah&#39;; track.save</code></p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>So we&#39;ve not delved too deeply (as there is far too much to cover in one post) but hopefully this has been a good starting point for you.</p>
<p>The complete code I was using looks like this… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;database.log&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">))</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span>
  <span class="ss">:adapter</span>  <span class="o">=&gt;</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span>
  <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s1">&#39;example.db&#39;</span>
<span class="p">)</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
  <span class="k">unless</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tables</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;albums&#39;</span>
    <span class="n">create_table</span> <span class="ss">:albums</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span>     <span class="ss">:string</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:performer</span><span class="p">,</span> <span class="ss">:string</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">unless</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tables</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;tracks&#39;</span>
    <span class="n">create_table</span> <span class="ss">:tracks</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:album_id</span><span class="p">,</span>     <span class="ss">:integer</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:track_number</span><span class="p">,</span> <span class="ss">:integer</span>
      <span class="n">table</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span>        <span class="ss">:string</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tracks</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Track</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:album</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;In Utero&#39;</span><span class="p">)</span>
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
    <span class="ss">:title</span>     <span class="o">=&gt;</span> <span class="s1">&#39;In Utero&#39;</span><span class="p">,</span>
    <span class="ss">:performer</span> <span class="o">=&gt;</span> <span class="s1">&#39;Nirvana&#39;</span>
  <span class="p">)</span>

  <span class="n">track_listing</span> <span class="o">=</span> <span class="o">[</span>
    <span class="kp">nil</span><span class="p">,</span>
    <span class="s1">&#39;Serve the Servants&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Scentless Apprentice&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Heart-Shaped Box&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Rape Me&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Frances Farmer&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Dumb&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Very Ape&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Milk It&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Pennyroyal Tea&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Radio Friendly Unit Shifter&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Tourettes&#39;</span><span class="p">,</span>
    <span class="s1">&#39;All Apologies&#39;</span>
  <span class="o">]</span>

  <span class="n">track_listing</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="n">index</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">===</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">)</span>
  <span class="n">album</span> <span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
    <span class="ss">:title</span>     <span class="o">=&gt;</span> <span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">,</span>
    <span class="ss">:performer</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tool&#39;</span>
  <span class="p">)</span>

  <span class="n">track_listing</span> <span class="o">=</span> <span class="o">[</span>
    <span class="kp">nil</span><span class="p">,</span>
    <span class="s1">&#39;The Grudge&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Eon Blue Apocalypse&#39;</span><span class="p">,</span>
    <span class="s1">&#39;The Patient&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Mantra&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Schism&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Parabol&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Parabola&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Ticks &amp; Leeches&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Lateralus&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Disposition&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Reflection&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Triad&#39;</span><span class="p">,</span>
    <span class="s1">&#39;Faaip de Oiad&#39;</span>
  <span class="o">]</span>

  <span class="n">track_listing</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
    <span class="n">album</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:track_number</span> <span class="o">=&gt;</span> <span class="n">index</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span> <span class="o">===</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">begin</span>
  <span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">length</span> <span class="c1"># 13 (on first run of this script it&#39;s fine, but next run we&#39;ve deleted the record)</span>
<span class="k">rescue</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span>
  <span class="nb">p</span> <span class="s1">&#39;We just rescued a &quot;RecordNotFound&quot; error&#39;</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">tracks</span><span class="o">.</span><span class="n">length</span> <span class="c1"># 14</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;La-te-ra-lus&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">title</span> <span class="c1"># &quot;La-te-ra-lus&quot;</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;Very Ape&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">album_id</span> <span class="c1"># 1</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">all</span> <span class="c1"># ActiveRecord::Relation =&gt; complete set of database records</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">length</span> <span class="c1"># 2</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">all</span> <span class="c1"># ActiveRecord::Relation =&gt; complete set of database records</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Triad&#39;</span><span class="p">)</span> <span class="c1"># ActiveRecord::Relation =&gt; single record</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">track_number</span><span class="p">:</span> <span class="mi">6</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span><span class="p">)</span> <span class="c1"># returns tracks 6 to 8 from all albums</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">first</span> <span class="c1"># returns first record (calling `Album.find(:first|:last) is deprecated`)</span>
<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">last</span> <span class="c1"># returns last record</span>

<span class="k">if</span> <span class="no">Album</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span>
  <span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">delete</span> <span class="c1"># delete the first record</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="no">Album</span><span class="o">.</span><span class="n">all</span> <span class="c1"># now we&#39;ll see there is only one record remaining</span>

<span class="n">track_to_be_modified</span> <span class="o">=</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;The Grudge&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
<span class="n">track_to_be_modified</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Grudgeola&#39;</span>
<span class="n">track_to_be_modified</span><span class="o">.</span><span class="n">save</span>
<span class="nb">p</span> <span class="n">track_to_be_modified</span> <span class="c1"># displays modified record</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;The Grudge&#39;</span><span class="p">)</span> <span class="c1"># empty Array (not found as we&#39;ve overridden the original record)</span>
<span class="nb">p</span> <span class="no">Track</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Grudgeola&#39;</span><span class="p">)</span> <span class="c1"># displays Array of records found (only one, the modified record)</span>
</pre></div>
</code></pre>
<p>But remember this was just a quick introduction to the concepts of the ActiveRecord pattern (and using it with a SQLite database). There are <em>many</em> different querying methods available via ActiveRecord so do get stuck into the API documentation to see what other goodies are at your disposal. </p>
<p>If you don&#39;t use/like Ruby then as I said previously: there are many different adaptations of the ActiveRecord pattern so look out for implementations in your language of choice.</p>
]]></description><link>http://www.integralist.co.uk/posts/sqlite-and-activerecord/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/sqlite-and-activerecord/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Fri, 11 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Unix Commands]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 15mins</em></p>
<ul>
<li>Introduction</li>
<li>Basics<ul>
<li>What directory am I currently in?</li>
<li>How can I see what&#39;s in this directory?</li>
<li>Moving around</li>
<li>Display content of a file</li>
<li>Copy a file</li>
<li>Move a file</li>
<li>Rename a file</li>
<li>Delete a file</li>
<li>Delete a directory</li>
</ul>
</li>
<li>Grep (Searching for patterns)</li>
<li>Sed (Find and Replace)</li>
<li>Awk (Looping Logic)</li>
<li>Piping I/O<ul>
<li>Input and Output</li>
<li>Redirection</li>
<li>Piping</li>
<li>Piping examples</li>
</ul>
</li>
<li>Miscellaneous Commands<ul>
<li>tee</li>
<li>dig</li>
<li>ps</li>
<li>xargs</li>
<li>cut</li>
</ul>
</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>The unix command line has a hundred or so commands, and a small majority of those you can realistically find yourself using on a regular basis. In this post I want to cover some common commands that can actually be quite useful to you.</p>
<p>Shell commands aren&#39;t something you can cover in one post. Entire books have been written on the subject. So don&#39;t expect anything other than the bare bone basics here, which should hopefully give you enough of an understanding to take your own learning forward.</p>
<p>So let&#39;s begin… </p>
<h2><a name="basics"class="anchor" href="#basics"><span class="header-link"></span></a>Basics</h2>
<p>OK, so I&#39;ll assume you have absolutely no prior command line experience which means we need to start at the basics.</p>
<p>So, first things first: open up your shell (if you&#39;re on a Mac then this will be your <code>Terminal.app</code> application.</p>
<h3><a name="what-directory-am-i-currently-in-"class="anchor" href="#what-directory-am-i-currently-in-"><span class="header-link"></span></a>What directory am I currently in?</h3>
<p><code>pwd</code> - this stands for &quot;Print Working Directory&quot;</p>
<h3><a name="how-can-i-see-what-s-in-this-directory-"class="anchor" href="#how-can-i-see-what-s-in-this-directory-"><span class="header-link"></span></a>How can I see what&#39;s in this directory?</h3>
<p><code>ls</code> - this tells the shell to list out any files or folders in the current working directory.</p>
<p>You can also tell the command a directory path you want it to look inside of: <code>ls ~/Desktop</code> (this will list all files and folders on your desktop).</p>
<p><code>ls -l</code> - the <code>-l</code> flag tells the command to stack the list when it prints its output to the shell.</p>
<p><code>ls -la</code> - this is a combination of the previous flag and the <code>-a</code> flag which means &quot;show all files&quot; (by this I mean, it&#39;ll show you hidden files).</p>
<h3><a name="moving-around"class="anchor" href="#moving-around"><span class="header-link"></span></a>Moving around</h3>
<p>To move around your file system you use the &#39;change directory&#39; command <code>cd</code>.</p>
<p>So: <code>cd ~/Desktop</code> will put you in the Desktop.</p>
<p>You can also use relative paths such as <code>cd ../</code> which will take you up one level from wherever you happen to be.</p>
<h3><a name="displaying-content-of-a-file"class="anchor" href="#displaying-content-of-a-file"><span class="header-link"></span></a>Displaying content of a file</h3>
<p>The <code>cat</code> command is a concatenation command, meaning that if you ran <code>cat original.txt new.txt</code> it would display on your screen the combination of the content from both files specified.</p>
<p>So, with that understanding we can use <code>cat original.txt</code> (i.e. specifying just a single file) to show the contents of that file.</p>
<h3><a name="let-s-copy-a-file"class="anchor" href="#let-s-copy-a-file"><span class="header-link"></span></a>Let&#39;s copy a file</h3>
<p>To copy a file we need the <code>cp</code> command, and we tell it what file to copy and where to copy it to.</p>
<p>So: <code>cp ~/Downloads/test.txt ~/Desktop/test.txt</code> will copy the file <code>test.txt</code> (which is inside our &#39;Downloads&#39; folder) and put the copy on our Desktop.</p>
<h3><a name="let-s-move-a-file"class="anchor" href="#let-s-move-a-file"><span class="header-link"></span></a>Let&#39;s move a file</h3>
<p>To move a file you need the <code>mv</code> command, and we tell it what file to move and where to move it to.</p>
<p>So: <code>mv ~/Downloads/test.txt ~/Desktop/test.txt</code> will move the file <code>test.txt</code> from our &#39;Downloads&#39; folder onto our &#39;Desktop&#39;.</p>
<h3><a name="let-s-rename-a-file"class="anchor" href="#let-s-rename-a-file"><span class="header-link"></span></a>Let&#39;s rename a file</h3>
<p>There is no <code>rename</code> command on Unix (although there is in Linux) and so we need to use a trick, the trick being to use the <code>mv</code> command.</p>
<p>So: <code>mv ~/Downloads/test.txt ~/Downloads/new.txt</code> will actually rename the file <code>test.txt</code> to <code>new.txt</code> as we&#39;ve moved the file into the same directory it was already in but with a different name (effectively acting like we renamed it)</p>
<h3><a name="let-s-delete-a-file"class="anchor" href="#let-s-delete-a-file"><span class="header-link"></span></a>Let&#39;s delete a file</h3>
<p>To delete a file we need the &#39;remove&#39; command <code>rm</code>.</p>
<p>So: <code>rm ~/Downloads/test.txt</code> will delete our <code>test.txt</code> file.</p>
<h3><a name="let-s-delete-a-directory"class="anchor" href="#let-s-delete-a-directory"><span class="header-link"></span></a>Let&#39;s delete a directory</h3>
<p>To delete a folder we need the &#39;remove&#39; command <code>rm</code> again but this time we need to pass in a couple of flags to the command.</p>
<p>The first flag is <code>-f</code> which means &#39;force&#39; the removal (otherwise if you try to remove a folder then the shell will try and prevent this as it&#39;ll assume you&#39;ve made a mistake, and deleting a whole folder could be a big mistake if you&#39;re not careful).</p>
<p>The second flag is <code>-r</code> which means &#39;recursively&#39;. So you&#39;ll recursively delete files within the folder.</p>
<p>So: <code>rm -rf ~/Desktop/some-folder</code> will delete our <code>some-folder</code> folder on the Desktop.</p>
<h2><a name="grep-searching-for-patterns-"class="anchor" href="#grep-searching-for-patterns-"><span class="header-link"></span></a>Grep (Searching for patterns)</h2>
<p>Grep is a command that lets you find a pattern (either a string or a regular expression) inside of a file or list of files.</p>
<p>So: <code>grep &#39;something&#39; test.txt</code> looks for the word &#39;something&#39; inside of the file <code>test.txt</code>.</p>
<p>To use grep on a directory of files then we need to use an additional flag: <code>-r</code> which means &#39;recursive&#39; (similar to the <code>rm</code> command we saw previously).</p>
<p>So: <code>grep -r &#39;something&#39; ~/Desktop</code> looks for the word &#39;something&#39; inside of any files on the Desktop.</p>
<h2><a name="sed-find-and-replace-"class="anchor" href="#sed-find-and-replace-"><span class="header-link"></span></a>Sed (Find and Replace)</h2>
<p>The <code>sed</code> command stands for (S)tream (Ed)itor and allows you to  read in the contents of a file and then write the modified output to another file or pipe it through to another I/O command (we&#39;ll cover piping later).</p>
<p>A basic example of its use would be: <code>sed s/day/night/ novel.txt</code></p>
<p>This replaces the first occurrence of &#39;day&#39; to &#39;night&#39;. If we wanted to replace multiple occurrences then you would need to pass a <code>g</code> flag (meaning global) to the regular expression like so: <code>sed s/day/night/g novel.txt</code></p>
<h2><a name="awk-looping-logic-"class="anchor" href="#awk-looping-logic-"><span class="header-link"></span></a>Awk (Looping Logic)</h2>
<p>The <code>awk</code> command reads in each line of a file and splits the line into fields (using whitespace - space, tab - as its default delimiter).</p>
<p>You can then execute commands for each line and reference each field.</p>
<p>A basic example of its use would be: <code>awk &#39;{ print $1 }&#39;</code> which means &quot;print the first field found in the current line&quot;.</p>
<p>So imagine you have the following <code>test.txt</code> file…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>This is my first line
This is my second line
This is my third line
</pre></div>
</code></pre>
<p>…you could print the line number followed by a specific word (in this case the second from last word on each line) using the following awk command: <code>awk &#39;{ print &quot;Line &quot; NR &quot;: &quot; $(NF-1) }&#39; test.txt</code></p>
<p>Which would display the following content on your screen… </p>
<pre><code class="lang-sh"><div class="highlight"><pre>Line 1: first
Line 2: second
Line 3: third
</pre></div>
</code></pre>
<p>Let&#39;s break this command down a little…</p>
<ul>
<li>Awk commands are placed inside of single quotes <code>awk &#39;commands go here&#39;</code>.</li>
<li>Inside the single quotes we need a set of brackets to place our specific code we want to run: <code>awk &#39;{ code to run here }&#39;</code></li>
<li>We specifically tell awk to <code>print</code> something to stdout (i.e. the terminal screen).</li>
<li>In this case we tell it to print the text &quot;Line &quot; followed by the current line number <code>NR</code>.</li>
<li>As part of the same print command we then tell it to print &quot;: &quot; followed by the second from last number.</li>
<li>To do that we use two pieces of syntax <code>$()</code> and <code>NF</code>.</li>
<li><code>NF</code> stands for (N)umber of (F)ields.</li>
<li>The <code>$()</code> wrapping around <code>NF</code> is our &#39;process substitution&#39;. This means we&#39;re not just outputting some data but manipulating it by using logic to give us 1 field back from the last, hence it needs to be wrapped in <code>$()</code></li>
</ul>
<h2><a name="piping-i-o"class="anchor" href="#piping-i-o"><span class="header-link"></span></a>Piping I/O</h2>
<p>The previous commands <code>awk</code>, <code>sed</code>, <code>grep</code> are all really useful, but it&#39;s when you can combine them that their true power shines.</p>
<h3><a name="input-and-output"class="anchor" href="#input-and-output"><span class="header-link"></span></a>Input and Output</h3>
<p>Unix is based on the principle of &quot;input&quot; and &quot;output&quot; (known as &quot;I/O&quot;). In the Shell you have <code>stdin</code> (standard input) and <code>stdout</code> (standard output).</p>
<p>By default, <code>stdin</code> is your keyboard (i.e. whatever you type into the terminal shell) and <code>stdout</code> is the terminal (i.e. your screen).</p>
<h3><a name="redirection"class="anchor" href="#redirection"><span class="header-link"></span></a>Redirection</h3>
<p>Once you understand <code>stdin</code> and <code>stdout</code> you can start to look at redirecting them.</p>
<p>For example when using the <code>sed</code> command you could use redirection to not overwrite your original file and instead direct the output <code>stdout</code> coming from the <code>sed</code> command to another file: <code>sed s/day/night/g original.txt &gt; new.txt</code></p>
<h3><a name="piping"class="anchor" href="#piping"><span class="header-link"></span></a>Piping</h3>
<p>Another way to <em>direct</em> input and output is to use pipes <code>|</code> (a vertical bar).</p>
<p>A really simple example would be: look at the <code>sed</code> command we used earlier (<code>sed s/day/night/ novel.txt</code>). Rather than actually execute it and have it make the specified change to our file <code>novel.txt</code> we could instead test the command to make sure it does what we expect it to.</p>
<p>To do that we would use the <code>cat</code> command (which we looked at previously) and pipe its output through to the <code>sed</code> command like so… </p>
<p><code>cat original.txt | sed s/day/night/g</code></p>
<p>So, to clarify how this works: we&#39;re redirecting the <code>cat</code> command&#39;s <code>stdout</code> through to the <code>sed</code> command&#39;s <code>stdin</code>. </p>
<p>In our original <code>sed</code> example we directed the <code>sed</code> command&#39;s <code>stdout</code> to an actual file (<code>novel.txt</code>), but in this case it has no <code>stdout</code> specified so it falls back to the default <code>stdout</code> which in this case is the terminal shell itself.</p>
<p>Hence the results of the <code>sed</code> command (the modified content) are displayed on your screen.</p>
<h3><a name="piping-to-vim"class="anchor" href="#piping-to-vim"><span class="header-link"></span></a>Piping to Vim</h3>
<p>One thing I discovered recently (via <a href="http://twitter.com/Pand0ra83">Crystal Hirschorn</a>) was that you can&#39;t just pipe <code>stdout</code> into Vim unless you add a hyphen/dash <code>-</code> to the end of the command like so: <code>ls | vim -</code></p>
<p>Otherwise Vim will complain that: <code>Input is not from a terminal</code></p>
<p>That&#39;s a good one to remember!</p>
<p>Also you can pipe the input into Vim in read-only mode using the <code>-R</code> flag as well: <code>ls | vim -R -</code></p>
<h3><a name="piping-examples"class="anchor" href="#piping-examples"><span class="header-link"></span></a>Piping examples</h3>
<p>Here are three real world examples I&#39;ve used recently…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>phantomjs 2&gt;<span class="p">&amp;</span>1 network-test.js <span class="p">|</span> tee log.txt
</pre></div>
</code></pre>
<p>In this example I&#39;m executing a <a href="http://phantomjs.org/">PhantomJS</a> script <code>network-test.js</code> but I wanted to capture both the results of the script (which just logs out DNS information into the terminal) and any errors that may have occurred into a log text file.</p>
<p>The way it works might be a little confusing as it shows some things you might not have seen before: <code>2&gt;&amp;1</code> and <code>tee</code>.</p>
<p>Those two commands may look confusing but it just comes down to understanding the numbers that are associated with specific processes, so…</p>
<ul>
<li><code>0</code> = <code>stdin</code></li>
<li><code>1</code> = <code>stdout</code></li>
<li><code>2</code> = <code>stderr</code></li>
</ul>
<p>…this means <code>2&gt;&amp;1</code> is saying direct <code>2</code> (any errors) through to <code>1</code> (standard output).</p>
<p>We then pipe the <code>stdout</code> through to the <code>tee</code> command which copies it into a file called <code>log.txt</code>.</p>
<pre><code class="lang-sh"><div class="highlight"><pre>ls File-* <span class="p">|</span> sed <span class="s1">&#39;s/\(File-[^-]*\)-\(.*\)/mv &amp; \1\2/&#39;</span> <span class="p">|</span> sh
</pre></div>
</code></pre>
<p>In this example I&#39;m trying to remove a hyphen <code>-</code> from some file names.</p>
<p>The files I have look like <code>File-A-B.gif</code> and I want them to be renamed to <code>File-AB.gif</code>.</p>
<p>So first I list out any files in the current directory that begin <code>File-</code> and then pipe those results through to <code>sed</code>.</p>
<p>Sed then uses Regular Expressions to store a reference to the opening part of the file name (in this case <code>File-A</code>) and then stores the end part of the file name (in this case <code>B.gif</code>).</p>
<p>In the second part of the <code>sed</code> command, instead of doing a &#39;replace&#39; of what we&#39;ve found, we actually pass in a <code>mv</code> command (remember from before that we can rename a file by using <code>mv original.txt new.txt</code>). In this case the stored references to the beginning and ending parts of the file&#39;s name can be referenced within the replacement section using <code>\1</code> and <code>\2</code> (and the <code>&amp;</code> in regular expressions means, the original string being inspected).</p>
<p>So when we use <code>mv &amp; \1\2</code> we&#39;re saying &quot;move the original file and move it to the same directory but using the new name of File-AB.gif (remember <code>\1</code> is &quot;File-A&quot; and <code>\2</code> is &quot;B.gif&quot;).</p>
<p>Finally, because the <code>sed</code> command&#39;s replacement is an actual command rather than just a string replacement we pipe that replacement content (which is now <code>sed</code>&#39;s <code>stdout</code>) over to the <code>sh</code> bin command to execute and hence actually rename the file(s).</p>
<p>Note: whenever you write a shell script, you would store it (for example) inside a file with the extension of <code>sh</code> and then you&#39;d use the terminal command <code>sh</code> to execute that shell script.</p>
<pre><code class="lang-sh"><div class="highlight"><pre>tmux ls <span class="p">|</span> cut -d : -f 1 <span class="p">|</span> xargs -I <span class="o">{}</span> tmux <span class="nb">kill</span>-session -t <span class="o">{}</span>
</pre></div>
</code></pre>
<p>So in this example I wanted an easy way to destroy all my tmux sessions. </p>
<p>Typically I would run <code>tmux ls</code> to see what sessions I had (it returns something like <code>0: 1 windows (created Fri Oct  4 18:24:38 2013) [129x33]</code>, where the opening <code>0</code> is the number/name of the session followed by details about the session -&gt; in this case <code>1 window</code>, and when it was created, and the size of that window).</p>
<p>Once I had my session number (in this case <code>0</code>) I could run the command <code>tmux kill-session -t 0</code> but if I had loads of sessions open I would have to run the same command for all of them.</p>
<p>To fix this I tried using the commands Awk and Sed but discovered an issue with &#39;scope&#39; (which I&#39;m still not 100% sure I understand, but I&#39;ll explain what happened any way)… </p>
<p>I was using <code>tmux ls | awk &#39;{print $1}&#39; | sed &#39;s/://g&#39; | xargs -I {} tmux kill-session -t {}</code>. This works, but not when you stick it inside an alias for easy reuse.</p>
<p>The way it works is that it lists out all the tmux sessions and pipes it over to Awk.</p>
<p>Awk then grabs the first field <code>0:</code> (remember Awk splits the input line into &#39;fields&#39; using a space delimiter). We then pipe that over to Sed.</p>
<p>Sed then uses a regular expression to remove the <code>:</code> from the <code>0:</code> leaving us with just <code>0</code>. We then pipe that through to xargs.</p>
<p>xargs runs our kill-session command and passes through the value of <code>0</code> into that command using the placeholder <code>{}</code>.</p>
<p>We define what the placeholder will be using <code>-I</code> so we could of used <code>-I target</code> instead if we wanted to like so: <code>tmux ls | awk &#39;{print $1}&#39; | sed &#39;s/://g&#39; | xargs -I target tmux kill-session -t target</code> and it would of achieved the same.</p>
<p>Like I say, this works. But I wanted it inside an alias so I could easily reuse it (I mean, just <em>try</em> and memorise that massive chunk of commands!?). The moment it went into an alias the xargs failed to work because instead of getting <code>0</code> it got the entire line <code>0: 1 windows (created Fri Oct  4 18:24:38 2013) [129x33]</code>. The scope of the argument was being lost some how? A bit annoying really.</p>
<p>My colleague at BBC News (<a href="http://twitter.com/sthulb">Simon Thulbourn</a> - all round command line wizard, amongst many other technical talents) helped me understand a more efficient and fully functioning version (i.e. it can be safely aliased): <code>tmux ls | cut -d : -f 1 | xargs -I {} tmux kill-session -t {}</code>.</p>
<p>So the only difference here is instead of using both Awk and Sed, we&#39;re just using Cut. I&#39;ve not mentioned it before but <code>cut</code> works like this: </p>
<p>Cut splits the input into fields (like Awk does). We then tell it that we want the fields to be split by <code>:</code> (that&#39;s the <code>-d :</code> section). Then finally we use <code>-f 1</code> to say we want the first field, which we pipe over to xargs. Otherwise the rest of the command is the same as before.</p>
<p>Nice huh!</p>
<h2><a name="miscellaneous-commands"class="anchor" href="#miscellaneous-commands"><span class="header-link"></span></a>Miscellaneous Commands</h2>
<h3><a name="-tee-"class="anchor" href="#-tee-"><span class="header-link"></span></a><code>tee</code></h3>
<p>The <code>tee</code> command you&#39;ve seen already now (in our above example) but just to reiterate its use, here is how the manual describes it… </p>
<blockquote>
<p>The tee utility copies standard input to standard output, making a copy in zero or more files.</p>
</blockquote>
<h3><a name="-dig-"class="anchor" href="#-dig-"><span class="header-link"></span></a><code>dig</code></h3>
<p>The <code>dig</code> command is used for carrying out DNS lookups: <code>dig integralist.co.uk</code> returns the DNS records found for my domain name.</p>
<h3><a name="-ps-"class="anchor" href="#-ps-"><span class="header-link"></span></a><code>ps</code></h3>
<p>The <code>ps</code> command stands for (p)rocess (s)tatus</p>
<p>It shows you all running processes on your computer.</p>
<p>You can use piping again to narrow down the results to something in particular you know is causing your computer to slow down and then execute another command to kill that process.</p>
<p>So: <code>ps aux | grep ruby</code></p>
<p>In the above example we also pass <code>aux</code> which basically specifies table of results that should be returned (see: <a href="http://en.wikipedia.org/wiki/Ps_\(Unix\"><a href="http://en.wikipedia.org/wiki/Ps_(Unix">http://en.wikipedia.org/wiki/Ps_(Unix</a>)</a>) for more information).</p>
<p>We then pipe that through to <code>grep</code> and tell it we&#39;re interested only in processes that have the text <code>ruby</code> somewhere (that way we can narrow down the results printed to the screen).</p>
<p>Finally to kill a particular process you&#39;ll need its PID number (which <code>ps aux</code> would have displayed) so locate that PID and then run <code>kill -9 xxxx</code> where <code>xxxx</code> is the PID number you want to stop.</p>
<h3><a name="-xargs-"class="anchor" href="#-xargs-"><span class="header-link"></span></a><code>xargs</code></h3>
<p>I know we&#39;ve covered Xargs already in my previous examples, but it&#39;s worth mentioning that you can also use the <code>-0</code> flag which helps with some commands that won&#39;t work when passed arguments that have spaces in them (imagine a file name with spaces). Using the <code>-0</code> flag resolves that issue.</p>
<p>Also, if the command you want to run only excepts a single argument (for example <code>echo 123</code>) then you can omit the <code>-I {}</code> placeholder definition. </p>
<h3><a name="-cut-"class="anchor" href="#-cut-"><span class="header-link"></span></a><code>cut</code></h3>
<p>Again, we&#39;ve covered Cut above already, but just to note that you can change the field delimiter using <code>-d</code> (e.g. <code>-d ,</code> would split the line on commas).</p>
<p>Also, <code>-f</code> allows a range, not just a single field index. So if you wanted fields 3 to 4 you could do <code>-f 3,4</code></p>
<p>Another feature of <code>cut</code> is the <code>-c</code> flag which cuts based on &#39;character position&#39; rather than &#39;fields&#39; like <code>-f</code> does. </p>
<p>One way you could use the <code>-c</code> flag is to remove whitespace at the start and end of a line like so… </p>
<p><code>echo &quot; xyz &quot; | cut -c 2- | rev | cut -c 2- | rev</code></p>
<p>…notice our text &quot;xyz&quot; has one character of white space at the start and end. So we specifically tell <code>cut</code> to start at character 2 <code>x</code> and cut until the end of the line <code>2-</code> and then we use the <code>rev</code> command which reverses the content so it becomes &quot; zyx&quot; and then we again cut from the 2nd character (this time <code>z</code>) and cut until the end of the line and finally we reverse the line one more time so we&#39;re back to where we were initially but with the white space removed.</p>
<p>There are probably more elegant ways to achieve this but it gives you an indication of how you might want to use a command in unique ways.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>This was a pretty fast paced run through of some different unix commands. As time goes on I&#39;ll update this post to include other commands and real work use cases that I think would be interesting and useful to those readers new to the command line.</p>
<p>If there were any errors or any thing like that then just let me know by pinging me on <a href="http://twitter.com/integralist">twitter</a>.</p>
]]></description><link>http://www.integralist.co.uk/posts/unix-commands/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/unix-commands/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Tue, 01 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Vim Workflow]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 7mins</em></p>
<ul>
<li>Introduction</li>
<li>Starting up</li>
<li>Top Pane</li>
<li>What if there isn&#39;t enough space to work in one of the panes?</li>
<li>What if you need more than three panes?</li>
<li>Why not just use Vim panes?</li>
<li>Downsides to using tmux panes?</li>
<li>Buffer lists</li>
<li>Mapping NERDTree</li>
<li>Global find and replace using Ack</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>If you saw my last post about <a href="http://integralist.co.uk/VIM.html">Vim</a> you&#39;ll see that I&#39;ve started using Vim as my main editor for development work.</p>
<p>But up until this point I had just been whimsically opening files and editing them and I realised quite quickly this wasn&#39;t going to &#39;cut it&#39; in the long run. So I wanted to show you the work flow I&#39;m currently using in my day to day life.</p>
<h2><a name="starting-up"class="anchor" href="#starting-up"><span class="header-link"></span></a>Starting up</h2>
<p>First thing first, I&#39;ve found the best way to work is to keep things simple (oh wow, that &#39;simple&#39; philosophy just keeps cropping up <em>everywhere</em> doesn&#39;t it, must be a sign! Maybe keeping things simple is the way we should do things. What a novel idea!)</p>
<p>So to achieve this let&#39;s just have two panes open.<br>One to hold our code and one to handle our terminal.</p>
<p>It&#39;ll look something like this…</p>
<div class="delayed-image-load" data-src="/images/generated/Vim-TwoPane-1024.png" data-width="1024"></div>

<p>The idea being: in my Vim pane I can then split into two panes if I really need to, like so…</p>
<div class="delayed-image-load" data-src="/images/generated/Vim-ThreePane-1024.png" data-width="1024"></div>

<p>But anything more than that then you&#39;ll want to open a new tmux window as otherwise you have too much going on.</p>
<p>To do this I run the following commands…</p>
<ol>
<li><code>tmux</code></li>
<li><code>Ctrl-b</code> (or whatever your tmux prefix command is) and then <code>Shift-&quot;</code> (to create a horizontal split pane)</li>
<li>In the bottom pane I&#39;ll <code>cd</code> into whatever directory my project is</li>
<li>Then in the bottom pane we&#39;ll run <code>Ctrl-b</code> and type <code>:resize-pane -D 5</code>** to change the height of the bottom pane</li>
<li>In the top panel I&#39;ll run <code>vim</code></li>
</ol>
<p>That&#39;s it.</p>
<p>**if I&#39;m on a large screen and not my laptop then I&#39;ll change the value from 5 to 10</p>
<h2><a name="top-pane"class="anchor" href="#top-pane"><span class="header-link"></span></a>Top Pane</h2>
<p>So as I said, the top pane is there literally to just run Vim. But because I use the <a href="https://github.com/kien/ctrlp.vim">Ctrl-P</a> plugin and Vim has been opened from the root directory of my project, I can just run a fuzzy file search using Ctrl-P to easily open up any file in my project work space. So I don&#39;t need lots of panes open as I can just keep jumping around my files really easily with fuzzy searching.</p>
<p>If for whatever reason I feel I need another file open side by side then I&#39;ll run tmux&#39;s prefix command followed by <code>Shift-5</code> to create a vertical split pane, where I can then run <code>vim</code> and again use my fuzzy file search to locate the file I want.</p>
<p>I don&#39;t open any more panes than that (3 max).</p>
<h2><a name="what-if-there-isn-t-enough-space-to-work-in-one-of-the-panes-"class="anchor" href="#what-if-there-isn-t-enough-space-to-work-in-one-of-the-panes-"><span class="header-link"></span></a>What if there isn&#39;t enough space to work in one of the panes?</h2>
<p>Just make the pane you&#39;re currently working in full screen by running <code>Ctrl-b</code> then <code>z</code>. Just run that same command again to go back to the normal pane size.</p>
<h2><a name="what-if-you-need-more-than-three-panes-"class="anchor" href="#what-if-you-need-more-than-three-panes-"><span class="header-link"></span></a>What if you need more than three panes?</h2>
<p>If I do need more than three panes then I&#39;ll just open up a new tmux window. No point over loading the screen unnecessarily. Why make your life difficult, that&#39;s what windows are there for!</p>
<h2><a name="why-not-just-use-vim-panes-"class="anchor" href="#why-not-just-use-vim-panes-"><span class="header-link"></span></a>Why not just use Vim panes?</h2>
<p>I don&#39;t use Vim&#39;s own panes. I prefer tmux&#39;s. </p>
<p>There are two reasons for this:</p>
<ol>
<li><p>If I used Vim&#39;s own panes exclusively (so all 3 panes were Vim panes) then I couldn&#39;t have the terminal running in the bottom pane. Yes I can run terminal commands either in Vim (or suspend Vim) but this isn&#39;t as nice as having a proper terminal screen running freely in the bottom pane.</p>
</li>
<li><p>Also, if I open Vim in my top pane and then decide to create a vertical split, the file in the right side <em>has</em> to be handled by Vim. I can&#39;t just split the top pane in two and do what I want in the top right pane.</p>
</li>
</ol>
<h2><a name="downsides-to-using-tmux-panes-"class="anchor" href="#downsides-to-using-tmux-panes-"><span class="header-link"></span></a>Downsides to using tmux panes?</h2>
<p><del>Yes, there is one downside to using tmux&#39;s panes which I can&#39;t seem to work around, and that is my speed is restricted.</del></p>
<p><del>By that I mean: if I move to another pane I have to wait a fraction of a second before I can use my arrow keys (or <code>hjkl</code> keys) as tmux will try to move me back to the other pane again.</del></p>
<p><del>That can be frustrating, but I&#39;m learning to live with it.</del></p>
<p><strong>UPDATE:</strong> there is a solution!</p>
<blockquote>
<p>The reason this happens is because the default bindings for the arrow keys are setup with <code>bind-key -r</code>, specifying that they may be repeated.</p>
</blockquote>
<p>So to resolve the issue you re-bind the keys without <code>-r</code>:</p>
<pre><code><div class="highlight"><pre><span class="nx">bind</span><span class="o">-</span><span class="nx">key</span> <span class="nx">Up</span>    <span class="nx">select</span><span class="o">-</span><span class="nx">pane</span> <span class="o">-</span><span class="nx">U</span>
<span class="nx">bind</span><span class="o">-</span><span class="nx">key</span> <span class="nx">Down</span>  <span class="nx">select</span><span class="o">-</span><span class="nx">pane</span> <span class="o">-</span><span class="nx">D</span>
<span class="nx">bind</span><span class="o">-</span><span class="nx">key</span> <span class="nx">Left</span>  <span class="nx">select</span><span class="o">-</span><span class="nx">pane</span> <span class="o">-</span><span class="nx">L</span>
<span class="nx">bind</span><span class="o">-</span><span class="nx">key</span> <span class="nx">Right</span> <span class="nx">select</span><span class="o">-</span><span class="nx">pane</span> <span class="o">-</span><span class="nx">R</span>
</pre></div>
</code></pre>
<h2><a name="buffer-lists"class="anchor" href="#buffer-lists"><span class="header-link"></span></a>Buffer lists</h2>
<p>In my Vim pane, as I use the CtrlP plugin to open up multiple files, I&#39;m able to jump between files really easily using its <code>:CtrlPBuffer</code> command, but I make this command quicker to access by configuring Vim to let me access the <code>:CtrlPBuffer</code> using the shortcut <code>&lt;leader&gt;y</code> (the <code>&lt;leader&gt;</code> key is a similar concept to the <code>&lt;prefix&gt;</code> key in tmux).</p>
<p>So if I want to jump back to a recently opened file then I&#39;ll just run the command <code>\y</code> (by default the <code>&lt;leader&gt;</code> key is a backslash <code>\</code>) and this will show me CtrlP&#39;s buffer list.</p>
<p>Once we have the buffer list open we can just select the file we want to re-open. This makes it really quick for jumping back and forth between two or more files we happen to be editing a lot.</p>
<p>You can configure your <code>.vimrc</code> file to use this shortcut like so: <code>map &lt;leader&gt;y :CtrlPBuffer&lt;cr&gt;</code></p>
<h2><a name="mapping-nerdtree"class="anchor" href="#mapping-nerdtree"><span class="header-link"></span></a>Mapping NERDTree</h2>
<p>I don&#39;t use NERDTree very often but when I do it&#39;s tedious so I mapped <code>map &lt;leader&gt;&#39; :NERDTreeToggle</code> so it&#39;s a lot less annoying to open and close it.</p>
<h2><a name="global-find-and-replace-using-ack"class="anchor" href="#global-find-and-replace-using-ack"><span class="header-link"></span></a>Global find and replace using Ack</h2>
<p>I like to use the <a href="https://github.com/mileszs/ack.vim">Ack plugin</a> for carrying out a global &#39;find and replace&#39; function on my files.</p>
<p>Ack is the same concept as Grep (e.g. use either a string or a Regular Expression to find a match in a list of files). But Ack has been written to be much faster than Grep**.</p>
<p>**Technically, in the background (configured within my <code>.vimrc</code> file), I alias the <code>Ack</code> command within Vim so it uses <a href="https://github.com/ggreer/the_silver_searcher">The Silver Searcher</a> instead, which has the same API as Ack but is blazingly fast (even more so than Ack!).</p>
<p>To use the plugin you simple run <code>:Ack &#39;pattern&#39; directory</code> (note: if you leave off the directory then the plugin will use the current directory).</p>
<p>Note: when you use the plugin Vim will show the results inside of a <code>Quickfix</code> pane. Navigating this pane requires a few extra commands…</p>
<ul>
<li><code>o</code> = opens the file (and puts focus on that pane)</li>
<li><code>go</code> = quick preview of the file instead (so you stay inside of the Quickfix pane)</li>
<li><code>:copen</code> = if the Quickfix pane is still open and you&#39;re not focused on it, then this command puts your focus back to that pane so you can look at the rest of the results</li>
<li><code>:ccl</code> = closes the Quickfix pane</li>
</ul>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>That&#39;s pretty much all there is to it (at the moment). If things change then I&#39;ll be sure to update this post but simplicity is the key.</p>
<p>Let me know your thoughts and how <em>you</em> do things. I&#39;m interested to know how other Vim users work.</p>
]]></description><link>http://www.integralist.co.uk/posts/vim-workflow/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/vim-workflow/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sat, 21 Sep 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[A guide to getting started with Vim]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 26mins</em></p>
<ul>
<li>Introduction</li>
<li>Here comes the old man</li>
<li>The focus of this post</li>
<li>Step 1: Installation</li>
<li>TMUX</li>
<li>TMUXinator</li>
<li>Vundle<ul>
<li>Set-up some bundles</li>
<li>Where can I find bundles?</li>
</ul>
</li>
<li>NERDTree</li>
<li>Ctrl+P</li>
<li>Vim Basics</li>
<li>Vim Configuration</li>
<li>Other plugins</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>So, what editor do you use for programming?</p>
<p>In case you&#39;re wondering, here is the list of editors I&#39;ve tried at one point or another…</p>
<ul>
<li>Homesite</li>
<li>DreamWeaver</li>
<li>NetBeans</li>
<li>Aptana</li>
<li>Coda</li>
<li>Chocolat</li>
<li>Sublime Text</li>
</ul>
<p>…and that&#39;s not including some of the real <em>random</em> editors that have cropped up over the years.</p>
<p>It seems popular editors nowadays are becoming more minimalist (oxymoron?)</p>
<p>The UI appears to be reducing in favour of keyboard short-cuts, with the intention of improving developer productivity.</p>
<p>One example of this is the use of a &#39;fuzzy keyword search&#39;. The principle idea being that you press a short-cut key and you&#39;re presented with a field where you can type whatever you like and the editor will attempt to list out a group of files that match (in some way) what you&#39;ve typed.</p>
<p>The reason this is a good thing is that it makes finding and opening files a lot quicker.</p>
<p>Imagine you don&#39;t know where a file lives (easily done in a cross team environment where other devs are working on code for a feature you&#39;re not). Fuzzy file searching makes life a lot easier.</p>
<p>Even if you <em>do</em> know where a file lives, fuzzy file searching is still quicker than reaching for your mouse, moving over to the file system and clicking on folders until you find the file and then double click to open it.</p>
<p>A lot of editors have a feature like this nowadays (Sublime Text is one such popular example).</p>
<div class="delayed-image-load" data-src="/images/generated/sublime-text-fuzzy-1024.png" data-width="1024"></div>

<p>The problem is that most editors don&#39;t normally have a long shelf life (none that any serious developer would consider using  nowadays -&gt; I&#39;m looking at Dreamweaver here**).</p>
<p>**yes I&#39;m sure they&#39;ll be some people who still use Dreamweaver and will not like that sentence, but I think it&#39;s safe to say that the developer community has grown up considerably since those early Macromedia days and developers have long since moved away to other more advanced and efficient development environments.</p>
<p>For example, the current hotness (as of 2013) is to use Sublime Text (a nice editor with good keyboard based features but also allows users to interact with it using a mouse). But what happens when Sublime Text stops getting updates (TextMate? Don&#39;t think it can&#39;t happen), or gets bought out by a competitor and then is dumped (this happens <em>all</em> the time in the software industry)?</p>
<p>Where do developers go next?
Typically developers find another editor.</p>
<h2><a name="here-comes-the-old-man"class="anchor" href="#here-comes-the-old-man"><span class="header-link"></span></a>Here comes the old man</h2>
<p>Well, there is an editor that has been around for a <em>very</em> long time and is available everywhere (and in most cases is installed by default) but also has tons of plug-ins and is pretty much the Perl of keyboard short-cuts.</p>
<p>That editor is <a href="http://en.wikipedia.org/wiki/Vi">VI</a> (well, as you&#39;ll see, more specifically Vim) and it was originally created back in 1976!</p>
<p>Since then there has been improvements to the editor which nowadays (~1981 onwards) is more commonly known as Vim (meaning: VI Improved) and you can find more information on Vim at its website <a href="http://www.vim.org/"><a href="http://www.vim.org/">http://www.vim.org/</a></a>.</p>
<h2><a name="the-focus-of-this-post"class="anchor" href="#the-focus-of-this-post"><span class="header-link"></span></a>The focus of this post</h2>
<p>OK, so the problem with Vim is that although it&#39;s a great program to use, it unfortunately has a <em>very</em> steep learning curve which puts off new comers.</p>
<p>Also, Vim by itself isn&#39;t as useful (as a development environment) without a few plug-ins that help give it a bit of jazz. That also trips up new comers to Vim as they assume what they see other developers using is <em>just</em> Vim but it&#39;s not. Vim by itself is very nondescript, it&#39;s the plug-ins and custom Vim configurations that make all the difference to the look and feel of Vim.</p>
<p>So, the key to using Vim (for the first time) as a developer tool is:</p>
<ul>
<li>Get a nice clean command line shell</li>
<li>Get ourselves a set of primary plugins installed first</li>
<li>Then focus on basic Vim commands last (typically this is considered the first step, but I think that&#39;s a mistake)</li>
</ul>
<p>I want to get the primary tools set-up first, and to show you those BEFORE we get ourselves bogged down with Vim commands.</p>
<h2><a name="step-1-installation"class="anchor" href="#step-1-installation"><span class="header-link"></span></a>Step 1: Installation</h2>
<p>I&#39;m not going to cover the installation of Vim because chances are it&#39;s already installed! Also, I&#39;m running a Mac and so this tutorial is aimed at that environment (i.e. your mileage may vary otherwise if you&#39;re on Windows or a non Unix system).</p>
<h3><a name="updating-your-vim-version-"class="anchor" href="#updating-your-vim-version-"><span class="header-link"></span></a>Updating your Vim version?</h3>
<p>If you decide you want to update your version of Vim (which when using a Mac is probably something you&#39;ll want to do as the included version is quite old).</p>
<p>You can do this by installing the latest version of Vim using <a href="http://brew.sh/">Homebrew</a>: <code>brew install vim</code>.</p>
<p>The problem you&#39;ll likely hit is that the Mac will still be using the original version of Vim.</p>
<p>Run <code>which vim</code> to see where the system is looking for Vim and if it&#39;s not running from a local user directory then you&#39;ll know it&#39;s not using the Homebrew install version. </p>
<p>So go to that directory specified by <code>which vim</code> and then rename the Vim folder (e.g. VimVersionXXXX) and then run <code>which vim</code> again and you should find that your system tries looking elsewhere for Vim and it will find the Homebrew install.</p>
<h3><a name="things-we-re-going-to-install-to-go-along-with-vim"class="anchor" href="#things-we-re-going-to-install-to-go-along-with-vim"><span class="header-link"></span></a>Things we&#39;re going to install to go along with Vim</h3>
<p>But here are the things we&#39;re going to install…</p>
<ul>
<li>Pure Zsh</li>
<li>TMUX</li>
<li>Vundle</li>
<li>NERDTree</li>
<li>Ctrl+p</li>
</ul>
<p>…now there are loads of plugins you could install but the above are the fundamental ones that you&#39;ll require (you might decide that&#39;s all you need, I&#39;ll leave it up to you to decide).</p>
<h2><a name="zsh"class="anchor" href="#zsh"><span class="header-link"></span></a>Zsh</h2>
<p>To use Vim we&#39;ll need to use a terminal shell. So let&#39;s get that open now (if you&#39;re on a Mac you&#39;ll have a Terminal.app you can run).</p>
<p>The default terminal shell for the GNU operating system, Linux and Mac OS X is &#39;Bash&#39; but we want to use &#39;Zsh&#39; instead.</p>
<p>I won&#39;t delve into the reasons why but effectively Zsh is a more efficient shell and offers better features than Bash and in general is more enjoyable to use.</p>
<p>To see what shells are available on your system you can run the command <code>cat /etc/shells</code> (hopefully you&#39;ll see <code>/bin/zsh</code> in the list).</p>
<p>To change shells run the command <code>chsh -s /bin/zsh</code>.</p>
<p>Terminal shells can be configured using (what&#39;s typically referred to as) a &#39;dot file&#39;. These are files that are prefixed with a period character and so are hidden from standard users.</p>
<p>To see the hidden files in a directory just run the command <code>ls -la</code> and you should see a whole host of hidden dot files and folders.</p>
<p>For Zsh there should be a <code>.zshrc</code> file in your home directory (if there isn&#39;t then create one, as we&#39;ll need it shortly). You can do this very simply using the command <code>touch .zshrc</code>.</p>
<p>As we&#39;ll be using Vim there should also be in the home directory a <code>.vimrc</code> file for configuring Vim. If there isn&#39;t then create one (again, we&#39;ll be needing it shortly).</p>
<h2><a name="pure-zsh"class="anchor" href="#pure-zsh"><span class="header-link"></span></a>Pure Zsh</h2>
<p>Now that we have Zsh running let&#39;s make it look a bit nicer by using &#39;Pure Zsh&#39;. I&#39;m going to let the author have the pleasure of describing it…</p>
<blockquote>
<p>Most prompts are cluttered, ugly and slow. I wanted something visually pleasing that stayed out of my way. Pretty, minimal and fast.</p>
</blockquote>
<p>So let&#39;s get it installed. Go to <a href="https://github.com/sindresorhus/pure"><a href="https://github.com/sindresorhus/pure">https://github.com/sindresorhus/pure</a></a> and download the file <code>pure.zsh</code> to your home directory (or wherever you want, just remember where you save it).</p>
<p>You can import the <code>pure.zsh</code> file by adding the following line into the <code>.zshrc</code> file: <code>. /path/to/pure.zsh</code></p>
<div class="delayed-image-load" data-src="/images/generated/pure-zsh-1024.png" data-width="1024"></div>

<h2><a name="tmux"class="anchor" href="#tmux"><span class="header-link"></span></a>TMUX</h2>
<p>So what is tmux? The authors definition is…</p>
<blockquote>
<p>It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more.</p>
</blockquote>
<p>OK, so in short tmux makes it easy for you to create new terminal windows with panes and complex layouts (stuff you can do with raw Vim but tmux makes easier).</p>
<p>There are a couple of ways to install <a href="http://tmux.sourceforge.net/">TMUX</a> the easiest is with <a href="http://brew.sh/">Homebrew</a>: <code>brew install tmux</code></p>
<p>Once you have tmux installed you can start it by simply running the command <code>tmux</code> in your terminal.</p>
<p>You may wonder if anything has actually happened because tmux doesn&#39;t look any different from what your normal terminal shell looks like, but what you don&#39;t realise is that you now have quite a few new keyboard shortcuts you can use to split your terminal into &#39;panes&#39;, &#39;windows&#39; or &#39;tabs&#39;.</p>
<div class="delayed-image-load" data-src="/images/generated/tmux-1024.png" data-width="1024"></div>

<h3><a name="prefix-"class="anchor" href="#prefix-"><span class="header-link"></span></a>Prefix?</h3>
<p>In tmux whenever you want to run a command you first run a opening command called &#39;the prefix&#39;. The prefix is typically <code>Ctrl+b</code> (i.e. press the <code>Ctrl</code> button and then the <code>b</code> key). </p>
<p>In my case I&#39;ve updated the prefix to be <code>Ctrl+a</code> instead of <code>Ctrl+b</code> via a <code>tmux.conf</code> configuration file (you&#39;ll find out more about this file in the next section &quot;tmuxinator&quot;).</p>
<h3><a name="creating-windows"class="anchor" href="#creating-windows"><span class="header-link"></span></a>Creating windows</h3>
<p>To create a new window just run the prefix command and then press the <code>c</code> key (e.g. <code>Ctrl+b</code> then <code>c</code>)</p>
<p>To close a window either run <code>exit</code> or press <code>Ctrl+d</code></p>
<h3><a name="renaming-windows"class="anchor" href="#renaming-windows"><span class="header-link"></span></a>Renaming windows</h3>
<p>You can rename a window by running the prefix command and then pressing the <code>,</code> key.</p>
<h3><a name="changing-windows"class="anchor" href="#changing-windows"><span class="header-link"></span></a>Changing windows</h3>
<p>You can move around your tmux windows using the prefix command and either <code>n</code> (for next) or <code>p</code> (for previous) or specifying a number that correlates with the window number.</p>
<h3><a name="creating-panes"class="anchor" href="#creating-panes"><span class="header-link"></span></a>Creating panes</h3>
<p>To create a new horizontal pane run the prefix command and then press <code>Shift+5</code> (the <code>%</code> key).</p>
<div class="delayed-image-load" data-src="/images/generated/tmux-horizontal-1024.png" data-width="1024"></div>

<p>To create a new vertical pane run the prefix command and then press <code>Shift+&#39;</code> (the <code>&quot;</code> key).</p>
<div class="delayed-image-load" data-src="/images/generated/tmux-vertical-1024.png" data-width="1024"></div>

<h3><a name="full-screen-a-pane"class="anchor" href="#full-screen-a-pane"><span class="header-link"></span></a>Full screen a pane</h3>
<p>At any time you can turn a pane into a full screen view (and back again) by running the prefix command followed by <code>z</code>. Run that again to toggle back to the pane view.</p>
<h3><a name="move-a-pane-into-a-different-pane-space"class="anchor" href="#move-a-pane-into-a-different-pane-space"><span class="header-link"></span></a>Move a pane into a different pane space</h3>
<p>You can actually shift the panes around so that if a pane is in one position (let&#39;s say top left), you can move it to a different location (let&#39;s say bottom right) simply by running the prefix command followed by <code>Shift+{</code>, every time you press that combination all the panes will shift around.</p>
<h3><a name="renaming-a-session"class="anchor" href="#renaming-a-session"><span class="header-link"></span></a>Renaming a session</h3>
<p>When you create a new tmux session (i.e. run <code>tmux</code>). You can opt to give it a name using <code>tmux new -s session_name</code>, but if you forget to do that and want to give the session a name later on (I do this all the time) then from within the session just run the prefix command followed by <code>Shift+4</code> (which is the <code>$</code> key) or alternatively run the prefix command followed by a <code>:</code> and then <code>rename-session -t [current-name] [new-name]</code> (if it has no current name then you&#39;ll just use the number assigned).</p>
<h2><a name="tmuxinator"class="anchor" href="#tmuxinator"><span class="header-link"></span></a>TMUXinator</h2>
<p>We&#39;re now going to set-up a tool associated with tmux called &#39;<a href="https://github.com/aziz/tmuxinator">tmuxinator</a>&#39; and this will help us manage complex tmux sessions.</p>
<p>Basically, rather than you (every day) opening up the terminal and manually creating the same set of panes and windows and opening files in tmux, we can just store these preferences as a template. We do this by creating a text file that holds this configuration information.</p>
<p>First thing to do is to install TMUXinator.</p>
<p>Sorry, but we need more technologies and this time it&#39;s Ruby.</p>
<p>To install it we need to run the command <code>gem install tmuxinator</code>.</p>
<p>Once installed we can create a new instance by running the command <code>tmuxinator new [project]</code>. You can call your project whatever you like (I went with <code>tmuxinator new work</code>).</p>
<p>Running this command is going to create a dot file <code>.tmux.conf</code> and also a dot folder called <code>.tmuxinator</code> which holds a <code>project.yml</code> (where the name of the file matches the name of the project, so for me it created a <code>work.yml</code> file).</p>
<p>If you open the yaml file you&#39;ll see it has a basic example set-up ready for you to configure…</p>
<pre><code class="lang-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test-project</span>
<span class="l-Scalar-Plain">root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">~/Code/news/workspace/</span>

<span class="l-Scalar-Plain">windows</span><span class="p-Indicator">:</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">editor</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-vertical</span>
      <span class="l-Scalar-Plain">panes</span><span class="p-Indicator">:</span>
        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vim</span>
        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">git status</span>
        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cd path/to/my/cheatsheet &amp;&amp; vim cheat-sheet.txt</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sandbox</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vagrant ssh</span>
  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">grunt watch:service:news</span>
</pre></div>
</code></pre>
<p>…above is an example of my <code>work.yml</code>.</p>
<p>You can see I specify that I want to have three tabs created:</p>
<ul>
<li>editor</li>
<li>sandbox</li>
<li>sass</li>
</ul>
<p>Within the first tab <code>editor</code> I have a specific layout used called <code>main-vertical</code> (tmux comes with many different pre-built layouts, this is just one of them).</p>
<p>The layout I&#39;m using splits the screen into two columns. In the left column I have <code>vim</code> running and in the right column I have two rows. The top row checks the status of my git repository, and the bottom row opens up a Vim cheat sheet.</p>
<p>In the second tab <code>sandbox</code> I&#39;ve told tmux I want to connect to our local development sandbox (via ssh).</p>
<p>In the third tab <code>sass</code> I&#39;ve told tmux I want to run a task that watches our Sass development files for any changes (and then compiles the files when a change is detected).</p>
<div class="delayed-image-load" data-src="/images/generated/tmuxinator-1024.png" data-width="1024"></div>

<h3><a name="starting-tmuxinator"class="anchor" href="#starting-tmuxinator"><span class="header-link"></span></a>Starting tmuxinator</h3>
<p>Now we have a template set-up, to use it we just run <code>tmuxinator start project</code> (or in my case <code>tmuxinator start work</code>).</p>
<h3><a name="closing-tmux"class="anchor" href="#closing-tmux"><span class="header-link"></span></a>Closing tmux</h3>
<p>Chances are you&#39;ll just leave the tmux session open, but if you want a quick way to detach from the tmux session (but leave the session open in the background so you can come back to it) then just run <code>Ctrl+a d</code></p>
<p>You can see what tmux sessions are still open by running <code>tmux ls</code> which will show a number and a associated session.</p>
<p>You can re-attach to an existing session by running <code>tmux attach -t {number|name}</code> where <code>{number|name}</code> is either the number or the name of the session.</p>
<p>If there is only one session then you can just run <code>tmux attach</code>.</p>
<p>To totally kill a session just run <code>tmux kill-session -t {number|name}</code>.</p>
<h2><a name="vundle"class="anchor" href="#vundle"><span class="header-link"></span></a>Vundle</h2>
<p>This is a plug-in manager for Vim.</p>
<p>To install Vundle run <code>git clone  
https://github.com/gmarik/  
vundle.git  
~/.vim/bundle/vundle</code></p>
<p>Now you have it installed, you can add plug-ins to your <code>.vimrc</code> configuration file and install them by running a <code>:BundleInstall</code> command from within Vim.</p>
<p>You can also just run <code>vim +BundleInstall</code> from the command line.</p>
<h3><a name="set-up-some-bundles"class="anchor" href="#set-up-some-bundles"><span class="header-link"></span></a>Set-up some bundles</h3>
<p>We&#39;re jumping ahead a little bit (because at the end of this section you&#39;ll see we&#39;ll be using Vim to type one command, but it&#39;s OK we won&#39;t do any more than that until later).</p>
<p>Let&#39;s open our <code>.vimrc</code> file and add some plug-ins we&#39;re going to need (code comments start with &quot;)…</p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="nb">set </span>rtp+<span class="o">=</span><span class="nv">$HOME</span>/.vim/bundle/vundle
call vundle#rc<span class="o">()</span>
Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
filetype plugin indent on

<span class="s2">&quot; ALL OF THE ABOVE IS ALSO REQUIRED</span>
<span class="s2">&quot;</span> FOR SUCCESSFUL VUNDLE INSTALL
<span class="err">&quot;</span> THE FOLLOWING IS NEW FOR US…

Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
Bundle <span class="s1">&#39;vim-scripts/The-NERD-tree&#39;</span>
</pre></div>
</code></pre>
<p>…so you may have noticed we&#39;ve specified two plug-ins:</p>
<ol>
<li>NERDTree</li>
<li>Ctrl+p</li>
</ol>
<p>If you check the Vundle README on GitHub you&#39;ll see there are multiple ways to specify a &#39;bundle&#39;, in our case we&#39;re installing two bundles that are available on GitHub so you&#39;ll notice that the paths specified are actually the GitHub username/repo-name.</p>
<p>To actually get these two bundles installed (using the Vundle plug-in) means we need to first open Vim so we can run the relevant install command.</p>
<p>So to open Vim literally just run: <code>vim</code> and then to run the install command press ESC (just to make sure you&#39;re in the right mode, don&#39;t worry we&#39;ll cover this later) then type <code>:BundleInstall</code> and press ENTER.</p>
<h3><a name="where-can-i-find-bundles-"class="anchor" href="#where-can-i-find-bundles-"><span class="header-link"></span></a>Where can I find bundles?</h3>
<p>Bundles are just pointers to Vim scripts.</p>
<p>The two bundles we&#39;ve pointed to are references to their GitHub repositories.</p>
<p>But you can also point to non-github repos, local git repos, or direct to Vim scripts. See the Vundle README for more information.</p>
<h2><a name="nerdtree"class="anchor" href="#nerdtree"><span class="header-link"></span></a>NERDTree</h2>
<p>NERDTree is a tree explorer plugin for navigating the filesystem. This is the closest thing you&#39;re going to get to a standard editor feature.</p>
<p>We&#39;ll cover how to use it in the following Vim Basics section. Suffice to say, with the <code>Ctrl+p</code> plug-in we shouldn&#39;t need to use the NERDTree very often (but sometimes it can come in handy)</p>
<h2><a name="ctrl-p"class="anchor" href="#ctrl-p"><span class="header-link"></span></a>Ctrl+p</h2>
<p>This is a fuzzy file finder so it makes it easy for you to locate files within your project by just typing a couple of characters of the files name.</p>
<p>Again, we&#39;ll cover how to use it in the following Vim Basics section.</p>
<h2><a name="vim-basics"class="anchor" href="#vim-basics"><span class="header-link"></span></a>Vim Basics</h2>
<p>So here we are! We made it to the part where we can actually use Vim!</p>
<p>Vim is all about not using the mouse, just the keyboard.</p>
<p>One of the first things to know about Vim are that it has 3 modes:</p>
<ol>
<li>NORMAL (you run the majority of your commands from this mode)</li>
<li>INSERT (you spend the least amount of time in this mode)</li>
<li>VISUAL (you select text in this mode)</li>
</ol>
<p>To switch modes you first press the <code>ESC</code> key and then either <code>i</code> to go into INSERT mode and <code>v</code> to go into VISUAL mode. The act of pressing <code>ESC</code> automatically puts you into NORMAL mode.</p>
<p>Once you&#39;re in NORMAL or VISUAL mode, to actually run a command (let&#39;s say the command we want is <code>d$</code>, don&#39;t worry what that means for now) you first press <code>:</code> followed by <code>d$</code>.</p>
<h3><a name="using-ctrl-p-to-do-fuzzy-file-searching"class="anchor" href="#using-ctrl-p-to-do-fuzzy-file-searching"><span class="header-link"></span></a>Using Ctrl+p to do fuzzy file searching</h3>
<p>Get ourselves into NORMAL mode by pressing <code>ESC</code>, followed by <code>:</code>, followed by <code>CtrlP</code> (note: for this particular plug-in, if you&#39;re already in NORMAL mode, you can just press the <code>Ctrl</code> and <code>p</code> keys together to trigger the fuzzy search to open, but to not confuse ourselves let&#39;s keep to the standard <code>:some-command</code> format).</p>
<p>Once the plug-in is open we can just start typing the name of the file we&#39;re looking for, and you&#39;ll see that it lists all the files it thinks matches what we&#39;re looking for.</p>
<p>Simply use the arrow keys to select the relevant file you want to open and press ENTER.</p>
<div class="delayed-image-load" data-src="/images/generated/ctrlp-1024.png" data-width="1024"></div>

<h3><a name="updating-ctrl-p-s-list"class="anchor" href="#updating-ctrl-p-s-list"><span class="header-link"></span></a>Updating Ctrl+P&#39;s list</h3>
<p>If you have Vim open and you add a new file then the list that Ctrl+P uses (which is cached) will be out of date. To fix this, open Ctrl+P and then press <code>F5</code> to refresh the list of files it can search for.</p>
<h3><a name="using-nerdtree-to-search-our-file-system"class="anchor" href="#using-nerdtree-to-search-our-file-system"><span class="header-link"></span></a>Using NERDTree to search our file system</h3>
<p>When Vim is open and in NORMAL mode press <code>:</code> followed by <code>NERDTreeToggle</code> this will open NERDTree at the current location. You can then use your arrow keys to move up and down the file system and press <code>ENTER</code> to open folders. Once you find a file you want to open press <code>ENTER</code> once you&#39;re cursor is on the item of interest.</p>
<div class="delayed-image-load" data-src="/images/generated/nerdtree-1024.png" data-width="1024"></div>

<h3><a name="more-commands"class="anchor" href="#more-commands"><span class="header-link"></span></a>More Commands</h3>
<p>It&#39;s worth remembering that most commands follow the format: <code>operator [number] motion</code> (not all the time, but enough of the time - you&#39;ll soon get used to the order you do things).</p>
<p>What follows is a super short list of commands and what they do.</p>
<h3><a name="cursor-movement"class="anchor" href="#cursor-movement"><span class="header-link"></span></a>Cursor Movement</h3>
<p><code>h</code>    : left<br><code>l</code>    : right<br><code>k</code>    : up<br><code>j</code>    : down</p>
<p>Note: you can use your arrow keys still, but it&#39;s considered best practice by the Vim community to get used to using the above keys rather than the arrow keys.</p>
<h3><a name="page-movement"class="anchor" href="#page-movement"><span class="header-link"></span></a>Page Movement</h3>
<p>Rather than moving up and down a file line by line, we can instead just move up and down the file in sections.</p>
<p><code>Ctrl+u</code> : move one page up<br><code>Ctrl+d</code> : move one page down<br><code>Ctrl+b</code> : move half page up<br><code>Ctrl+f</code> : move half page down</p>
<h3><a name="motions"class="anchor" href="#motions"><span class="header-link"></span></a>Motions</h3>
<p>With some commands we need to indicate what direction or motion we want to take.</p>
<p><code>e</code>    : move to the end of a word<br><code>w</code>    : move to the start of next word (use with a counter -&gt; a counter meaning &quot;a number&quot;)</p>
<p><strong>Examples</strong>:</p>
<p><code>5e</code> = move to the end of the 5th word in the sentence<br><code>5w</code> = move to the start of the word after the 5th (so actually move to the start of the 6th word)</p>
<h3><a name="operators"class="anchor" href="#operators"><span class="header-link"></span></a>Operators</h3>
<p>Here are some common operators available to use:</p>
<ul>
<li><code>0</code> : moves cursor to the start of the line</li>
<li><code>$</code> : moves cursor to the end of the line</li>
<li><code>d</code> : delete (e.g. <code>d$</code> deletes the entire line)</li>
<li><code>G</code> : go to line (e.g. <code>5G</code> takes you to the 5th line of the file)</li>
<li><code>v</code>    : select (e.g. <code>v1e</code> selects one word, the act of pressing <code>v</code> automatically sticks you in VISUAL mode)</li>
<li><code>V</code>    : select entire line (e.g. <code>V</code> selects the entire line, the act of pressing <code>v</code> automatically sticks you in VISUAL mode)</li>
<li><code>j</code>    : move down one line (e.g. <code>d5j</code> deletes 5 lines)</li>
<li><code>y</code> : copy selected text (e.g. select text and then press <code>y</code>)</li>
<li><code>yy</code>    : copy line (e.g. <code>yy</code> copies line to buffer ready to be pasted)</li>
<li><code>p</code>    : paste after cursor (e.g. <code>p</code> pastes content, but obviously requires content to have been copied previously)</li>
<li><code>P</code>    : paste before cursor (e.g. <code>P</code> pastes content, but obviously requires content to have been copied previously)</li>
<li><code>c</code>    : change (the change command deletes the selection and then puts user into INSERT mode so e.g. <code>cw</code> deletes the current word ready to have a new word entered)</li>
<li><code>i</code>    : inside of (e.g. <code>yi&quot;</code> this will (y)ank all content (i)nside of the next set of quotation marks)</li>
<li><code>a</code> : same as <code>i</code> but content comes after the cursor rather than before</li>
<li><code>o</code> : moves cursor to the next line and jumps into insert mode</li>
<li><code>f</code>    : forward (e.g. <code>f,</code> moves to first comma. if you then press <code>;</code> you&#39;ll move to the next instance of the specified character. You can also move a set number of characters, so <code>2f,</code> will move the cursor to the second instance of a comma)</li>
<li><code>x</code>    : cut after cursor (e.g. place cursor where you want to cut a character and press <code>x</code> to cut it, ready for pasting elsewhere)</li>
<li><code>u</code>    : undo (e.g. just pressing <code>u</code> will undo the last change made)</li>
<li><code>=</code> : auto indent (e.g. pressing == will indent the current line to the correct space, corresponding to the programming language being used in the current buffer)</li>
<li><code>~</code> : replaces the case of a character (e.g. converts a to A and then back again)</li>
</ul>
<h3><a name="deleting"class="anchor" href="#deleting"><span class="header-link"></span></a>Deleting</h3>
<p>You can select multiple lines and just press <code>d</code> to delete.</p>
<p>When selecting multiple lines for deletion (e.g. <code>d5j</code>) it is better to use <code>d5d</code> as it deletes the expected number of lines.</p>
<p>For example…</p>
<pre><code><div class="highlight"><pre><span class="nx">Line</span> <span class="mi">1</span>  
<span class="nx">Line</span> <span class="mi">2</span>  
<span class="nx">Line</span> <span class="mi">3</span>  
<span class="nx">Line</span> <span class="mi">4</span>  
<span class="nx">Line</span> <span class="mi">5</span>  
<span class="nx">Line</span> <span class="mi">6</span>  
<span class="nx">Line</span> <span class="mi">7</span>  
<span class="nx">Line</span> <span class="mi">8</span>  
<span class="nx">Line</span> <span class="mi">9</span>  
<span class="nx">Line</span> <span class="mi">10</span>
</pre></div>
</code></pre>
<p>…if the cursor is on line 3 and you run <code>d4j</code> you&#39;ll end up deleting lines 3-7 but if you run <code>d4d</code> you&#39;ll delete 3-6 which visually is more likely what you intended (this is because <code>j</code> includes the current line on top of the specified number of lines to delete).</p>
<h3><a name="deleting-a-tag"class="anchor" href="#deleting-a-tag"><span class="header-link"></span></a>Deleting a tag</h3>
<p>You can also delete a piece of text and its corresponding tag: <code>dat</code> which means to [d]elete [a]round [t]ag.</p>
<p>So if you had <code>&lt;div&gt;&lt;p&gt;Some text&lt;/p&gt;&lt;/div&gt;</code> and your cursor was inside the <code>&lt;p&gt;</code> then you could delete the paragraph as well as the text &quot;Some text&quot;.</p>
<h3><a name="search-within-a-file"class="anchor" href="#search-within-a-file"><span class="header-link"></span></a>Search within a file</h3>
<p>In NORMAL mode type a forward slash <code>/</code> followed by your search term.</p>
<p>e.g. <code>/theThingImLookingFor</code> -&gt; this will automatically highlight any matches of the phrase <code>theThingImLookingFor</code> inside of the current file.</p>
<p>If you press the <code>enter</code> key the matches will stay highlighted and you can press <code>n</code> to navigate through each match (or <code>Shift+n</code> to move backwards through each match).</p>
<p>You&#39;ll notice that the search is case sensitive (which is annoying). To fix this you can put <code>\c</code> at the end of the search term to make the search case insensitive.</p>
<p>e.g. <code>/tHEeThingIMLookingFor\c</code> will still find <code>theThingImLookingFor</code></p>
<p>You can add <code>set smartcase</code> and <code>set ignorecase</code> to your <code>.vimrc</code> file which can help also.</p>
<p>Also, if you press <code>Shift+8</code> any where inside of a word then that word is selected and automatically searched within the document (note: <code>Shift+3</code> does the same but searches backwards).</p>
<h3><a name="search-and-replace"class="anchor" href="#search-and-replace"><span class="header-link"></span></a>Search and Replace</h3>
<p>You can search and replace within a file by first moving into NORMAL mode and then after pressing <code>:</code> and entering the following…</p>
<p><code>50,100s/search/replace/gc</code></p>
<p>…what this means is we limit the search range from line 50 up to line 100, we then look for the phrase <code>search</code> and we replace it with the phrase <code>replace</code>. We then use the <code>g</code> global flag which means don&#39;t stop after finding the first match. The <code>c</code> flag means don&#39;t just replace the instance, check with us first by asking us if we definitely want to carry out the replace.</p>
<p>You don&#39;t have to use the range numbers, you can just use: <code>:%s/search/replace/gc</code> (but notice, now we don&#39;t have the range we need to include a <code>%</code> at the start).</p>
<p>You can also use regular expressions which is awesome. But be aware that they don&#39;t quite match the standard regex syntax (you have to escape capture groups and word boundaries are no longer <code>\b</code> they are <code>\&lt;</code> and <code>\&gt;</code> +<a href="http://vimregex.com/">many other differences</a>). BUT you can work around this by specifying a <code>\v</code> flag before the regex.</p>
<p>So for example, if you had the string <code>foo.add(&#39;bar&#39;)</code> then you could find it with something like…</p>
<p><code>:%s/\v(\.add\(&#39;.*&#39;\))/\1/gc</code></p>
<p>…notice we&#39;re not having to escape the outer parenthesis which are capturing the entire match (you&#39;ll also notice this find and replace search doesn&#39;t actually do anything because we capture the entire match and then replace it with itself <code>\1</code>, but it gives you an example of how to use the &#39;Very Magic&#39; mode).</p>
<p>Note: You can also do a site wide search and replace using the <code>Ack</code> plug-in (e.g. add <code>Bundle &#39;mileszs/ack.vim&#39;</code> to our <code>.vimrc</code> file and run the <code>:BundleInstall</code> again). Checkout the Ack repo on GitHub to see how it works.</p>
<h3><a name="viewing-different-buffers"class="anchor" href="#viewing-different-buffers"><span class="header-link"></span></a>Viewing different buffers</h3>
<p>Our <code>.vimrc</code> maps <code>\y</code>…</p>
<p><code>map &lt;leader&gt;y :CtrlPBuffer&lt;cr&gt;</code></p>
<p>…so it shows us what the current buffer is (this allows us to jump between files within Vim).</p>
<p>Note: in Vim the <code>&lt;leader&gt;</code> key is a backslash <code>\</code></p>
<h3><a name="code-comments"class="anchor" href="#code-comments"><span class="header-link"></span></a>Code Comments</h3>
<p>The following commands use the <code>vim-commentary.git</code> plugin…</p>
<p><code>gcc</code> = comment out a line (or <code>\\\</code>)<br><code>gcu</code> = uncomment the commented line (you can do <code>gcc</code> as a toggle)</p>
<p>When you select multiple lines to comment out you can just use <code>gc</code> (rather than <code>gcc</code>)</p>
<h3><a name="syntax-formatting"class="anchor" href="#syntax-formatting"><span class="header-link"></span></a>Syntax Formatting</h3>
<p>You can set the formatting of a file using <code>:setf</code></p>
<p>e.g. <code>:setf cucumber</code> (where <code>cucumber</code> is a syntax format installed)</p>
<h3><a name="auto-indenting"class="anchor" href="#auto-indenting"><span class="header-link"></span></a>Auto Indenting</h3>
<p>You can use the auto indent feature <code>=</code> to help you while programming.</p>
<p>To indent the entire file you can use <code>gg=G</code> which breaks down to: <code>gg</code> move to the start of the file, <code>=</code> auto indent, <code>G</code> to the end of the file.</p>
<p>You can auto indent a single line: <code>==</code></p>
<p>You can auto indent a code block (while inside of it): <code>=i{</code></p>
<p>You can auto indent a code block (while outside of it by first moving to either the opening or closing curly bracket): <code>=%</code>. Note: to move to the curly bracket keep pressing <code>%</code> (it&#39;ll move to either curly or parenthesis, which ever is first it&#39;ll stop there and then toggle between the opening/closing bracket, so you may need to manually navigation to the curly bracket and then run <code>=%</code>).</p>
<h3><a name="run-terminal-commands-within-vim"class="anchor" href="#run-terminal-commands-within-vim"><span class="header-link"></span></a>Run terminal commands within Vim</h3>
<p>Running the prefix command and then typing <code>:!{terminal command}</code> allows you to run terminal commands from within Vim (e.g. <code>:!pwd</code> shows us the current working directory).</p>
<p>Note: doing this takes you out of Vim so you can see the results, but if you just press <code>ENTER</code> you&#39;ll be sent back into Vim.</p>
<h3><a name="suspend-vim"class="anchor" href="#suspend-vim"><span class="header-link"></span></a>Suspend Vim</h3>
<p>Another way to run terminal commands while Vim is running is to actually suspend Vim.</p>
<p>If you run the prefix command this will take us back to the terminal to run whatever commands we like and then in the terminal just type <code>fg</code> to bring Vim back to the (f)ore (g)round.</p>
<h3><a name="visual-block-mode"class="anchor" href="#visual-block-mode"><span class="header-link"></span></a>Visual Block Mode</h3>
<p><code>Ctrl+v</code> puts us into Visual Block mode which allows us to select single columns and make multiple changes. So for example if you have a long list of items such as…</p>
<pre><code><div class="highlight"><pre><span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">1</span>  
<span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">2</span>  
<span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">3</span>  
<span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">4</span>  
<span class="nx">_List</span> <span class="nx">Item</span> <span class="mi">5</span>
</pre></div>
</code></pre>
<p>…if you wanted to remove the opening <code>_</code> underscore then you could enter Visual Block mode, select the underscores by using the direction keys (make sure you&#39;re on the first or last underscore when you enter Visual Block mode) and then after all are selected just press <code>d</code> to delete them.</p>
<p>Note: you might find you have an issue with editing multiple lines using insert mode. To use insert mode inside of Visual Block mode is to use <code>Shift+i</code> to jump into insert mode (just typing <code>i</code> doesn&#39;t work as that would throw you into the standard INSERT mode, so it&#39;ll remove you from Visual Mode).</p>
<p>Also you can press <code>c</code> to change multiple lines, but remember that your change only appears to have been made to one line until you escape Visual Mode, then Vim will kick in and apply the change to all other selected lines.</p>
<h3><a name="vim-windows"class="anchor" href="#vim-windows"><span class="header-link"></span></a>Vim Windows</h3>
<p>As well as having panes and windows within tmux you can create Windows within Vim (this is useful for times when you just want to do some quick hacking and tmux is too much effort -&gt; if you could believe such a thing).</p>
<p>To create a new window in Vim (which is the same concept as a &#39;pane&#39; in tmux) you can either <code>Ctrl-s</code> to create a horizontal split screen (or run the command <code>:split</code>, or just <code>:sp</code>). You can also create a vertical split screen using <code>Ctrl-v</code> (or run the command <code>:vsplit</code>, or just <code>:vsp</code>).</p>
<p>Note: if you use the execute command (i.e. <code>:</code> variation) then you can specify a file&#39;s path to be opened, otherwise Vim will automatically open the window pointing to a new buffer that is the same as the currently opened file (useful for viewing different portions of the same, but very long, file).</p>
<p>You can create as many windows as you like (e.g. windows within a window).</p>
<p>To resize a window&#39;s height you can use <code>Ctrl-w</code> then <code>-</code> or <code>+</code>. You can also use the command <code>:resize -N</code> or <code>:resize +N</code> (where <code>N</code> is the number to move by).</p>
<p>To resize a window&#39;s width you can use <code>Ctrl-w</code> then <code>&lt;</code> or <code>&gt;</code>. You can also use the command <code>:vertical resize -N</code> or <code>:vertical resize +N</code> (where <code>N</code> is the number to move by).</p>
<p>To maximise the height of the window then use <code>Ctrl-w</code> then <code>_</code>.</p>
<p>To maximise the width of the window then use <code>Ctrl-w</code> then <code>|</code>.</p>
<p>Finally, to close all windows use <code>:only</code> (which closes all the windows except the current one, where by you can just run <code>:q</code>)</p>
<h3><a name="keep-to-the-basics"class="anchor" href="#keep-to-the-basics"><span class="header-link"></span></a>Keep to the basics</h3>
<p>The above commands quite literally do not even scratch the surface of what&#39;s available within Vim.</p>
<p>So the best thing to do is to find a comfortable set of commands from the list above and don&#39;t deviate from them until you&#39;ve got them memorised (it&#39;s ok to Google for something you don&#39;t know, but try to just focus on the basic commands for now).</p>
<h2><a name="vim-configuration"class="anchor" href="#vim-configuration"><span class="header-link"></span></a>Vim Configuration</h2>
<p>Let&#39;s now take a quick look at some configuration options we can add to our <code>.vimrc</code> file…</p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="s2">&quot; switch syntax highlighting on, when the terminal has colors</span>
<span class="s2">syntax on</span>

<span class="s2">&quot;</span> use vim, not vi api
<span class="nb">set </span>nocompatible

<span class="s2">&quot; no backup files</span>
<span class="s2">set nobackup</span>

<span class="s2">&quot;</span> no write backup
<span class="nb">set </span>nowritebackup

<span class="s2">&quot; no swap file</span>
<span class="s2">set noswapfile</span>

<span class="s2">&quot;</span> <span class="nb">command history</span>
<span class="nb">set history</span><span class="o">=</span>100

<span class="s2">&quot; always show cursor</span>
<span class="s2">set ruler</span>

<span class="s2">&quot;</span> show incomplete commands
<span class="nb">set </span>showcmd

<span class="s2">&quot; incremental searching</span>
<span class="s2">set incsearch</span>

<span class="s2">&quot;</span> highlight search
<span class="nb">set </span>hlsearch

<span class="s2">&quot; ignore case in search</span>
<span class="s2">set smartcase</span>

<span class="s2">&quot;</span> clear search buffer
:nnoremap § :nohlsearch&lt;cr&gt;

<span class="s2">&quot; make sure undo history is kept for files in buffer.</span>
<span class="s2">set hidden</span>

<span class="s2">&quot;</span> turn indentation on
filetype indent on

<span class="s2">&quot; enable filetype plugins</span>
<span class="s2">filetype plugin on</span>

<span class="s2">&quot;</span> disable folding because it is evil
<span class="nb">set </span>nofoldenable

<span class="s2">&quot; turn word wrap off</span>
<span class="s2">set nowrap</span>

<span class="s2">&quot;</span> scroll with more context
<span class="nb">set </span><span class="nv">scrolloff</span><span class="o">=</span>10

<span class="s2">&quot; allow backspace to delete end of line, indent and start of line characters</span>
<span class="s2">set backspace=indent,eol,start</span>

<span class="s2">&quot;</span> convert tabs to spaces
<span class="nb">set </span>expandtab

<span class="s2">&quot; set tab size</span>
<span class="s2">set tabstop=4</span>

<span class="s2">&quot;</span> the number of spaces inserted <span class="k">for </span>a tab
<span class="nb">set </span><span class="nv">shiftwidth</span><span class="o">=</span>4

<span class="s2">&quot; turn on line numbers</span>
<span class="s2">set number</span>

<span class="s2">&quot;</span> highlight tailing whitespace
<span class="nb">set </span>list <span class="nv">listchars</span><span class="o">=</span>tab:<span class="se">\ \ </span>,trail:·

<span class="s2">&quot; get rid of the delay when pressing O (for example)</span>
<span class="s2">&quot;</span> http://stackoverflow.com/questions/2158516/vim-delay-before-o-opens-a-new-line
<span class="nb">set </span>timeout <span class="nv">timeoutlen</span><span class="o">=</span>1000 <span class="nv">ttimeoutlen</span><span class="o">=</span>100

<span class="s2">&quot; always show status bar</span>
<span class="s2">set laststatus=2</span>

<span class="s2">&quot;</span> <span class="nb">set </span>the status line to something useful
<span class="nb">set </span><span class="nv">statusline</span><span class="o">=</span>%f<span class="se">\ </span>%<span class="o">=</span>L:%l/%L<span class="se">\ </span>%c<span class="se">\ </span><span class="o">(</span>%p%%<span class="o">)</span>

<span class="s2">&quot; hide the toolbar</span>
<span class="s2">set guioptions-=T</span>

<span class="s2">&quot;</span> utf encoding
<span class="nb">set </span><span class="nv">encoding</span><span class="o">=</span>utf-8

<span class="s2">&quot; autoload files that have changed outside of vim</span>
<span class="s2">set autoread</span>

<span class="s2">&quot;</span> jump to last cursor
autocmd BufReadPost *
  <span class="se">\ </span><span class="k">if </span>line<span class="o">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="o">)</span> &gt; 0 <span class="o">&amp;&amp;</span> line<span class="o">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="o">)</span> &lt;<span class="o">=</span> line<span class="o">(</span><span class="s2">&quot;$&quot;</span><span class="o">)</span> <span class="p">|</span>
  <span class="se">\ </span>  exe <span class="s2">&quot;normal g`\&quot;&quot;</span> <span class="p">|</span>
  <span class="se">\ </span>endif

<span class="s2">&quot; set-up ctrlp to include hidden files in its search</span>
<span class="s2">let g:ctrlp_show_hidden=1</span>

<span class="s2">&quot;</span> disable ctrlp<span class="s1">&#39;s feature where it tries to intelligently work out the current working directory to search within</span>
<span class="s1">let g:ctrlp_working_path_mode=0</span>

<span class="s1">&quot; don&#39;</span>t <span class="nb">let </span>ctrlp take over the screen!
<span class="nb">let </span>g:ctrlp_max_height<span class="o">=</span>30

<span class="s2">&quot; lets make sure we don&#39;t show these files</span>
<span class="s2">set wildignore+=*/.git/*,*/.hg/*,*/.svn/*.,*/.DS_Store</span>

<span class="s2">&quot;</span> allows us to more easily work with markdown files
Bundle <span class="s1">&#39;tpope/vim-markdown&#39;</span>

<span class="s2">&quot; allows us to comment/uncomment lines and content</span>
<span class="s2">Bundle &#39;tpope/vim-commentary.git&#39;</span>

<span class="s2">&quot;</span> remove whitespace on save
autocmd BufWritePre * :%s/<span class="se">\s\+</span><span class="nv">$/</span>/e
</pre></div>
</code></pre>
<p>…hopefully the comments are self explanatory. There is so much you can configure with Vim that you just need to take the time to look at what set-up works for you, as chances are you&#39;ll be able to change it.</p>
<p>You can find loads of Vim configurations on GitHub where you can pinch ideas and settings from.</p>
<h2><a name="other-plugins"class="anchor" href="#other-plugins"><span class="header-link"></span></a>Other plugins</h2>
<p>Here are some other really useful plugins worth your time investigating… </p>
<ul>
<li>Sparkup (ZenCoding/Emmet) <a href="http://net.tutsplus.com/tutorials/other/vim-essential-plugin-sparkup/">NetTuts Screencast</a> -&gt; uses <code>Ctrl+e</code> to generate the HTML</li>
<li>Snipmate <a href="http://net.tutsplus.com/tutorials/other/vim-essential-plugin-snipmate/">NetTuts Screencast</a> -&gt; uses a <code>tab</code> to convert the keywords into the relevant snippet of HTML</li>
</ul>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>So there you have it. A painfully short introduction to using Vim as your new web development environment. But hopefully enough to get you started.</p>
<p>Vim is so powerful that it would probably take a life time to really cover everything. It just takes dedication.</p>
]]></description><link>http://www.integralist.co.uk/posts/a-guide-to-getting-started-with-vim/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/a-guide-to-getting-started-with-vim/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 08 Sep 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Imager.js (BBC News responsive images solution)]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 4mins</em></p>
<ul>
<li>Introduction</li>
<li>What&#39;s the gist?</li>
<li>Anything more technical you can tell us?</li>
<li>So it&#39;s open-sourced and ready to use right?</li>
<li>What&#39;s left to do?</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>Previously <a href="http://twitter.com/tmaslen">Tom Maslen</a> wrote a quick summary of the <a href="http://responsivenews.co.uk/post/50092458307/images">responsive image loading strategy</a> used by BBC News. This post resulted in a lot of interest from the development community and so we wanted to follow up with another quick post which explored in more detail the actual implementation of this approach.</p>
<p><a href="http://twitter.com/addyosmani">Addy Osmani</a> from the Google Chrome team recently contacted us to express his interest in the technique we are using and so we decided it would be a good idea to go the open-source route and release a version of our approach so the developer community could benefit from an alternative solution to the responsive image problem (especially considering the pre-existing proposed specifications for &#39;srcset&#39; and the &#39;Picture&#39; element aren&#39;t yet widely implemented and the currently available polyfills aren&#39;t quite up to scratch yet either).</p>
<p>The original code was written back in 2011 (and was also heavily tied into the BBC infrastructure) so the first thing we needed to do was <a href="https://gist.github.com/Integralist/6157139">rewrite the code so it could more easily be understood</a> and then we could start work on open-sourcing it and improving it.</p>
<p>Moving forward we aim to collaborate further with Addy and the rest of the community on getting the process automated using the popular front-end JavaScript task runner <a href="http://gruntjs.com/">Grunt</a>.</p>
<h2><a name="what-s-the-gist-"class="anchor" href="#what-s-the-gist-"><span class="header-link"></span></a>What&#39;s the gist?</h2>
<p>It&#39;s pretty simple really…</p>
<ol>
<li>Wherever you want an image to appear you use a <code>&lt;div&gt;</code></li>
<li>You give it a <code>class</code> and <code>data-src</code>, <code>data-width</code> attributes</li>
<li>Load and run the Imager.js code (we use a predetermined list of image sizes, but these are specific to BBC News and so can be changed to match your own requirements)</li>
<li>Imager replaces the div&#39;s with a transparent 1x1 Base64 encoded image.</li>
<li>Imager then replaces those with the most appropriately sized image (based on the current image and the user&#39;s screen dimensions and see if they correlate to our list of available image sizes).</li>
<li>Imager set-ups a resize event listener to check whether the image needs to be replaced with another more appropriately sized image.</li>
</ol>
<p>…fundamentally, that&#39;s it.</p>
<h2><a name="anything-more-technical-you-can-tell-us-"class="anchor" href="#anything-more-technical-you-can-tell-us-"><span class="header-link"></span></a>Anything more technical you can tell us?</h2>
<p>The way we determine what size image to place onto the page is by taking the current screen width and then looking at the &#39;rendered&#39; size of our image (using <code>myImageElement.clientWidth</code>). We then check if the rendered image size approximately matches one of the sizes available in our predefined list of image dimensions. Once we have a match we then parse the current image URL (which if using a RESTful format would look something like <code>http://your-image-service.com/horse/100/</code> -&gt; and would return an image of a horse 100px wide), finally we replace the width in the URL with the new replacement width and update the image source to load that more appropriately sized image based from the new RESTful URL we set as the image source.</p>
<p>The code for Imager.js is quite small and pretty self explanatory (considering the break-down of the process listed above), so rather than me repeat the code line for line just <a href="https://gist.github.com/Integralist/6229170">take a look here</a>.</p>
<h2><a name="so-it-s-open-sourced-and-ready-to-use-right-"class="anchor" href="#so-it-s-open-sourced-and-ready-to-use-right-"><span class="header-link"></span></a>So it&#39;s open-sourced and ready to use right?</h2>
<p>It&#39;s open-sourced <a href="https://github.com/BBC-News/Imager.js/"><a href="https://github.com/BBC-News/Imager.js/">https://github.com/BBC-News/Imager.js/</a></a> and is usable but it currently relies on users having their own RESTful image service.</p>
<p>For the purpose of providing a simple demonstration we used the 3rd party service <a href="http://placehold.it/">Placehold.it</a>.</p>
<h2><a name="what-s-left-to-do-"class="anchor" href="#what-s-left-to-do-"><span class="header-link"></span></a>What&#39;s left to do?</h2>
<p>Well, there are many things we want to do with Imager but the next step is to try and automate the process using <a href="http://gruntjs.com/">Grunt</a> and to supply a simple server-side script that helps users experiment with the code more easily.</p>
<p>But the beauty of the open-source community means we&#39;ve already had a member of the <a href="http://yeoman.io/">Yeoman</a> team contributing code that helps cache the generation of images, as well as improve performance by replacing the use of <code>setTimeout</code> with a polyfill for <code>requestAnimationFrame</code> (not to mention some other small refactorings).</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>Here at BBC News we have found this approach provides us a good flexible foundation to incorporate responsive images without resorting to un-stable and un-implemented official solutions or polyfills. </p>
<p>Is this the <em>best</em> solution available today? Unlikely. But the more choice developers have at their disposal the better.</p>
<p>If you have any questions then feel free to open an issue on the Imager.js <a href="https://github.com/BBC-News/Imager.js/">GitHub repo</a>.</p>
]]></description><link>http://www.integralist.co.uk/posts/imager-js-bbc-news-responsive-images-solution/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/imager-js-bbc-news-responsive-images-solution/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Wed, 14 Aug 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Stark - Simplified separation of components into decoupled applications]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 18mins</em></p>
<ul>
<li>Convoluted solutions</li>
<li>Simplicity</li>
<li>Perfection?</li>
<li>Good code design</li>
<li>The front-end landscape</li>
<li>Introducing Stark</li>
<li>How does it work</li>
<li>Components and Extensions</li>
<li>Convention over configuration</li>
<li>Examples</li>
<li>Conclusion</li>
</ul>
<h2><a name="convoluted-solutions"class="anchor" href="#convoluted-solutions"><span class="header-link"></span></a>Convoluted solutions</h2>
<p>The web industry is a fascinating beast. It is constantly evolving, changing, morphing itself into new shapes and producing fun tools for our pleasure (and disposal). It&#39;s like a hyper-active child: it can&#39;t sit still.</p>
<p>For all the good things that come from this inherent behaviour (e.g. every few weeks there are new toys and techniques, tricks and tips and those beloved buzz words), there is one problem that seems to consequentially arise… complication.</p>
<p>It seems we&#39;ve lost the simplicity in solutions we provide. It would seem we&#39;re a breed of enthusiasts who (knowingly or unknowingly) love to over-engineer things, and there in lies the problem.</p>
<p>Now I see this in lots of different places, down to the architectures we create, to the code we write to the designs we implement. </p>
<h2><a name="simplicity"class="anchor" href="#simplicity"><span class="header-link"></span></a>Simplicity</h2>
<p>&quot;Simplicity&quot; is defined as… </p>
<blockquote>
<p>the quality or condition of being easy to understand or do</p>
</blockquote>
<p>…but this doesn&#39;t always present itself in the projects I see or have worked on in the past.</p>
<h2><a name="perfection-"class="anchor" href="#perfection-"><span class="header-link"></span></a>Perfection?</h2>
<p>Now let&#39;s be clear here, I&#39;m no white knight in shining armour. I, like most developers, have at some point written (and may continue to write) bad code. That&#39;s just the way it is when you either have tight deadlines, or you&#39;re unsure of how to solve a problem (or whatever other reason there may be for writing bad code). Sometimes what we do can seem more like a &#39;feeling out&#39; process than a fine art.</p>
<p>What we do is a creative process. Yes writing &#39;code&#39; isn&#39;t usually thought of as creative but it is, it is an art and a difficult one at that. </p>
<p>Any time I&#39;ve seen some bad code and thought &quot;WTF?&quot;, I&#39;m not trying to disrespect the author, or question their skills as a developer. That&#39;s just a gut reaction we all have when looking at something we don&#39;t understand. </p>
<p>We need to remember to put ourselves into the shoes of the author and take their perspective, try to understand the circumstances that brought about the code we&#39;re looking at now.</p>
<p>It&#39;s all so easy to criticise, it&#39;s another to &quot;do&quot; (and do well).</p>
<h2><a name="good-code-design"class="anchor" href="#good-code-design"><span class="header-link"></span></a>Good code design</h2>
<p>When I started working at the BBC I had the pleasure of working with a chap called <a href="http://twitter.com/danscotton">Dan Scotton</a>. Dan, like me, loved to draw his code structure. It was a great exercise in making sure you weren&#39;t going to write code that was redundant or useless. Usually he would ask for my thoughts on code he was working on, which was great to be a part of because it helped both Dan and myself better understand the problem and what the right solution should be (you&#39;d be surprised how many developers keep their code or ideas tightly guarded, afraid of conflict or disapproval from others).</p>
<p>One of the main points I always reiterated to Dan was the idea of simplicity: &quot;<em>it needs to be as simple, yet effective, efficient and practical as possible</em>&quot; (luckily I didn&#39;t need to preach for too long, as Dan already incorporated those ideas).</p>
<p>But Dan also introduced me to the principles of good &#39;code design&#39;. Through him I was inspired to read older software engineering books (mostly around object-oriented code and design - lower level, server-side, languages such as Java, C++, Ruby etc). </p>
<p>For years up until this point I was already a big believer in Design Patterns (as prescribed by &#39;The Gang of Four&#39;) but that didn&#39;t mean I understood the principle of good code &#39;design&#39;. Reading these older software engineering books helped nail home the idea of simplicity which really is the heart of the subject and ironically is the hardest and most complicated principle to truly understand.</p>
<h2><a name="the-front-end-landscape"class="anchor" href="#the-front-end-landscape"><span class="header-link"></span></a>The front-end landscape</h2>
<p>So where am I going with this and what problem am I trying to solve?</p>
<p>Well, for me the front-end developer landscape has become a dumping ground of overly complicated and over-engineered solutions.</p>
<p>There are some seriously good tools out there. For example, the CSS pre-processor <a href="http://sass-lang.com/">Sass</a> is a useful tool which solves a particular problem. Sass is a just one small piece of the overall puzzle (forgive me this next bit), but… </p>
<blockquote>
<p>with great power, comes great responsibility</p>
</blockquote>
<p>…Sass (like most of the tools we have at our disposal) can, and is, mis-used. </p>
<p>With regards to Sass, I&#39;ve seen developers writing mixins that try to solve a thousand different problems all at once (scenarios they may never have). I can only assume they must be thinking: &quot;<em>if I include this extra piece of functionality then people will thank me later when they do finally need it</em>&quot;. </p>
<p>This isn&#39;t just a problem with developers trying to solve too many problems at once. It ultimately comes down to breaching, and probably a lack of understanding, many good code design principles that help us avoid such disastrously unmaintainable and unscalable code**</p>
<p>**if you want a good book to read on the subject then I can whole heartedly recommend you get &quot;<a href="http://www.poodr.info/">Practical Object-Oriented Design in Ruby</a>&quot; (also read my own write-up of that book: &quot;<a href="http://integralist.co.uk/Object-Oriented-Design.html">Object-Oriented Design</a>&quot;)</p>
<h2><a name="introducing-stark"class="anchor" href="#introducing-stark"><span class="header-link"></span></a>Introducing Stark</h2>
<p>This brings me to a project I&#39;ve been working on (and still am working on) called <a href="https://github.com/Integralist/Stark#stark">Stark</a>.</p>
<p>Stark is a work in progress. It is by no means a finished product. But the principles it tries to incorporate are things I&#39;ll attempt to explain in more detail here in this post, and are definitely worth your time investigating further still.</p>
<p>So what is Stark?</p>
<p>Stark is simply a fancy name for a &#39;strategy&#39;. It&#39;s not another development framework. It&#39;s a way of thinking about, and implementing your project&#39;s architecture and code design. Primarily based around the loading of JavaScript and JavaScript based components, communication between those components and also the CSS that provides the &#39;skin&#39; for those components.</p>
<p>It is a mix-mash of different techniques and styles but ultimately is aiming for simplicity and effectiveness. </p>
<p>The API I&#39;ve used, and some of the code structure is based off of the great work <a href="http://twitter.com/addyosmani">Addy Osmani</a> has done with his <a href="http://aurajs.com/">Aura.js project</a>. </p>
<p>It&#39;s worth noting that what I&#39;ve done here for Stark is not even in the same league as Aura. The reason I mention this is because I&#39;m aiming for… simplicity :-) I didn&#39;t want (or need) the extra bells and whistles. I had my own set of problems I was trying to solve, and reducing the number of dependencies, libraries etc was important for me.</p>
<p>I&#39;m also not suggesting you should use <a href="https://github.com/Integralist/Stark#stark">Stark</a> (I&#39;m not suggesting my way is the best way), but just to use it as a basis for learning about other ways of thinking and approaching front-end work.</p>
<h2><a name="how-does-it-work"class="anchor" href="#how-does-it-work"><span class="header-link"></span></a>How does it work</h2>
<p>Stark is based around the idea of components (pages being made up of uniquely individual components).</p>
<p>Components are written into the page using plain HTML. Our JavaScript application when initialised will find all components and instantiate them for you automatically. The components can have fallback content which won&#39;t be visible as long as JavaScript is enabled (this is because in the <code>&lt;head&gt;</code> of the page we have a single inline <code>&lt;script&gt;</code> tag which adds the class <code>js</code> to the <code>&lt;html&gt;</code> tag. With this class added our CSS only applies styling to elements if there is a <code>.js</code> class available - similar to how Modernizr works).</p>
<p>On the JavaScript side of things we utilise AMD (Asynchronous Module Definition) which is an API for loading individual JavaScript modules. Nothing new here. But we also use <a href="http://requirejs.org/">RequireJS</a> for our script loader. Lastly, because we&#39;re lazy-loading component JavaScript modules at run time (e.g. in development) we don&#39;t want to be doing that when we go live (e.g. into production) because we want to be good web citizens and reduce the number of HTTP requests we make, so we lean very heavily on a custom build script using the associated <a href="http://requirejs.org/docs/optimization.html">r.js</a> tool which handles that for us.</p>
<p>On the CSS side of things we want to be as maintainable, flexible and scalable (i.e. all the great things <a href="http://csswizardry.com/">Harry Roberts</a> talks about). We use the <a href="http://integralist.co.uk/Maintainable-CSS-with-BEM.html">BEM</a> naming conventions for making sure our CSS isn&#39;t overly specific and we use <a href="http://sass-lang.com/">Sass</a> for helping to keep our implementation details of a component encapsulated within the component&#39;s own style sheet. We also use a trick that <a href="http://twitter.com/jaffathecake">Jake Archibald</a> came up with for generating an IE based style sheet (we&#39;ll cover that shortly).</p>
<p>Later on when we look at some example code this will start making a bit more sense.</p>
<h2><a name="components-and-extensions"class="anchor" href="#components-and-extensions"><span class="header-link"></span></a>Components and Extensions</h2>
<p>I made reference above, and I do so regularly in <a href="https://github.com/Integralist/Stark#stark">Stark</a> to &#39;components&#39; and &#39;extensions&#39;. </p>
<p>I think components are pretty self explanatory, but just to be clear: they are self-contained pieces of functionality. </p>
<p>Components know nothing about each other (i.e. they lack &#39;context&#39;). Components communicate through the &#39;mediator&#39; design pattern, meaning they can publish an event when they do something interesting and they can also be notified of events outside them, but they don&#39;t need to know anything about the objects that publish those outside events. Total separation means components can more easily be updated and migrated if need be.</p>
<p>Extensions on the other hand are just small pieces of extra functionality that you can mix into your code. The mediator pattern itself is an extension that I include (i.e. &#39;mix&#39;) into my application.</p>
<p>I&#39;ll give examples of these shortly.</p>
<h2><a name="convention-over-configuration"class="anchor" href="#convention-over-configuration"><span class="header-link"></span></a>Convention over configuration</h2>
<p>Oh boy, &quot;convention over configuration&quot; is usually an alarm bell for me when looking at a new project. It screams &quot;<em>hey, this is my opinionated view on how things should be done</em>&quot;. But what I didn&#39;t realise before (which I do realise now) is that, it&#39;s not until you try and solve a particular problem that you soon discover yourself becoming very opinionated about the route you&#39;ve taken to implement that solution. </p>
<p>We developers are a sensitive bunch and don&#39;t normally take criticisms well.</p>
<p>But the difference between you and an overly opinionated developer is that those opinionated developers generally aren&#39;t willing to hear alternatives or to take advice or alternative ways of thinking about a problem. </p>
<p>I like to think I&#39;m very open to suggestions, change and better ways of doing things. If someone opens up an issue (or better yet a pull request) that suggests a more effective way of solving a problem, then I&#39;m happy to hear it.</p>
<p>That being said, I&#39;ve implemented a small set of conventions (<a href="https://github.com/Integralist/Stark#conventions">explained in the repo</a>, but I&#39;ll cover briefly here)…</p>
<ul>
<li>HTML components need a <code>data-attribute</code> and an <code>id</code></li>
<li>The data attribute needs to take the form of: <code>data-component=&quot;xxx&quot;</code></li>
<li>The id attribute needs to take the form of: <code>id=&quot;js-component-xxx&quot;</code></li>
<li>The <code>xxx</code> mentioned above needs to be the name of the component</li>
<li>Components are placed inside a <code>/components/</code> directory</li>
<li>Extensions are placed inside a <code>/extensions/</code> directory</li>
<li>Each page has its own bootstrap js file <code>boostrap-xxx.js</code></li>
<li>JavaScript needs to be loaded at the bottom of the page</li>
<li>Components need to have an <code>init</code> method</li>
</ul>
<p>…see that wasn&#39;t too bad now was it.</p>
<h2><a name="examples"class="anchor" href="#examples"><span class="header-link"></span></a>Examples</h2>
<p>Finally we come to some code!</p>
<h3><a name="api"class="anchor" href="#api"><span class="header-link"></span></a>API</h3>
<ul>
<li><code>app.use(&#39;extension&#39;, &#39;extension&#39;, &#39;extension&#39;)</code> loads specified extensions</li>
<li><code>app.start()</code> goes through the HTML looking for components to load</li>
</ul>
<p>As mentioned earlier, we use RequireJS and AMD to wrap the above API calls, for example… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// the only part of this code that needs to change</span>
<span class="c1">// is the list of extensions you want to use</span>
<span class="c1">// the rest is standard (read: required to be run)</span>
<span class="nx">require</span><span class="p">([</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;configuration&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;extension-a&#39;</span><span class="p">,</span> <span class="s1">&#39;extension-b&#39;</span><span class="p">);</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>But now let&#39;s look at each section individually… </p>
<h3><a name="html-"class="anchor" href="#html-"><span class="header-link"></span></a>HTML…</h3>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">data-component=</span><span class="s">&quot;hello&quot;</span> <span class="na">id=</span><span class="s">&quot;js-component-hello&quot;</span><span class="nt">&gt;</span>hello<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">data-component=</span><span class="s">&quot;world&quot;</span> <span class="na">id=</span><span class="s">&quot;js-component-world&quot;</span><span class="nt">&gt;</span>world<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;libs/require.js&quot;</span> <span class="na">data-main=</span><span class="s">&quot;bootstrap-about&quot;</span> <span class="na">async</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre></div>
</code></pre>
<p>As you can see we have a <code>data-component</code> attribute which is used by the JavaScript application when it is booting up (initialised). </p>
<p>But we also have an <code>id</code> attribute which I use to reference the component from within the component&#39;s JavaScript module code. So for example, based on the &#39;conventions&#39; I mentioned earlier, the JavaScript application will find a HTML <code>div</code> with a <code>data-component</code> name of <code>hello</code> and will try to load <code>components/hello/component.js</code> - inside of that JavaScript file I might want to replace the <code>div</code> in the DOM with a totally different chunk of HTML code, or I might want to inject more HTML inside of that <code>div</code> element, the choice is up to you as the developer to decide what to do at that point.</p>
<p>You don&#39;t really need to include the <code>id</code> attribute if you don&#39;t want to but my build script will try and use it as a reference to the DOM node. You can reference the DOM node any way you see fit, I just personally prefer the speed of native <code>getElementById</code> to grab DOM nodes.</p>
<p>Originally I had thought about not using an empty <code>div</code> container with a custom <code>data-</code> attribute but just a simple HTML comment <code>&lt;!-- #component hello --&gt;</code> but then I realised that there wasn&#39;t an easy hook into the page without parsing the entire DOM, and also there was no fallback content that could be provided.</p>
<h3><a name="bootstrap-"class="anchor" href="#bootstrap-"><span class="header-link"></span></a>Bootstrap...</h3>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">require</span><span class="p">([</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;configuration&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;mediator&#39;</span><span class="p">,</span> <span class="s1">&#39;extension-a&#39;</span><span class="p">,</span> <span class="s1">&#39;extension-b&#39;</span><span class="p">);</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>I had considered just having a single bootstrap script but the list of extensions used is very likely going to be different per page, hence we have a different bootstrap for each page.</p>
<p>The bootstrap loads in our JavaScript application along with a configuration object (which is just the RequireJS config)… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
    <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;./&#39;</span><span class="p">,</span>
    <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">jquery</span><span class="o">:</span> <span class="s1">&#39;libs/jquery&#39;</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Once our application is loaded we tell the app what extensions we want to use and then we tell the application to start.</p>
<h3><a name="component-"class="anchor" href="#component-"><span class="header-link"></span></a>Component...</h3>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">define</span><span class="p">({</span>
    <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;an example component&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>This is an example component. As mentioned earlier: components need to have a public <code>init</code> method, otherwise they can do whatever you want them to.</p>
<h3><a name="extension-"class="anchor" href="#extension-"><span class="header-link"></span></a>Extension...</h3>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Silly example</span>
<span class="nx">define</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">blah</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">blah</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span> <span class="o">+</span> <span class="s1">&#39; BLAH!&#39;</span><span class="p">;</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>This is an example extension. Extensions can do whatever you want them to do. </p>
<p>The only thing worth noting about extensions is that they can&#39;t take advantage of dependency injection (e.g. can&#39;t be passed directly into your components). </p>
<p>To work around this Stark uses the idea of a single global namespace called <code>app</code> (e.g. <code>window.app = {};</code>) which you can attach any extensions or other data you need to pass around.</p>
<p>So for example, our Mediator extension uses <code>window.app.mediator = mediator;</code> like so… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">define</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">mediator</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="c1">// code</span>

        <span class="k">return</span> <span class="p">{</span>
            <span class="c1">// public api</span>
        <span class="p">};</span>

    <span class="p">}());</span>

    <span class="nb">window</span><span class="p">.</span><span class="nx">app</span><span class="p">.</span><span class="nx">mediator</span> <span class="o">=</span> <span class="nx">mediator</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">mediator</span><span class="p">;</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p><strong>Don&#39;t mistake the phrase: &quot;<em>Don&#39;t pollute the global namespace</em>&quot; with &quot;<em>Don&#39;t ever use the global namespace ever ever ever</em>&quot; - that&#39;s just dogmatic nonsense.</strong></p>
<h3><a name="css"class="anchor" href="#css"><span class="header-link"></span></a>CSS</h3>
<p>So our CSS uses Sass to help us keep our code more easily maintainable. Each page should load a page specific style sheet that contains the code relevant for that page.</p>
<p>So our example page loads <code>project.css</code>, the Sass file looks like this… </p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="cm">/* =============================================================================</span>
  <span class="cm">Base Utilities</span>
  <span class="cm">========================================================================== */</span>

  <span class="cm">@import &#39;partials/variables&#39;;</span>
  <span class="cm">@import &#39;partials/utils&#39;;</span>
  <span class="cm">@import &#39;partials/baseline&#39;;</span>
  <span class="cm">@import &#39;partials/grid&#39;;</span>

<span class="cm">/* =============================================================================</span>
  <span class="cm">Patterns</span>
  <span class="cm">These are common design patterns abstracted into reusable chunks of code</span>
  <span class="cm">========================================================================== */</span>

  <span class="cm">@import &#39;patterns/media&#39;;</span>

<span class="cm">/* =============================================================================</span>
  <span class="cm">Core</span>
  <span class="cm">This is the experience for either really old devices, or non-js devices</span>
  <span class="cm">========================================================================== */</span>

  <span class="cm">@import &#39;partials/core&#39;;</span>

<span class="cm">/* =============================================================================</span>
  <span class="cm">Groups</span>
  <span class="cm">Any design enhancements that aren&#39;t a separate component and aren&#39;t part </span>
  <span class="cm">of the core experience should be placed within one of the following groups.</span>

  <span class="cm">Note: we&#39;re using inheritance for our CSS loading strategy which means each</span>
  <span class="cm">stylesheet inherits styles from the group that came before it</span>
  <span class="cm">========================================================================== */</span>

  <span class="cm">@import &#39;groups/group1&#39;;</span>
  <span class="cm">@import &#39;groups/group2&#39;;</span>
  <span class="cm">@import &#39;groups/group3&#39;;</span>
  <span class="cm">@import &#39;groups/group4&#39;;</span>

<span class="cm">/* =============================================================================</span>
  <span class="cm">Components</span>
  <span class="cm">You only need to import components into the top-level project/project-ie files</span>
  <span class="cm">Components have been built to be self contained.</span>
  <span class="cm">This means they encapsulate any logic about viewport dimensions.</span>
  <span class="cm">This allows them to control their own visual display.</span>
  <span class="cm">========================================================================== */</span>

  <span class="cm">@import &#39;components/hello&#39;;</span>
  <span class="cm">@import &#39;components/world&#39;;</span>
  <span class="cm">@import &#39;components/features-and-analysis&#39;;</span>
  <span class="cm">@import &#39;components/index&#39;;</span>
</pre></div>
</code></pre>
<p>I won&#39;t go into detail for each part of this file because the code comments should be self explanatory. But we&#39;ll look at bit more at the &#39;groups&#39; and also the &#39;components&#39;.</p>
<h4><a name="groups"class="anchor" href="#groups"><span class="header-link"></span></a>Groups</h4>
<p>We break-down our layouts into &#39;groups&#39;, and each group inherits styles from the group that came before it.</p>
<p>Here is what our group 1 looks like… </p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="cm">/* =============================================================================</span>
   <span class="cm">Group 1</span>
   <span class="cm">All devices sizes</span>
   <span class="cm">========================================================================== */</span>

<span class="nc">.js</span> <span class="err">{</span>
    <span class="nt">body</span> <span class="err">{</span>
        <span class="na">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="err">;</span>
    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…so group 1 is applied for all device sizes and we&#39;re saying all device sizes should see a red background colour.</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="cm">/* =============================================================================</span>
   <span class="cm">Group 2</span>
   <span class="cm">Viewport &gt;= 400px</span>
   <span class="cm">========================================================================== */</span>

<span class="nc">.js</span> <span class="err">{</span>
    <span class="k">@include</span><span class="nd"> respond-min</span><span class="p">(</span><span class="nv">$mq-group2</span><span class="p">)</span> <span class="err">{</span>
        <span class="nt">body</span> <span class="err">{</span>
            <span class="na">background-color</span><span class="o">:</span> <span class="nb">yellow</span><span class="err">;</span>
        <span class="err">}</span>
    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>All our other groups constrain their stylings using media queries (which we&#39;ve abstracted into a mixin) and use a variable to store a reference to the relevant break-point size.</p>
<p>You can see that the styles are constrained further by the <code>.js</code> class prefix and nesting the rest of the CSS/Sass inside of it.</p>
<p>In our group 2 we&#39;re overriding our previous groups styling by saying we want the background colour to be yellow for group 2 sized devices.</p>
<h4><a name="components"class="anchor" href="#components"><span class="header-link"></span></a>Components</h4>
<p>Our components work in a similar way to our groups… </p>
<ul>
<li>Set a base line style</li>
<li>Encapsulate styles within the component style sheet</li>
<li>Use media queries to apply changes to the component</li>
</ul>
<p>Here is an example component… </p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="cm">/* =============================================================================</span>
   <span class="cm">Component: Features &amp; Analysis</span>
   <span class="cm">Distinguishes featured content from standard content</span>
   <span class="cm">========================================================================== */</span>

<span class="err">[</span><span class="na">data-component</span><span class="o">=</span><span class="s2">&quot;features-and-analysis&quot;</span><span class="p">]</span> <span class="err">{</span>
    <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nb">blue</span><span class="err">;</span>

    <span class="k">@include</span><span class="nd"> respond-min</span><span class="p">(</span><span class="nv">$mq-group2</span><span class="p">)</span> <span class="err">{</span>
        <span class="k">&amp;</span> <span class="err">{</span>
            <span class="na">border-color</span><span class="o">:</span> <span class="ni">pink</span><span class="err">;</span>

            <span class="nc">.media</span> <span class="err">{</span>
                <span class="na">float</span><span class="o">:</span> <span class="no">left</span><span class="err">;</span>
                <span class="na">width</span><span class="o">:</span> <span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="kt">%</span><span class="err">;</span>
            <span class="err">}</span>
        <span class="err">}</span>
    <span class="err">}</span>

    <span class="k">@include</span><span class="nd"> respond-min</span><span class="p">(</span><span class="nv">$mq-group3</span><span class="p">)</span> <span class="err">{</span>
        <span class="k">&amp;</span> <span class="err">{</span>
            <span class="na">border-color</span><span class="o">:</span> <span class="nb">yellow</span><span class="err">;</span>

            <span class="nc">.media</span> <span class="err">{</span>
                <span class="na">width</span><span class="o">:</span> <span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="kt">%</span><span class="err">;</span>
            <span class="err">}</span>
        <span class="err">}</span>
    <span class="err">}</span>

    <span class="k">@include</span><span class="nd"> respond-min</span><span class="p">(</span><span class="nv">$mq-group4</span><span class="p">)</span> <span class="err">{</span>
        <span class="k">&amp;</span> <span class="err">{</span>
            <span class="na">border-color</span><span class="o">:</span> <span class="nb">red</span><span class="err">;</span>

            <span class="nc">.media</span> <span class="err">{</span>
                <span class="na">width</span><span class="o">:</span> <span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="kt">%</span><span class="err">;</span>
            <span class="err">}</span>
        <span class="err">}</span>
    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<h4><a name="internet-explorer"class="anchor" href="#internet-explorer"><span class="header-link"></span></a>Internet Explorer</h4>
<p>So how do we encapsulate logic (read: bug fixes) for Internet Explorer? We use Sass to help us incorporate these IE specific fixes… </p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="err">[</span><span class="na">data-component</span><span class="o">=</span><span class="s2">&quot;hello&quot;</span><span class="p">]</span> <span class="err">{</span>
    <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nb">blue</span><span class="err">;</span>

    <span class="k">@include</span><span class="nd"> respond-min</span><span class="p">(</span><span class="nv">$mq-group2</span><span class="p">)</span> <span class="err">{</span>
        <span class="k">&amp;</span> <span class="err">{</span>
            <span class="na">border-color</span><span class="o">:</span> <span class="nb">green</span><span class="err">;</span>

            <span class="k">@include</span><span class="nd"> old-ie</span> <span class="err">{</span>
                <span class="na">border-width</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span><span class="err">;</span>
            <span class="err">}</span>
        <span class="err">}</span>
    <span class="err">}</span>

    <span class="k">@include</span><span class="nd"> respond-min</span><span class="p">(</span><span class="nv">$mq-group3</span><span class="p">)</span> <span class="err">{</span>
        <span class="k">&amp;</span> <span class="err">{</span>
            <span class="na">border-color</span><span class="o">:</span> <span class="nb">yellow</span><span class="err">;</span>

            <span class="k">@include</span><span class="nd"> old-ie</span> <span class="err">{</span>
                <span class="na">border-width</span><span class="o">:</span> <span class="mi">3</span><span class="kt">px</span><span class="err">;</span>
            <span class="err">}</span>
        <span class="err">}</span>
    <span class="err">}</span>

    <span class="k">@include</span><span class="nd"> respond-min</span><span class="p">(</span><span class="nv">$mq-group4</span><span class="p">)</span> <span class="err">{</span>
        <span class="k">&amp;</span> <span class="err">{</span>
            <span class="na">border-color</span><span class="o">:</span> <span class="nb">red</span><span class="err">;</span>

            <span class="k">@include</span><span class="nd"> old-ie</span> <span class="err">{</span>
                <span class="na">border-width</span><span class="o">:</span> <span class="mi">4</span><span class="kt">px</span><span class="err">;</span>
            <span class="err">}</span>
        <span class="err">}</span>
    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…in the above example you can see we have a <code>old-ie</code> mixin that applies a different style for Internet Explorer versions &lt;= 8. It&#39;s nested inside and the way the mixin works is when you compile this Sass code, if a variable (<code>$old-ie</code>) is set to <code>true</code> then the mixin will generate the relevant code.</p>
<p>So in our HTML page we have the following code… </p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles/project.css&quot;</span><span class="nt">&gt;</span>
<span class="c">&lt;!--[if lte IE 8]&gt;</span>
<span class="c">&lt;link rel=&quot;stylesheet&quot; href=&quot;styles/project-ie.css&quot;&gt;</span>
<span class="c">&lt;![endif]--&gt;</span>
</pre></div>
</code></pre>
<p>…as you can see we use a Microsoft Conditional Comment to load an additional style sheet just for IE versions less than or equal to 8.</p>
<p>The contents of the associated Sass file is… </p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="k">@import</span> <span class="s">&#39;partials/variables&#39;;</span>

<span class="na">$old-ie</span><span class="o">:</span> <span class="n-Pseudo">true</span><span class="err">;</span>
<span class="na">$fix-mqs</span><span class="o">:</span> <span class="nv">$mq-group4</span><span class="err">;</span>

<span class="k">@import</span> <span class="s">&#39;project&#39;;</span>
</pre></div>
</code></pre>
<p>…this Sass file will generate a <code>project-ie.css</code> file. It simply sets some variables and then imports our main <code>projects.scss</code> file. But when we import that file, the decision the Sass code makes (e.g. the <code>old-ie</code> mixin) will change as it relies on variables which we&#39;ve overwritten within <code>project-ie.css</code>.</p>
<p>Also, our media query mixin internally uses the variable <code>fix-mqs</code> and because IE &lt;=8 doesn&#39;t support media queries, we overwrite that variable value with a fix width (in this case we want old IE to load up our group 4 width, which is our desktop width).</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>OK, so this was a quick run-through of my Stark project and its purpose might still not be totally clear to a lot of you at this point. But as I said from the start, I&#39;m not selling an all encompassing framework or set of tools that work &#39;out of the box&#39;. I&#39;m simply demonstrating a &#39;strategy&#39;, a way of working, thinking, and writing/structuring your front-end code.</p>
<p>I&#39;d love to hear your feedback and get your thoughts so <a href="http://twitter.com/integralist">contact me on twitter</a>, open up an discussion on <a href="https://github.com/Integralist/Stark">GitHub</a> (or better yet a Pull Request).</p>
]]></description><link>http://www.integralist.co.uk/posts/stark-simplified-separation-of-components-into-decoupled-applications/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/stark-simplified-separation-of-components-into-decoupled-applications/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Wed, 07 Aug 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Generate Application Cache Manifest with PhantomJS]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 11mins</em></p>
<ul>
<li>What is PhantomJS?</li>
<li>Why use PhantomJS?</li>
<li>How can we use it?</li>
<li>Basic introduction</li>
<li>Let&#39;s break down Squirrel</li>
<li>Other PhantomJS features</li>
<li>Conclusion</li>
</ul>
<h2><a name="what-is-phantomjs-"class="anchor" href="#what-is-phantomjs-"><span class="header-link"></span></a>What is PhantomJS?</h2>
<p>To quote the source…</p>
<blockquote>
<p>PhantomJS is a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.</p>
</blockquote>
<h2><a name="why-use-phantomjs-"class="anchor" href="#why-use-phantomjs-"><span class="header-link"></span></a>Why use PhantomJS?</h2>
<p>So why do you care? Well, having a headless WebKit allows you to do all sorts of things. You can automate anything within a browser environment, and that&#39;s very cool!</p>
<p>So for example, I work for BBC News on the responsive code base and some of the very talented guys here have recently released an open-source project called <a href="https://github.com/BBC-News/wraith">Wraith</a> which is a front-end regression testing tool that lets you grab screen shot images of web pages at different dimensions (it&#39;s great for making sure your recent CSS commits or changes hasn&#39;t broken your site, it doesn&#39;t replace acceptance tests, unit tests or manual testing but it helps improve confidence). </p>
<p>In case you&#39;re wondering, the definition of &#39;wraith&#39; is…</p>
<blockquote>
<p>a ghost or ghostlike image of someone</p>
</blockquote>
<p>…see what we did there, Phantom… ghost… wraith… yeah?</p>
<p>But there are other spin-offs such as <a href="http://casperjs.org/">CasperJS</a> and <a href="https://github.com/jonleighton/poltergeist#poltergeist---a-phantomjs-driver-for-capybara">Poltergeist</a> both of which are named on a variation of the phantom theme but focus specifically on user/acceptance testing a user interface by allowing developers to interact with a web page programmatically.</p>
<h2><a name="how-can-we-use-it-"class="anchor" href="#how-can-we-use-it-"><span class="header-link"></span></a>How can we use it?</h2>
<p>We&#39;ll be using PhantomJS to help us interrogate a web page of the user&#39;s choice. It will check the network requests, store them and then generate a Application Cache manifest file based on the content of the web page.</p>
<p>So I wrote a small script that allows you to do this which I called <a href="https://github.com/integralist/squirrel">Squirrel</a> because you&#39;re storing away small pieces of information… like… nuts? Yeah I think you see where I&#39;m coming from.</p>
<p>This is very much a work in progress but the principles are there and it also demonstrates some different parts of PhantomJS that you might be interested in.</p>
<p>I won&#39;t go into the details of what the Application Cache does (or should do), I&#39;ll <a href="http://www.html5rocks.com/en/tutorials/appcache/beginner/">leave that to another</a>.</p>
<h2><a name="basic-introduction"class="anchor" href="#basic-introduction"><span class="header-link"></span></a>Basic introduction</h2>
<p>Here&#39;s a super quick introduction on how to use PhantomJS… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">(),</span>
    <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://www.phantomjs.org/&#39;</span><span class="p">;</span>

<span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Page is loaded!</span>
    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>…here we load the PhantomJS <code>webpage</code> module, and call the <code>create()</code> method which instantiates a new web page.</p>
<p>We then call the <code>open()</code> method on this web page object and pass in the URL of the web page we want to open.</p>
<p>We then execute the <code>exit()</code> method on Phantom itself which tells the script that we&#39;re finished doing what we&#39;re doing.</p>
<p>That&#39;s it. Super simple run down of how to use PhantomJS.</p>
<h2><a name="let-s-break-down-squirrel"class="anchor" href="#let-s-break-down-squirrel"><span class="header-link"></span></a>Let&#39;s break down Squirrel</h2>
<p>OK, so let&#39;s review our Squirrel repo (specifically the <code>appcache.js</code> file).</p>
<p>The process of our script is as follows…</p>
<ol>
<li>Set-up variables and load specific modules</li>
<li>Set-up event listeners for resources requested, received and any errors detected.</li>
<li>In the <code>onResourceReceived</code> we check the <code>contentType</code> of the resource and if it falls into any of the categories we&#39;re interested in (image, style sheet, javascript) then we store it.</li>
<li>Check the URL provided by the user is in the required format.</li>
<li>If the URL is our example <code>bbc.co.uk/news</code> then set an additional cookie (required to load the Responsive version of BBC News site)</li>
<li>Open the URL specified by the user (the clean-up version).</li>
<li>Get a list of all anchors/links found in the web page.</li>
<li>Make sure we have a unique list of each resource type.</li>
<li>Call a function <code>populateManifest()</code> that will begin the process of populating our manifest file.</li>
<li>Exit our PhantomJS script.</li>
</ol>
<h3><a name="set-up"class="anchor" href="#set-up"><span class="header-link"></span></a>Set-up</h3>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">_</span>          <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;lodash&#39;</span><span class="p">),</span>
    <span class="nx">system</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;system&#39;</span><span class="p">),</span>
    <span class="nx">fs</span>         <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>
    <span class="nx">page</span>       <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">(),</span>
    <span class="nx">args</span>       <span class="o">=</span> <span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span>
    <span class="nx">path</span>       <span class="o">=</span> <span class="s1">&#39;./appcache.manifest&#39;</span><span class="p">,</span>
    <span class="nx">manifest</span>   <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">path</span><span class="p">),</span>
    <span class="nx">css</span>        <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">jpgs</span>       <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">pngs</span>       <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">gifs</span>       <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">images</span>     <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">javascript</span> <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">links</span><span class="p">,</span> <span class="nx">url</span><span class="p">;</span>
</pre></div>
</code></pre>
<p>…OK so this looks a bit ugly but this long list of variables is basically us loading the Lo-Dash utility library, the Node file system, the PhantomJS web page module and then grabbing any arguments passed via the command line and reading the content of our manifest file.</p>
<p>You might be wondering about the long list of empty Arrays, well we have to set each variable to an empty Array because Arrays are a reference type object which means if we did <code>var css = jpgs = pngs = gifs = images = javascript = [];</code> then although we&#39;d end up with shorter code (a one liner) it means that we&#39;re not getting a unique Array for each variable but sharing a single Array instance (which isn&#39;t what we want).</p>
<h3><a name="functions"class="anchor" href="#functions"><span class="header-link"></span></a>Functions</h3>
<p>We have a whole group of functions that carry out different things for us, so we&#39;ll just quickly scan over them…</p>
<ul>
<li><p><code>getLinks</code> uses the PhantomJS&#39; <code>evaluate</code> method on the web page object (which lets you parse the open web page using JavaScript, meaning you run JavaScript code within the context of the open web page).</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">getLinks</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">page</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
      <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
      <span class="p">});</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="nx">results</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
</li>
<li><p><code>populateManifest</code> is called next but this just delegates calls to the following other functions.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">populateManifest</span><span class="p">(){</span>
  <span class="nx">writeVersion</span><span class="p">();</span>

  <span class="nx">writeListContentFor</span><span class="p">(</span><span class="s1">&#39;Images&#39;</span><span class="p">,</span> <span class="nx">images</span><span class="p">);</span>
  <span class="nx">writeListContentFor</span><span class="p">(</span><span class="s1">&#39;Internal HTML documents&#39;</span><span class="p">,</span> <span class="nx">links</span><span class="p">);</span>
  <span class="nx">writeListContentFor</span><span class="p">(</span><span class="s1">&#39;Style Sheets&#39;</span><span class="p">,</span> <span class="nx">css</span><span class="p">);</span>
  <span class="nx">writeListContentFor</span><span class="p">(</span><span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span> <span class="nx">javascript</span><span class="p">);</span>

  <span class="nx">writeManifest</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</code></pre>
</li>
<li><code>writeVersion</code> replaces the current time stamp within our manifest file (we&#39;re doing this in memory, not saving the change back to the manifest file yet).<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">writeVersion</span><span class="p">(){</span>
  <span class="nx">manifest</span> <span class="o">=</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/# Timestamp: \d+/i</span><span class="p">,</span> <span class="s1">&#39;# Timestamp: &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">());</span>
<span class="p">}</span>
</pre></div>
</code></pre>
</li>
<li><code>writeListContentFor</code> is called multiple times and is just an abstraction for a common pattern of code which looks through the manifest file content for &#39;hooks&#39; and then replace the content found with the updated content that we&#39;ve parsed from the page as it was loading (e.g. the event listener we set-up for <code>onResourceReceived</code> which checked the <code>contentType</code> of the resource being loaded).<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">writeListContentFor</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">manifest</span> <span class="o">=</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;(# &#39;</span> <span class="o">+</span> <span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;)\\n[\\s\\S]+?\\n\\n&#39;</span><span class="p">,</span> <span class="s1">&#39;igm&#39;</span><span class="p">),</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">cg</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">cg</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span> <span class="nx">type</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n\n&#39;</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</code></pre>
</li>
<li><code>writeManifest</code> opens up our original manifest file using Node&#39;s file system module and writes over the content with the new content string we&#39;ve constructed in the <code>manifest</code> variable.<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">writeManifest</span><span class="p">(){</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">manifest</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
</li>
<li><code>urlProvided</code> just checks to make sure an argument was provided by the user on the command line.<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">urlProvided</span><span class="p">(){</span>
  <span class="k">return</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="sr">/(?:www\.)?[a-z-z1-9]+\./i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
</li>
<li><code>cleanUrl</code> takes in a URL and formats it so it doesn&#39;t break PhantomJS<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">cleanUrl</span> <span class="p">(</span><span class="nx">providedUrl</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// If no http or https found at the start of the url...</span>
  <span class="k">if</span> <span class="p">(</span><span class="sr">/^(?!https?:\/\/)[\w\d]/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">providedUrl</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="nx">providedUrl</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
</li>
<li><code>bbcNews</code> checks to see if the URL is for the BBC News site (if it is then later on we&#39;ll do something specific for that scenario). It&#39;s not essential for the script to work, just something specific I wanted to demonstrate.<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">bbcNews</span><span class="p">(){</span>
  <span class="k">if</span> <span class="p">(</span><span class="sr">/bbc.co.uk\/news/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
</li>
</ul>
<h3><a name="checking-resources-that-are-loaded"class="anchor" href="#checking-resources-that-are-loaded"><span class="header-link"></span></a>Checking resources that are loaded</h3>
<p>The following is our event handler that checks the content type of the resource being loaded and stores it in the relevant Array.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">onResourceReceived</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Some requests can have `contentType = null` which causes errors if we don&#39;t check for truthy value</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;text/css&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">css</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// application/javascript &amp; application/x-javascript</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;javascript&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">javascript</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;image/png&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;data:image&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">pngs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;image/jpeg&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;data:image&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">jpgs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;image/gif&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;data:image&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">gifs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>To be honest we don&#39;t need to separate the content types out into jpg, gif and png. We could just have an images Array that holds them all - it would be cleaner and more efficient code, something like...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">onResourceReceived</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;text/css&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">css</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;javascript&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">javascript</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="sr">/image\/(?:png|jpeg|gif)/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">contentType</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;data:image&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">images</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<h3><a name="checking-for-errors"class="anchor" href="#checking-for-errors"><span class="header-link"></span></a>Checking for errors</h3>
<p>This should be self explanatory, but basically it checks for any errors that happen while the page is loading and displays them for the user… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">onError</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">trace</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>

    <span class="nx">trace</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;  &#39;</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">file</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">line</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="ensure-url-is-provided"class="anchor" href="#ensure-url-is-provided"><span class="header-link"></span></a>Ensure URL is provided</h3>
<p>Following conditional makes sure that a URL was provided by the user from the command line and if not it displays appropriate feedback to the user to let them know what they should be doing… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">urlProvided</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">url</span> <span class="o">=</span> <span class="nx">cleanUrl</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Sorry a valid URL should have been provided&#39;</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Example usage: phantomjs appcache.js bbc.co.uk/news&#39;</span><span class="p">);</span>
    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="setting-custom-headers"class="anchor" href="#setting-custom-headers"><span class="header-link"></span></a>Setting custom headers</h3>
<p>The following code isn&#39;t needed for our Squirrel repo to do its job, I just stuck it in to demonstrate how you could use an interesting feature of PhantomJS which is to set cookies.</p>
<p>Here we check if the URL being requested is BBC News and if so I want the user to load up the responsive code base version of the site, and to do that we need to set a cookie for the page to know to load that version of the page… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">bbcNews</span><span class="p">())</span> <span class="p">{</span>
    <span class="c1">// We want to serve up the responsive code base...</span>
    <span class="nx">phantom</span><span class="p">.</span><span class="nx">addCookie</span><span class="p">({</span>
        <span class="s1">&#39;name&#39;</span>  <span class="o">:</span> <span class="s1">&#39;ckps_d&#39;</span><span class="p">,</span>
        <span class="s1">&#39;value&#39;</span> <span class="o">:</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span>
        <span class="s1">&#39;domain&#39;</span><span class="o">:</span> <span class="s1">&#39;.bbc.co.uk&#39;</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="the-main-star-of-the-show"class="anchor" href="#the-main-star-of-the-show"><span class="header-link"></span></a>The main star of the show</h3>
<p>Here is the fundamental piece of the puzzle, the call to open the web page specified by the user and which once the page has loaded then parses the page for the information we&#39;re interested in…  </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">links</span> <span class="o">=</span> <span class="nx">getLinks</span><span class="p">();</span>

    <span class="nx">links</span>      <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">links</span><span class="p">);</span>
    <span class="nx">images</span>     <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">pngs</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">jpgs</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">gifs</span><span class="p">));</span>
    <span class="nx">css</span>        <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">css</span><span class="p">);</span>
    <span class="nx">javascript</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">javascript</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;links: &#39;</span><span class="p">,</span> <span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;images: &#39;</span><span class="p">,</span> <span class="nx">images</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;css: &#39;</span><span class="p">,</span> <span class="nx">css</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;javascript: &#39;</span><span class="p">,</span> <span class="nx">javascript</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>

    <span class="nx">populateManifest</span><span class="p">();</span>

    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>…PhantomJS passes us a status string as an argument to the callback function and which tells us if the page loaded successfully or not.</p>
<p>After we&#39;ve called our main <code>populateManifest()</code> method we then tell PhantomJS to stop (<code>phantom.exit()</code>).</p>
<h2><a name="example-usage"class="anchor" href="#example-usage"><span class="header-link"></span></a>Example usage</h2>
<p>So how do we use this script? Well, once you&#39;ve cloned down the repo and followed the installation instructions you simply jump inside our cloned directory and run something like:</p>
<p><code>phantomjs appcache.js bbc.co.uk/news</code></p>
<h2><a name="other-phantomjs-features"class="anchor" href="#other-phantomjs-features"><span class="header-link"></span></a>Other PhantomJS features</h2>
<p>Here follows are a quick run down of some other features available to you when using PhantomJS, just check the <a href="https://github.com/ariya/phantomjs/wiki/API-Reference">PhantomJS API</a> for full details.</p>
<ul>
<li>Custom Headers</li>
<li>Remote Debugging</li>
<li>View Port Sizing</li>
</ul>
<h3><a name="custom-headers"class="anchor" href="#custom-headers"><span class="header-link"></span></a>Custom Headers</h3>
<p>For BBC News I wrote a similar script, but because I was interrogating a local development URL which uses test data I had to set some additional headers to get the page to load live data…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">customHeaders</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="s1">&#39;X-Candy-Override&#39;</span><span class="o">:</span> <span class="s1">&#39;https://api.live.bbc.co.uk&#39;</span><span class="p">,</span>
    <span class="s1">&#39;X-Compiled-Js&#39;</span>   <span class="o">:</span> <span class="s1">&#39;true&#39;</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<h3><a name="remote-debugging"class="anchor" href="#remote-debugging"><span class="header-link"></span></a>Remote Debugging</h3>
<p>You can remote debug your code by executing your code with a debug flag <code>phantomjs --remote-debugger-port=9000 appcache.js [url]</code>, you can then open up Chrome or Safari and access the debugger via <code>http://127.0.0.1:9000/</code></p>
<h3><a name="view-port-size"class="anchor" href="#view-port-size"><span class="header-link"></span></a>View Port Size</h3>
<p>You can change the dimensions of the page being loaded using the <code>viewportSize</code> property (this is used in the <a href="http://github.com/BBC-News/wraith/">Wraith</a> open-source project released by BBC News)… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">page</span><span class="p">.</span><span class="nx">viewportSize</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">320</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">480</span> <span class="p">};</span>
</pre></div>
</code></pre>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>Hopefully this introduction to PhantomJS was useful. The Squirrel repo is still a work in progress so feel free to open up an issue (or better yet a pull request) on GitHub if you find any problems.</p>
<p>I&#39;ll likely follow up this article at some point in the future with one about using CasperJS so keep your eyes peeled for that.</p>
<p>Any other feedback then catch me on <a href="http://twitter.com/integralist">twitter</a>.</p>
]]></description><link>http://www.integralist.co.uk/posts/generate-application-cache-manifest-with-phantomjs/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/generate-application-cache-manifest-with-phantomjs/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 04 Aug 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Using Grunts Config API]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 11mins</em></p>
<ul>
<li>What was the problem again?</li>
<li>How were we solving this originally?</li>
<li>So what now?</li>
<li>How are we solving this now?</li>
<li>Let&#39;s review the solution</li>
<li>The Grunt API</li>
<li>Example code</li>
<li>Conclusion</li>
<li>Update</li>
</ul>
<h2><a name="what-was-the-problem-again-"class="anchor" href="#what-was-the-problem-again-"><span class="header-link"></span></a>What was the problem again?</h2>
<p>If you <a href="Dynamically-Generated-Grunt-Tasks.html">look at my previous post</a> you&#39;ll see the Sass architecture/structure we&#39;re currently using on the BBC News responsive website means that Sass is unable to watch changes in files outside of the specific language folders we&#39;ve asked Sass to watch (e.g. we tell Sass to watch the Arabic Sass files for changes, which it does that fine, but the Arabic files themselves import Sass files from a &#39;partials&#39; directory outside of the language directory and those files Sass cannot detect changes for).</p>
<h2><a name="how-were-we-solving-this-originally-"class="anchor" href="#how-were-we-solving-this-originally-"><span class="header-link"></span></a>How were we solving this originally?</h2>
<p>We use Grunt to handle our front-end tooling tasks (such as running Sass, linting CSS/JS, running JS unit-tests, running our AMD build script and a host of other things) and so we initially were just hard coding in the relevant <code>watch</code> and <code>sass</code> Grunt task commands to work around the issue.</p>
<p>Next (as per my previous Grunt post) we then tried dynamically updating the Grunt file by inserting hooks into the file which at runtime we would use to insert our dynamically generated stack of sub tasks. Although this works fine and didn&#39;t cause us any problems, it just felt… wrong?</p>
<h2><a name="so-what-now-"class="anchor" href="#so-what-now-"><span class="header-link"></span></a>So what now?</h2>
<p>Since publishing that Grunt post, the creator of Grunt (<a href="https://twitter.com/cowboy">Ben Alman</a>) suggested there was a better way using the Grunt API itself.</p>
<h2><a name="how-are-we-solving-this-now-then-"class="anchor" href="#how-are-we-solving-this-now-then-"><span class="header-link"></span></a>How are we solving this now then?</h2>
<p>Exactly as Ben suggested, by using the Grunt API. Specifically: <code>grunt.config.set</code> (there are other Grunt API&#39;s involved but this one is the fundamental solution).</p>
<h2><a name="let-s-review-the-solution"class="anchor" href="#let-s-review-the-solution"><span class="header-link"></span></a>Let&#39;s review the solution</h2>
<h3><a name="we-have-three-files-"class="anchor" href="#we-have-three-files-"><span class="header-link"></span></a>We have three files…</h3>
<ul>
<li>Gruntfile.js</li>
<li>grunt-customtasks.js</li>
<li>grunt-helpers.js</li>
</ul>
<p>The first file you should all know (if you don&#39;t then have a read back over my original <a href="Grunt-Boilerplate.html">Grunt Boilerplate</a> post).</p>
<p>The second file is a generic file we&#39;re using to store our custom Grunt tasks (and ultimately is what does most of the work for this particular problem).</p>
<p>The third file is again another generic file but this time we use it to store any additional utility helper methods.</p>
<h3><a name="here-s-how-they-re-used-"class="anchor" href="#here-s-how-they-re-used-"><span class="header-link"></span></a>Here&#39;s how they&#39;re used…</h3>
<p>Our Gruntfile.js pulls in the grunt-customtasks.js file like so: <code>require(&#39;./grunt-customtasks.js&#39;)(grunt);</code>. You&#39;ll notice that the module we&#39;re pulling in is actually a function which we execute immediately and pass it a reference to Grunt (which means our custom tasks module can access Grunt and use its API).</p>
<p>The grunt-customtasks.js module itself pulls in the grunt-helpers.js file like so: <code>var util = require(&#39;./grunt-helpers.js&#39;)(grunt);</code>. Again you&#39;ll notice that the module we&#39;re pulling in is actually a function, we execute it and pass in a reference to Grunt, but this module (although a function) once executed then returns an object which we assign to the variable <code>util</code>. The returned object has some useful methods we can use to implement our solution.</p>
<p>Looking again at grunt-customtasks.js we have the following custom Grunt tasks… </p>
<ul>
<li><code>sass_compile</code></li>
<li><code>config</code></li>
<li><code>watch_service</code></li>
</ul>
<p>…now normally when using a pre-built Grunt task such as a the Sass task, the user would execute something like <code>sass:my_sub_task</code>, but our users won&#39;t ever directly interact with the Sass task. This is because there are no Sass sub tasks in our Grunt file to use! Instead they&#39;ll use our facade <code>sass_compile</code> which at run time will dynamically generate the Sass sub task they have requested.</p>
<p>Same for the pre-built Watch task. The user will use our <code>watch_service</code> custom task which is a facade that dynamically generates the requested watch task at run time.</p>
<h3><a name="sass_compile"class="anchor" href="#sass_compile"><span class="header-link"></span></a>sass_compile</h3>
<p>This task dynamically generates our Sass sub tasks (e.g. <code>sass:arabic</code>). It uses the Grunt Config API to dynamically set this up (we&#39;ll look at this in more detail later on).</p>
<p>In this task we have to carry out some checks on the sub task that we are going to create. The reason being: we want to let the user know whether they&#39;ve requested a service that doesn&#39;t exist. </p>
<p>If the user executes <code>sass:something_that_does_not_exist</code> we don&#39;t want to just create that Sass sub task because ultimately it&#39;ll not do anything and that would be very confusing to the user who expects it to work (or maybe they entered a typo and haven&#39;t realised) - so we need to give the user feedback to let them know the command they entered isn&#39;t recognised.</p>
<p>So we use our own utility/helper method <code>util.serviceExists</code> to check whether the requested service actually exists or not. If it does then we go ahead and dynamically generate the sub task, otherwise we display a message to the user to let them know the service doesn&#39;t exist.</p>
<p>We also have slightly different settings for the sub task depending on what service was requested. If the user enters a language as the service <code>sass_compile:arabic</code> then we&#39;ll use development settings such as enabling <code>debugInfo</code> and turning on <code>lineNumbers</code> and making sure the code is <code>expanded</code> and not <code>compressed</code>, but if they enter <code>sass_compile:dist</code> we&#39;ll make sure the compiled code is ready for distribution.</p>
<h3><a name="watch_service"class="anchor" href="#watch_service"><span class="header-link"></span></a>watch_service</h3>
<p>This custom task is much like <code>sass_compile</code> in that it first checks that the service being requested is valid and if so will continue to dynamically generate a watch sub task.</p>
<p>But there is additional work required in this task. Let&#39;s just take a moment to remember the purpose of the <code>watch</code> task which is to tell Grunt to execute another Grunt task (pre-built or custom) when the files being watched are changed. </p>
<p>We hit a problem when first implementing this solution which was that when the Watch sub task was generated we had set it to execute a Sass sub task matching the service requested. </p>
<p>So for example if the user ran <code>watch_service:arabic</code> we would tell Grunt that when those files changed then it should execute the Sass sub task <code>sass:arabic</code>. But that Sass sub task didn&#39;t exist at that point because the user hadn&#39;t previously run <code>sass_compile:arabic</code> (remember, our Sass task inside our Gruntfile.js is empty).</p>
<p>To work around this we told the Watch sub task to execute two tasks when the watched files changed. The first task to execute was <code>config</code> and that would be passed the service name that was passed to the <code>watch_service</code> task. For example, <code>config:arabic</code> and <em>then</em> after that we would execute <code>sass:arabic</code> (or whatever service was requested).</p>
<p>Let&#39;s have a look now at the <code>config</code> task to see what that does… </p>
<h3><a name="config"class="anchor" href="#config"><span class="header-link"></span></a>config</h3>
<p>So as explained above, we needed to call this task before calling the Sass sub task (because at that point the sub task that needed to be executed didn&#39;t exist).</p>
<p>In this custom task all we do is literally call our <code>sass_compile</code> custom task, pass through the requested service but also pass through an additional parameter which lets the <code>sass_compile</code> task know that it should just create the Sass sub task and not execute it.</p>
<p>To explain, if the user runs <code>sass_compile:arabic</code> that task will not only dynamically generate a Sass sub task (e.g. <code>sass:arabic</code>), but once created will actually execute that task  now it exists. But if the user has run the <code>watch_service</code> task, we call this <code>config</code> task which delegates onto <code>sass_compile</code>, but we don&#39;t want the Sass sub task we&#39;ve just generated to be executed because the files being watched haven&#39;t necessarily been changed! So we wrote <code>sass_compile</code> in a way that said &quot;if this particular parameter is passed through, then just create the Sass sub task but don&#39;t execute it&quot;.</p>
<h2><a name="the-grunt-api"class="anchor" href="#the-grunt-api"><span class="header-link"></span></a>The Grunt API</h2>
<p>Before we get to see our finished code let&#39;s first take a look at the Grunt API we&#39;re using to implement this solution (sorry, I know there has been a lot of talk up until this point, but we&#39;re almost done explaining how everything has been put together, I promise!)</p>
<p>So the API&#39;s we&#39;re using are… </p>
<ul>
<li><code>grunt.config.get</code></li>
<li><code>grunt.config.set</code></li>
<li><code>grunt.task.run</code></li>
<li><code>grunt.file.expand</code></li>
</ul>
<h3><a name="grunt-config-get"class="anchor" href="#grunt-config-get"><span class="header-link"></span></a>grunt.config.get</h3>
<p>If you call <code>grunt.config.get()</code> then you&#39;ll get a copy of the entire <code>grunt.initConfig</code> object back. If you pass in a property like <code>grunt.config.get(&#39;sass&#39;)</code> you get the value of that specific property.</p>
<h3><a name="grunt-config-set"class="anchor" href="#grunt-config-set"><span class="header-link"></span></a>grunt.config.set</h3>
<p>If you call <code>grunt.config.set(property, value)</code> then you&#39;ll set that property and its corresponding value on the <code>grunt.initConfig</code> object.</p>
<p>Be aware you can only set a single value onto a property, so if you wanted to create multiple sub tasks for a property (such as creating multiple sub tasks for the Sass task) then you would have to first construct an object containing the sub tasks and then assign that whole object as the property value.</p>
<h3><a name="grunt-task-run"class="anchor" href="#grunt-task-run"><span class="header-link"></span></a>grunt.task.run</h3>
<p>This method simply lets you run any task (custom, pre-built, sub task) from within your code.</p>
<p>So if I had a variable called <code>service</code> and it had a value of &#39;arabic&#39; then running <code>grunt.task.run(&#39;watch:&#39; + service)</code> would run <code>watch:arabic</code>.</p>
<p>We use this API method inside our <code>watch_service</code>, <code>config</code> and <code>sass_compile</code> custom tasks.</p>
<h3><a name="grunt-file-expand"class="anchor" href="#grunt-file-expand"><span class="header-link"></span></a>grunt.file.expand</h3>
<p>This API method is used indirectly via our <code>util</code> helper object. We have a method called <code>serviceExists</code> which takes in a service and checks whether it exists or not. That method checks a <code>service</code> property on our <code>util</code> object which is an Array holding the services we have available.</p>
<p>The way that <code>service</code> Array is populated is via the <code>grunt.file.expand</code> API call. We pass the method a file glob and it returns an Array of all directories/files that match the glob provided. </p>
<p>So for example, <code>grunt.file.expand(&#39;sass/services/*&#39;)</code> returns an Array of all folders within our Sass/Services directory. As you&#39;ll see in the example code below we actually filter out some folders that we know aren&#39;t valid.</p>
<h2><a name="example-code"class="anchor" href="#example-code"><span class="header-link"></span></a>Example code</h2>
<p>OK, finally we get to see some code! Hopefully by now it should be much clearer as to what it&#39;s doing and why… </p>
<h3><a name="grunt-customtasks-js"class="anchor" href="#grunt-customtasks-js"><span class="header-link"></span></a>grunt-customtasks.js</h3>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./grunt-helpers.js&#39;</span><span class="p">)(</span><span class="nx">grunt</span><span class="p">);</span>

    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;sass_compile&#39;</span><span class="p">,</span> <span class="s1">&#39;Dynamically generate Sass sub task&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">,</span> <span class="nx">calledFromConfigTask</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">util</span><span class="p">.</span><span class="nx">serviceExists</span><span class="p">(</span><span class="nx">service</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Sorry, that service does not exist&#39;</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kd">var</span> <span class="nx">_</span>          <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;lodash&#39;</span><span class="p">),</span>
            <span class="nx">src</span>        <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;**/*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!**/_*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!locator/*.scss&#39;</span><span class="p">],</span>
            <span class="nx">debug</span>      <span class="o">=</span> <span class="p">{</span> <span class="nx">debugInfo</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">lineNumbers</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
            <span class="nx">style</span>      <span class="o">=</span> <span class="s1">&#39;expanded&#39;</span><span class="p">,</span>
            <span class="nx">requested</span>  <span class="o">=</span> <span class="nx">service</span><span class="p">,</span>
            <span class="nx">cwd</span> <span class="o">=</span> <span class="nx">dest</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
            <span class="nx">service</span>    <span class="o">=</span> <span class="p">{},</span>
            <span class="nx">config</span><span class="p">;</span>

        <span class="nx">service</span><span class="p">[</span><span class="nx">requested</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>

        <span class="k">switch</span> <span class="p">(</span><span class="nx">requested</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="s1">&#39;dist&#39;</span><span class="o">:</span>
                <span class="nx">style</span> <span class="o">=</span> <span class="s1">&#39;compressed&#39;</span><span class="p">;</span>
                <span class="nx">debug</span> <span class="o">=</span> <span class="p">{};</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;dev&#39;</span><span class="o">:</span>
                <span class="c1">// Want to prevent setting cwd/dest to the service name</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="nx">src</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!_*.scss&#39;</span><span class="p">];</span>
                <span class="nx">cwd</span> <span class="o">=</span> <span class="nx">dest</span> <span class="o">=</span> <span class="s1">&#39;services/&#39;</span> <span class="o">+</span> <span class="nx">requested</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">style</span><span class="o">:</span> <span class="nx">style</span><span class="p">,</span>
                <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= dir.static_sass %&gt;partials/helpers/url64.rb&#39;</span><span class="p">]</span>
            <span class="p">},</span>
            <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;&lt;%= dir.static_sass %&gt;&#39;</span> <span class="o">+</span> <span class="nx">cwd</span><span class="p">,</span>
            <span class="nx">src</span><span class="o">:</span> <span class="nx">src</span><span class="p">,</span>
            <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= dir.static_css %&gt;&#39;</span> <span class="o">+</span> <span class="nx">dest</span><span class="p">,</span>
            <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span>
        <span class="p">}</span>

        <span class="nx">_</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span> <span class="nx">debug</span><span class="p">);</span>
        <span class="nx">_</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">service</span><span class="p">[</span><span class="nx">requested</span><span class="p">],</span> <span class="nx">config</span><span class="p">);</span>

        <span class="nx">grunt</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;sass&#39;</span><span class="p">,</span> <span class="nx">service</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">calledFromConfigTask</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="s1">&#39;sass:&#39;</span> <span class="o">+</span> <span class="nx">requested</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="s1">&#39;Add dynamically generated Sass sub task into config object but does not run the sub task&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="s1">&#39;sass_compile:&#39;</span> <span class="o">+</span> <span class="nx">service</span> <span class="o">+</span> <span class="s1">&#39;:watch&#39;</span><span class="p">);</span> <span class="c1">// ensure sub task exists before running the dynamically created watch sub task</span>
    <span class="p">});</span>

    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;watch_service&#39;</span><span class="p">,</span> <span class="s1">&#39;Dynamically generate Watch (and Sass) sub tasks and then run the relevant watch task&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">util</span><span class="p">.</span><span class="nx">serviceExists</span><span class="p">(</span><span class="nx">service</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Sorry, that service does not exist&#39;</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="p">{};</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">service</span> <span class="o">===</span> <span class="s1">&#39;all&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">content</span><span class="p">.</span><span class="nx">all</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= jshint.files %&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;%= dir.static_sass %&gt;**/*.scss&#39;</span><span class="p">],</span>
                <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;config:dev&#39;</span><span class="p">,</span> <span class="s1">&#39;default&#39;</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">content</span><span class="p">[</span><span class="nx">service</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= dir.static_sass %&gt;partials/**/*.scss&#39;</span><span class="p">,</span>
                        <span class="s1">&#39;&lt;%= dir.static_sass %&gt;services/&#39;</span> <span class="o">+</span> <span class="nx">service</span> <span class="o">+</span> <span class="s1">&#39;/*.scss&#39;</span><span class="p">],</span>
                <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;config:&#39;</span> <span class="o">+</span> <span class="nx">service</span><span class="p">,</span> <span class="s1">&#39;sass:&#39;</span> <span class="o">+</span> <span class="nx">service</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">grunt</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="nx">content</span><span class="p">);</span>
        <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="s1">&#39;watch:&#39;</span> <span class="o">+</span> <span class="nx">service</span><span class="p">);</span>
    <span class="p">});</span>

<span class="p">};</span>
</pre></div>
</code></pre>
<h3><a name="grunt-helpers-js"class="anchor" href="#grunt-helpers-js"><span class="header-link"></span></a>grunt-helpers.js</h3>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">removePath</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">element</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">).</span><span class="nx">pop</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">removeBlacklistedDirectories</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;journalism&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">services</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">expand</span><span class="p">(</span><span class="s1">&#39;tabloid/webapp/static/sass/services/*&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">removePath</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">removeBlacklistedDirectories</span><span class="p">),</span>
        <span class="nx">serviceExists</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">services</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">service</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="nx">isBlacklistedTask</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;pkg&#39;</span><span class="p">,</span> <span class="s1">&#39;dir&#39;</span><span class="p">,</span> <span class="s1">&#39;noop&#39;</span><span class="p">,</span> <span class="s1">&#39;config&#39;</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">task</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>So there you have it. A real-world look at using the Grunt API to do something a little bit more involved with Grunt. Hopefully you found it useful and will give you a better idea of how you can integrate Grunt with your own work flow and solve your own specific domain problems.</p>
<h2><a name="update"class="anchor" href="#update"><span class="header-link"></span></a>Update</h2>
<p>A quick update to say we found a much simpler route to handle the dynamic generation of Sass content and this came from recognising Grunt&#39;s ability to access arguments passed through the command line: <code>&lt;%= grunt.task.current.args[0] %&gt;</code>.</p>
<p>With this knowledge we then call the task like so: <code>&#39;sass:service:&lt;%= grunt.task.current.args[0] %&gt;&#39;</code>.</p>
<p>Goes to show it&#39;s always worth your time reading through all of the API documentation for the tools you use to discover these little gems :-)</p>
<p>So here is a more realistic example...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">sass</span><span class="o">:</span> <span class="p">{</span>
    <span class="cm">/*</span>
<span class="cm">        Example usage...</span>

<span class="cm">        grunt sass:service:afrique</span>
<span class="cm">        grunt sass:service:news</span>
<span class="cm">     */</span>
    <span class="nx">service</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;/sass/&#39;</span><span class="p">,</span>
        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;services/&lt;%= grunt.task.current.args[0] %&gt;/*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!**_*.scss&#39;</span><span class="p">],</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;/stylesheets/&#39;</span><span class="p">,</span>
        <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span>
    <span class="p">},</span>
    <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;/sass/&#39;</span><span class="p">,</span>
        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;**/*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!**/_*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!locator/*.scss&#39;</span><span class="p">],</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;/stylesheets/&#39;</span><span class="p">,</span>
        <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span><span class="p">,</span>
        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">style</span><span class="o">:</span> <span class="s2">&quot;compressed&quot;</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">dev</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;/sass/&#39;</span><span class="p">,</span>
        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;**/*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!**/_*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!locator/*.scss&#39;</span><span class="p">],</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;/stylesheets/&#39;</span><span class="p">,</span>
        <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span><span class="p">,</span>
        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">debugInfo</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">lineNumbers</span><span class="o">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;expanded&#39;</span><span class="p">,</span>
        <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;/sass/partials/helpers/url64.rb&#39;</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
]]></description><link>http://www.integralist.co.uk/posts/using-grunts-config-api/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/using-grunts-config-api/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Fri, 21 Jun 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dynamically Generated Grunt Tasks]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 10mins</em></p>
<ul>
<li>Background</li>
<li>What are we trying to do?</li>
<li>So what&#39;s the problem?</li>
<li>So what are we going to do?</li>
<li>How are we going to do it?</li>
<li>Example code</li>
<li>Conclusion</li>
</ul>
<h2><a name="background"class="anchor" href="#background"><span class="header-link"></span></a>Background</h2>
<p>I work on the BBC News responsive website. You may have seen <a href="http://twitter.com/jcleveley">@jcleveley</a> and <a href="http://twitter.com/tmaslen">@tmaslen</a> speak at a few different conferences about how we went about putting the responsive codebase together and how we handle issues like responsive images (in a recent issue of .net magazine both were interviewed to share their thoughts on responsive, device testing and other such matters).</p>
<p>I&#39;m in the process of integrating <a href="http://gruntjs.com/">Grunt.js</a> into our work flow. If you&#39;re not sure what Grunt is all about then check out a <a href="http://integralist.co.uk/Grunt-Boilerplate.html">previous post of mine</a> where I explain what it is and how it works and how you might want to use it (including a link to my Grunt Boilerplate project on GitHub).</p>
<p>It&#39;s because of this that we ran into a concern about keeping Grunt maintainable/scalable…</p>
<h2><a name="what-are-we-trying-to-do-"class="anchor" href="#what-are-we-trying-to-do-"><span class="header-link"></span></a>What are we trying to do?</h2>
<p>At BBC News we have our core product and we have 27 different language services.</p>
<p>We&#39;re in the process of moving all 27 languages over to our responsive code base. We&#39;ve only moved over 8 so far and already we&#39;ve noticed an issue with how we set-up Grunt to handle compilation of our <a href="http://sass-lang.com/">Sass</a> files into CSS.</p>
<p>Given we have quite a few Sass files within the responsive code base (and more are being added every time we move a language service over to responsive), the time to compile is exponentially growing.</p>
<p>The issue is actually a slightly deeper one in it&#39;s a fundamental problem with Sass. We divide up our languages into separate sub folders so it&#39;s easier to maintain, like so...</p>
<ul>
<li>/partials/<ul>
<li>/mixins/</li>
<li>etc</li>
</ul>
</li>
<li>/services/<ul>
<li>/afrique/</li>
<li>/arabic/</li>
<li>/hausa/</li>
<li>etc</li>
</ul>
</li>
</ul>
<p>...but Sass has issues with how it &#39;watches&#39; folders and so this structure doesn&#39;t work very well with it. </p>
<p>By that I mean, if we watch a single language folder (let&#39;s say &#39;arabic&#39;), Sass can detect changes to the files inside the arabic folder, but it can&#39;t detect changes to any <code>@import</code>&#39;ed files that may sit outside of that folder (such as any /partials/ that may have been imported).</p>
<p>To work-around this issue we set-up Grunt to watch specific directories for changes and to run a specific Sass sub task so only the files relevant are compiled but also allows us to properly watch a single language and still detect changes to partial files being imported. </p>
<p>For example, if one of the World Service teams are working on the Arabic site then they&#39;ll run <code>grunt watch:arabic</code> and any time those specific Sass files change then we execute the Sass sub task <code>grunt sass:arabic</code>.</p>
<p>This all works fine.</p>
<h2><a name="so-what-s-the-problem-"class="anchor" href="#so-what-s-the-problem-"><span class="header-link"></span></a>So what&#39;s the problem?</h2>
<p>The problem we have is that adding a new language to the Grunt file is a manual process. If we have 27 languages this is a lot of duplicated code that needs to be created (and manually) every time a new language is being moved over to the responsive code base.</p>
<p>That goes against the principle of DRY (Don&#39;t Repeat Yourself).</p>
<h2><a name="so-what-are-we-going-to-do-"class="anchor" href="#so-what-are-we-going-to-do-"><span class="header-link"></span></a>So what are we going to do?</h2>
<p>We&#39;re going to automate the process!</p>
<h2><a name="how-are-we-going-to-do-it-"class="anchor" href="#how-are-we-going-to-do-it-"><span class="header-link"></span></a>How are we going to do it?</h2>
<p>We&#39;re going to take advantage of the fact that we have access to Node.js (as Grunt utilises it and its package manager NPM).</p>
<p>So we&#39;re going to use Node with a little bit of Grunt to rewrite the Grunt file itself. We&#39;ll dynamically generate and insert sub tasks for both the Watch and Sass Grunt tasks (that&#39;s a bit of a mouthful).</p>
<p>I&#39;m not going to comment the following code too much because a lot of it should be self explanatory. I will be providing notes below on what the code is doing so you can understand the flow of what the scripts do and why I&#39;m doing certain things (but the code itself you should be able to read without any problems)…</p>
<h2><a name="example-code"class="anchor" href="#example-code"><span class="header-link"></span></a>Example code</h2>
<p>The code ranges over three files…</p>
<ol>
<li>Gruntfile.js</li>
<li>grunt-customtasks.js</li>
<li>grunt-dynamic.js</li>
</ol>
<h3><a name="gruntfile-js"class="anchor" href="#gruntfile-js"><span class="header-link"></span></a>Gruntfile.js</h3>
<p>So the first file is obviously our main Grunt application file. </p>
<p>Inside that file we have the following code (note: this is a <em>really</em> stripped back version just so it&#39;s a little bit more readable)…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>

    <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>

        <span class="nx">dir</span><span class="o">:</span> <span class="p">{</span>
            <span class="kr">static</span><span class="o">:</span> <span class="s1">&#39;./tabloid/webapp/static/&#39;</span><span class="p">,</span>
            <span class="nx">static_sass</span><span class="o">:</span> <span class="s1">&#39;&lt;%= dir.static %&gt;&#39;</span> <span class="o">+</span> <span class="s1">&#39;sass/&#39;</span><span class="p">,</span>
            <span class="nx">static_css</span><span class="o">:</span> <span class="s1">&#39;&lt;%= dir.static %&gt;&#39;</span> <span class="o">+</span> <span class="s1">&#39;stylesheets/&#39;</span><span class="p">,</span>
        <span class="p">},</span>

        <span class="nx">sass</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;compressed&#39;</span><span class="p">,</span>
                    <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= dir.static_sass %&gt;partials/helpers/url64.rb&#39;</span><span class="p">]</span>
                <span class="p">},</span>
                <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;&lt;%= dir.static_sass %&gt;&#39;</span><span class="p">,</span>
                <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;**/*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!**/_*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!locator/*.scss&#39;</span><span class="p">],</span>
                <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= dir.static_css %&gt;&#39;</span><span class="p">,</span>
                <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span>
            <span class="p">},</span>
            <span class="nx">dev</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;expanded&#39;</span><span class="p">,</span>
                    <span class="nx">debugInfo</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">lineNumbers</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= dir.static_sass %&gt;partials/helpers/url64.rb&#39;</span><span class="p">]</span>
                <span class="p">},</span>
                <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;&lt;%= dir.static_sass %&gt;&#39;</span><span class="p">,</span>
                <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;**/*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!**/_*.scss&#39;</span><span class="p">,</span> <span class="s1">&#39;!locator/*.scss&#39;</span><span class="p">],</span>
                <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= dir.static_css %&gt;&#39;</span><span class="p">,</span>
                <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span>
            <span class="p">}</span>
            <span class="c1">// Dynamic Sass Content</span>
            <span class="c1">// Dynamic Sass Content Ended</span>
        <span class="p">},</span>

        <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
            <span class="c1">// Dynamic Watch Content</span>
            <span class="c1">// Dynamic Watch Content Ended</span>
        <span class="p">}</span>

    <span class="p">});</span>

    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-sass&#39;</span><span class="p">);</span>

    <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./grunt-dynamic.js&#39;</span><span class="p">)(</span><span class="nx">grunt</span><span class="p">);</span>
    <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./grunt-customtasks.js&#39;</span><span class="p">)(</span><span class="nx">grunt</span><span class="p">);</span>

<span class="p">};</span>
</pre></div>
</code></pre>
<p>…as you can see we have loaded the relevant Sass and Watch Grunt tasks and we&#39;ve set-up some default configurations for them.</p>
<p>You&#39;ll also see that we&#39;re loading in the two other scripts I mentioned previously at the bottom of the Gruntfile. These files <code>export</code> a function, which means when the scripts are loaded we can store off their return value (in this case the return value is a function which we can execute whenever we want to). In this case I&#39;m executing the returned functions the very moment the scripts are loaded.</p>
<p>The final part of this Gruntfile to pay attention to is the use of some code comments for the Sass task <code>// Dynamic Sass Content</code> and <code>// Dynamic Sass Content Ended</code> (there is also the same for the &#39;Watch&#39; task).</p>
<p>I use these code comments as a hook. Because we&#39;re opening up the Gruntfile and editing it dynamically we need an easy way to find the content we want to replace. Using code comments gives us that easy hook. Otherwise we&#39;d need some pretty hairy code/syntax parsing to figure out where we need to insert new dynamically generated content.</p>
<h3><a name="grunt-customtasks-js"class="anchor" href="#grunt-customtasks-js"><span class="header-link"></span></a>grunt-customtasks.js</h3>
<p>OK, this isn&#39;t strictly speaking a file that has anything to do with the problem/solution that we&#39;re working on. The reason I&#39;ve included it here is because you&#39;ll see that I&#39;ve written two custom Grunt tasks which I&#39;ve gone ahead and made the assumption that A.) this would be of interest to those of you reading this and B.) one of the custom tasks was quite useful in helping me quickly test my code was working... </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;noop&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;noop run&#39;</span><span class="p">);</span> <span class="p">});</span>

    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;concat_specjs&#39;</span><span class="p">,</span> <span class="s1">&#39;Concatenate all JS test/spec files into a single file&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">specs</span> <span class="o">=</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">expand</span><span class="p">(</span><span class="s1">&#39;tabloid/webapp/static/js/jasmine/spec/*.js&#39;</span><span class="p">),</span>
            <span class="nx">contents</span><span class="p">;</span>

        <span class="nx">specs</span> <span class="o">=</span> <span class="nx">specs</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file_path</span><span class="p">){</span>
            <span class="k">return</span> <span class="s2">&quot;&#39;&quot;</span> <span class="o">+</span> <span class="nx">file_path</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;tabloid/webapp/static/js/&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.js&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
        <span class="p">});</span>

        <span class="nx">contents</span> <span class="o">=</span> <span class="s2">&quot;define([\n&quot;</span> <span class="o">+</span> <span class="nx">specs</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,\n&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;], \nfunction(){ return &#39;&#39;; });&quot;</span><span class="p">;</span>

        <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;tabloid/webapp/static/js/jasmine-runner.js&#39;</span><span class="p">,</span> <span class="nx">contents</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>The custom task &#39;concat_specjs&#39; is a good look at how you can use Grunt/Node.js to search for files within specific directories and manipulate them by opening them up and writing content into them using the Grunt API. Nothing actually really complicated about it to be honest, the code speaks for itself.</p>
<p>The reason I created a &#39;noop&#39; (which stands for &#39;no-op&#39;, no-operation) task is because I wanted to test how my code was running without actually running any tasks that would take longer than a nano second to run. Hence I created a custom task that basically does nothing and is there only to see how my dynamic content generation would be affected by running a Grunt task.</p>
<p>The only other thing worth mentioning is the <code>module.exports = function(grunt){};</code> that wraps around our code. Effectively this file when loaded is a standalone module. This module could just execute some code and end there. But this module needs to have access to Grunt and to do that we make sure the module exports some data (in this case it exports itself as a function) which can be stored off when the module is loaded and utilised however necessary.</p>
<p>So in this case I&#39;m exporting my code as function which takes in a single argument called <code>grunt</code> -&gt; which is the actual Grunt passed down into it from our main Gruntfile.js when we included the line <code>require(&#39;./grunt-customtasks.js&#39;)(grunt);</code>.</p>
<h3><a name="grunt-dynamic-js"class="anchor" href="#grunt-dynamic-js"><span class="header-link"></span></a>grunt-dynamic.js</h3>
<p>This is where the actual work comes in… finally!</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">),</span>
        <span class="nx">services</span> <span class="o">=</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">expand</span><span class="p">(</span><span class="s1">&#39;tabloid/webapp/static/sass/services/*&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">removePath</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">removeBlacklistedDirectories</span><span class="p">),</span>
        <span class="nx">watch_subtasks</span> <span class="o">=</span> <span class="nx">generateWatchSubTasks</span><span class="p">(),</span> 
        <span class="nx">sass_subtasks</span> <span class="o">=</span> <span class="nx">generateSassSubTasks</span><span class="p">();</span>

    <span class="kd">function</span> <span class="nx">removePath</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">element</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">).</span><span class="nx">pop</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">removeBlacklistedDirectories</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;journalism&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">generateWatchSubTasks</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">generatedContent</span> <span class="o">=</span> <span class="s1">&#39;// Dynamic Watch Content\n            &#39;</span><span class="p">;</span>

        <span class="nx">services</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">generatedContent</span> <span class="o">+=</span> <span class="s2">&quot;,\n            &quot;</span> <span class="o">+</span> <span class="nx">service</span> <span class="o">+</span> <span class="s2">&quot;: {\n\</span>
<span class="s2">                files: [&#39;&lt;%= dir.static_sass %&gt;/partials/**/*.scss&#39;,\n\</span>
<span class="s2">                        &#39;&lt;%= dir.static_sass %&gt;services/&quot;</span> <span class="o">+</span> <span class="nx">service</span> <span class="o">+</span> <span class="s2">&quot;/*.scss&#39;],\n\</span>
<span class="s2">                tasks: [&#39;sass:&quot;</span> <span class="o">+</span> <span class="nx">service</span> <span class="o">+</span> <span class="s2">&quot;&#39;]\n            }&quot;</span><span class="p">;</span>
        <span class="p">});</span>

        <span class="k">return</span> <span class="nx">generatedContent</span> <span class="o">+=</span> <span class="s1">&#39;\n            // Dynamic Watch Content Ended&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">generateSassSubTasks</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">generatedContent</span> <span class="o">=</span> <span class="s1">&#39;// Dynamic Sass Content\n            &#39;</span><span class="p">;</span>

        <span class="nx">services</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">generatedContent</span> <span class="o">+=</span> <span class="s2">&quot;,\n            &quot;</span> <span class="o">+</span> <span class="nx">service</span> <span class="o">+</span> <span class="s2">&quot;: {\n\</span>
<span class="s2">                options: {\n\</span>
<span class="s2">                    style: &#39;expanded&#39;,\n\</span>
<span class="s2">                    debugInfo: true,\n\</span>
<span class="s2">                    lineNumbers: true,\n\</span>
<span class="s2">                    require: [&#39;&lt;%= dir.static_sass %&gt;partials/helpers/url64.rb&#39;]\n\</span>
<span class="s2">                },\n\</span>
<span class="s2">                expand: true,\n\</span>
<span class="s2">                cwd: &#39;&lt;%= dir.static_sass %&gt;/services/&quot;</span> <span class="o">+</span> <span class="nx">service</span> <span class="o">+</span> <span class="s2">&quot;&#39;,\n\</span>
<span class="s2">                src: [&#39;*.scss&#39;, &#39;!_*.scss&#39;],\n\</span>
<span class="s2">                dest: &#39;&lt;%= dir.static_css %&gt;/services/&quot;</span> <span class="o">+</span> <span class="nx">service</span> <span class="o">+</span> <span class="s2">&quot;&#39;,\n\</span>
<span class="s2">                ext: &#39;.css&#39;\n\</span>
<span class="s2">            }&quot;</span><span class="p">;</span>
        <span class="p">});</span>

        <span class="k">return</span> <span class="nx">generatedContent</span> <span class="o">+=</span> <span class="s1">&#39;\n            // Dynamic Sass Content Ended&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/*</span>
<span class="cm">        Following regex searches our Gruntfile.js for either &quot;// Dynamic Sass Content&quot; or &quot;// Dynamic Watch Content&quot;.</span>
<span class="cm">        It then continues to find the associated ending code comment.</span>
<span class="cm">     */</span>
    <span class="nx">file</span> <span class="o">=</span> <span class="nx">file</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\/\/ Dynamic (Sass|Watch) Content)(?:\r|\n(?:.|\r|\n)+?\1 Ended)?/gmi</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">match</span><span class="p">,</span> <span class="nx">cg1</span><span class="p">,</span> <span class="nx">cg2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">cg2</span> <span class="o">===</span> <span class="s1">&#39;Sass&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">returnValue</span> <span class="o">=</span> <span class="nx">sass_subtasks</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">cg2</span> <span class="o">===</span> <span class="s1">&#39;Watch&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">returnValue</span> <span class="o">=</span> <span class="nx">watch_subtasks</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">returnValue</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="nx">file</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>So again, you can see we&#39;re using a mixture of Grunt API&#39;s and Node.js to accomplish what we need. In this case we&#39;re doing the following…</p>
<ul>
<li>Storing the contents of our Gruntfile.js</li>
<li>Creating an Array of language services (e.g. <code>[&#39;afrique&#39;, &#39;arabic&#39;, &#39;hausa&#39;, …]</code>) by using <code>grunt.file.expand</code> and then using some Array methods such as <code>map</code> and <code>filter</code> to clean up the data (we use <code>map</code> to strip the directory path and we use <code>filter</code> to remove any blacklisted folders -&gt; by that we mean folders we don&#39;t want to include).</li>
<li>We have two functions for generating the String data that makes up our sub tasks for Sass and Watch (effectively, just loops through the Array of languages and creates a String of JavaScript code that we&#39;ll then inject into our Gruntfile).</li>
<li>Use a regular expression with the String <code>replace</code> method to find the code comment hooks we have in our Gruntfile.</li>
<li>Once the hooks are found, we check which hook it is (Sass or Watch) and then inject the relevant String of JavaScript code we dynamically created earlier (this was done inside our <code>generateWatchSubTasks</code> and <code>generateSassSubTasks</code> functions and uses the <code>grunt.file.write</code> API).</li>
</ul>
<p>This code is run before any other tasks are executed. So every time I run <code>grunt noop</code> the above code gets run and the dynamically generated sub tasks are injected into the Gruntfile.</p>
<p>This actually runs super quick and so hasn&#39;t (currently) raised any performance problems (e.g. we&#39;ve not had any &quot;hmm, whenever I execute a task it takes ages for it to actually run?&quot; comments). </p>
<p>If we wanted to we could maybe cache this so it didn&#39;t happen every single time a task is run but it&#39;s so quick at the moment it&#39;s just not worth worrying about.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>That&#39;s it! I hope this was a useful look at how to write some custom Grunt tasks and also how to take advantage of the Grunt API and Node.js to doing something a little bit more specialised with Grunt.</p>
<p>Hopefully this post was better than the same old Grunt posts that only just tell you how to use the pre-built tasks to do mundane things like minify your JavaScript or other tediously boring stuff.</p>
]]></description><link>http://www.integralist.co.uk/posts/dynamically-generated-grunt-tasks/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/dynamically-generated-grunt-tasks/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Mon, 17 Jun 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[The Clean Coder - How to be a Professional]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 16mins</em></p>
<ul>
<li>Who is Robert C. Martin?</li>
<li>What&#39;s it all about?</li>
<li>Take responsibility</li>
<li>Work ethic</li>
<li>Know your field</li>
<li>Stay current</li>
<li>Collaborate</li>
<li>Mentoring</li>
<li>Know your domain</li>
<li>Identify with your employer</li>
<li>Learn to say no</li>
<li>Rules and principles for coding</li>
<li>Acceptance Tests</li>
<li>Managing time<ul>
<li>Meetings</li>
<li>Scrum</li>
<li>Sprint Planning</li>
<li>Sprint Retro</li>
<li>Discussions</li>
<li>Code</li>
</ul>
</li>
<li>Estimations</li>
<li>Pressure</li>
<li>Conclusion</li>
</ul>
<h2><a name="who-is-robert-c-martin-"class="anchor" href="#who-is-robert-c-martin-"><span class="header-link"></span></a>Who is Robert C. Martin?</h2>
<p>Robert C. Martin is a legend in the development industry. Commonly referred to as simply &quot;Uncle Bob&quot;. He is a software consultant and has been programming since the mid 60&#39;s. Over the years he has written many books (some listed below) as well as shared his great knowledge of system design and coding best practices.</p>
<ul>
<li>Designing Object-Oriented C++ Applications</li>
<li>Patterns Languages of Program Design</li>
<li>Extreme Programming in Practice</li>
<li>Agile Software Development: Principles, Patterns and Practices</li>
<li>UML for Java Programmers</li>
<li>Clean Code: A Handbook of Agile Software Craftsmanship</li>
<li>The Clean Coder: A Code of Conduct for Professional Programmers</li>
</ul>
<p>The last book in that list is the focus of this post.</p>
<h2><a name="what-s-it-all-about-"class="anchor" href="#what-s-it-all-about-"><span class="header-link"></span></a>What&#39;s it all about?</h2>
<p>Well, I&#39;ve taken the liberty to reference the author directly here as I feel his words convey the book&#39;s focus more than I ever could… </p>
<blockquote>
<p>I presume you just picked up this book because you are a computer programmer and are intrigued by the notion of professionalism. You should be. Professionalism is something that our profession is in dire need of.
I&#39;m a programmer too. I&#39;ve been a programmer for 42 years (longer by the time you read this); and in that time I&#39;ve seen it all. I&#39;ve been fired. I&#39;ve been lauded. I&#39;ve been a team leader, a manager, a grunt and even a CEO. I&#39;ve worked with brilliant programmers and I&#39;ve worked with slugs. I&#39;ve worked on high-tech cutting-edge embedded software/hardware systems, and I&#39;ve worked on corporate payroll systems. I&#39;ve programmed in COLBOL, FORTRAN, BAL, PDP-8, PDP-11, C, C++, Java, Ruby, Smalltalk, and a plethora of other languages and systems. I&#39;ve worked with untrustworthy pay check thieves, and I&#39;ve worked with consummate professionals. It is that last classification that is the topic of this book.
In the coming years I would be fired from one job for carelessly missing critical dates, and nearly fired from still another for inadvertently leaking confidential information to a customer. I would take the lead on a doomed project and ride it into the ground without calling for the help I knew I needed. I would aggressively defend my technical decisions even though they flew in the face of the customers’ needs. I would hire one wholly unqualified person, saddling my employer with a huge liability to deal with. And worst of all, I would get two other people fired because of my inability to lead.
So think of this book as a catalog of my own errors, a blotter of my own crimes, and a set of guidelines for you to avoid walking in my early shoes.</p>
</blockquote>
<h2><a name="take-responsibility"class="anchor" href="#take-responsibility"><span class="header-link"></span></a>Take responsibility</h2>
<p>A professional takes responsibility for his code and his decisions. His primary focus should be to &#39;do no harm&#39;.</p>
<p><strong>Don&#39;t harm the code:</strong></p>
<p>Here is a short-list of things a professional will do… </p>
<ul>
<li>Ensure that QA (Quality Assurance) find nothing wrong. If there are bugs then a professional will take note of them, how they occurred and aim to prevent it from happening again. A professional doesn&#39;t rely on others to catch bugs for them.</li>
<li>Know how all the code works (even the bits they didn&#39;t write). Understand all of the codebase and how the different components inter-lock. The only way a professional can apply an appropriate solution is to know the environment, its limitations and constraints.</li>
<li>Write tests (unit &amp; acceptance) and will ensure they are automated. A professional who writes tests first before code will be more confident in adding new features and refactoring existing code as they have the tests to back them up as they make changes (especially if the tests are automated then the red/green/refactor cycle can be tightly integrated into the professionals work flow).</li>
<li>100% code coverage (or at least in the 90% range). TDD (Test Driven-Development) means that the code design allows every line of code the professional writes to be easily testable.</li>
</ul>
<p><strong>Do not harm the code&#39;s architecture/structure:</strong></p>
<p>A professional will keep in mind the following… </p>
<ul>
<li>Software should be easy to change.</li>
<li>Making a change to the code base should be easy. If it isn&#39;t then the professional will look to change the design of the code to accommodate this requirement so the code becomes more flexible and allows changes to be made more easily in future.</li>
<li>Any code the professional reads over or makes a change to will be analysed for any potential improvements to the code&#39;s structure (this is known as &#39;merciless refactoring&#39; or &#39;the boy scout rule&#39;). In other words always commit back a module in a better state than you originally checked it out.</li>
<li>Make continuous changes to the code base. Constantly changing the code (i.e. improving it) should result in greater flexibility and modularity. If you leave the code static (e.g. you&#39;re afraid to change it in case it breaks something) then when management requests a change or new feature you may likely find the code is too rigid to be adapted.</li>
<li>Don&#39;t be afraid to constantly change your code. Your tests are there to back you up and should be quick to run!</li>
</ul>
<h2><a name="work-ethic"class="anchor" href="#work-ethic"><span class="header-link"></span></a>Work ethic</h2>
<p>Your career is <em>your</em> responsibility, do not leave it up to your employer to train you, send you on courses or buy you books. Take control of yourself.</p>
<p>The time you spend at work should be spent on your employers problems, not yours. A professional works hard for his employer and makes time for his &#39;career&#39; in his own time. This also doesn&#39;t mean you should spend all your time on your career. You have a family/life too. Balance your work, your career and your life in appropriate measures.</p>
<h2><a name="know-your-field"class="anchor" href="#know-your-field"><span class="header-link"></span></a>Know your field</h2>
<p>Professionals not only know their chosen favourite technologies, but have an understanding and interest in other technologies outside of that circle.</p>
<p>Professionals will know past techniques (and why they may no longer be relevant) as well as the current best practices.</p>
<p>Professionals will also know the pros and cons to specific techniques and when to choose one over the other.</p>
<p>Uncle Bob makes a comment which references the &quot;Santayana&#39;s curse&quot;… </p>
<blockquote>
<p>Those who cannot remember the past are condemned to repeat it.</p>
</blockquote>
<p>Here is a short list of things you should know (or at least be quite familiar with):</p>
<ul>
<li>Design patterns (GOF 24 patterns)</li>
<li>Design principles (SOLID, DRY, SRP, DIP)</li>
<li>Methods of working (Agile, Scrum, Kanban, Waterfall)</li>
<li>Disciplines (TDD, BDD, OOP, CI, Pair Programming)</li>
<li>Artifacts (UML, sequence diagrams, flow charts, decision tables)</li>
</ul>
<h2><a name="stay-current"class="anchor" href="#stay-current"><span class="header-link"></span></a>Stay current</h2>
<p>Practice. Doing your job isn&#39;t practice. Your job helps you improve your current skills, practice is learning new related skills.</p>
<p>Professionals will participate in Code Katas. These aren&#39;t about solving problems because as a professional they would have already solved the problems presented in the kata. The purpose of code katas for a professional is to help warm them up for the days work and as a warm down at the end of the day. It allows them to try out different options for refactoring the solution and finding other shortcuts.</p>
<h2><a name="collaborate"class="anchor" href="#collaborate"><span class="header-link"></span></a>Collaborate</h2>
<p>A professional will plan, design and write code together with their team/co-workers. This helps open their knowledge up to new ways of thinking and solutions they may not have considered otherwise. This also facilitates faster learning and making fewer errors.</p>
<h2><a name="mentoring"class="anchor" href="#mentoring"><span class="header-link"></span></a>Mentoring</h2>
<p>Nothing demonstrates more how much you know about a subject than when you try to teach it to some one else. Juniors will ask all sorts of questions you may have long forgotten about (such as why you no longer build something in a certain way or using a certain technique). Professionals look after juniors and don&#39;t let them struggle on without help and direction.</p>
<h2><a name="know-your-domain"class="anchor" href="#know-your-domain"><span class="header-link"></span></a>Know your domain</h2>
<p>A professional will research the business they are now building software for. So if you work for a travel agent then you should know a bit about that industry. You don&#39;t need to be an expert, just know enough to recognise concerns with certain technical requests or specifications.</p>
<h2><a name="identify-with-your-employer"class="anchor" href="#identify-with-your-employer"><span class="header-link"></span></a>Identify with your employer</h2>
<p>Effectively your employers problems are your problems and so you need to take their perspective and understand the features they want implemented. A professional will be in a better position to advise whether those new features are actually right for the business.</p>
<h2><a name="learn-to-say-no"class="anchor" href="#learn-to-say-no"><span class="header-link"></span></a>Learn to say no</h2>
<p>If your boss tells you to implement a feature by a certain date and you know that can&#39;t happen without compromising the quality and stability of the software, then be vocal and say &quot;no, that&#39;s not possible&quot;</p>
<p>A professional wouldn&#39;t flat out say &quot;No&quot; and walk away, they would suggest a date that the work could be completed by, or possibly a compromise in the features that would be implemented by the deadline date. A professional will work with management to agree on what&#39;s achievable but won&#39;t settle for intimidation because management has tried to enforce an unrealistic request.</p>
<p>As a professional you were hired to carry out a specific specialised job and it&#39;s your responsibility to educate management on what&#39;s feasible or not. Do not find yourself agreeing to impossible deadlines or saying &quot;I&#39;ll try&quot; (I&#39;ll try is usually interpreted by management as &quot;yes&quot;). Generally developers will agree to &quot;try&quot; because they want to avoid confrontations but it suggests that the work you were doing previously wasn&#39;t&#39; actually your all. </p>
<p>What does &quot;I&#39;ll try&quot; actually mean any way? That you&#39;ll work longer hours or work weekends? No, of course not. So why tell management you&#39;ll &quot;try&quot; when you&#39;re just going to go ahead and do what you was planning on doing before. It will just let them down when you don&#39;t succeed to finish by the deadline because management will have interpreted your &quot;I&#39;ll try&quot; as &quot;I will&quot;.</p>
<h2><a name="rules-and-principles-for-coding"class="anchor" href="#rules-and-principles-for-coding"><span class="header-link"></span></a>Rules and principles for coding</h2>
<p>A professional has a specific set of principles when it comes to how they work… </p>
<ul>
<li>Professionals are prepared (always focused and understanding)</li>
<li>Professionals don&#39;t write code when tired or distracted as this just results in code that doesn&#39;t work or will just need to be rewritten later.</li>
<li>Professionals avoid &quot;the zone&quot;. This sounds controversial as &quot;the zone&quot; is what most developers think gives them their edge. That sweet moment where everything seems to be flowing just right. But &quot;the zone&quot; just tricks you into thinking the speed you&#39;ve gained processing problems means they are really efficient. They aren&#39;t. You lose the bigger picture when you get into the &quot;flow&quot;. So don&#39;t buy into it. Be focused.</li>
<li>Professionals don&#39;t code while listening to music. You aren&#39;t as productive as you think you are. This is something I&#39;ve personally experienced and agree with. Working in silence may seem boring or too solitary but I do my best work when the background noise disappears.</li>
<li>Professionals handle interruptions politely and be willing to help regardless. Have you ever given an agitated response to someone who has interrupted you while working? Your snappy response could be because you&#39;re trying to figure out a complicated problem that requires total concentration (maybe you were trying to get &quot;into the zone&quot;). But a professional knows how to politely handle the situation and return to the problem at hand.</li>
<li>Professionals know that &quot;writers block&quot; can usually be solved (or alleviated) by pair programming.</li>
<li>Professionals know to produce creative output they need creative input. It&#39;ll be different for each individual but find out what gets your creative juices flowing and make sure you indulge that as often as possible to allow your more creative output to flow.</li>
<li>Professionals avoid time fixing bugs. No other profession would stand for bugs in this way too long (could you imagine a doctor who made mistakes in diagnosis on every patient? he wouldn&#39;t last in this profession very long!), so a software professional should aim to reduce debugging time to zero.</li>
<li>Professionals aren&#39;t afraid to go home when there is a bug they can&#39;t solve. They recognise their creative periods, and so know when to take a break. You&#39;ll find that your subconscious will figure out the solution while your brain takes a rest - so remember that it&#39;s ok to walk away and take a break.</li>
<li>Professionals know that being late for a deadline is a fact of life and unavoidable. But a professional will constantly measure their progress and inform those who need to know as early as possible if they&#39;re not going to make the deadline. Don&#39;t let people down at the last minute.</li>
<li>Professionals don&#39;t give false hope that a deadline will be met if there genuinely is no chance. Better to formulate a fall-back plan or agree what can be achieved. Stick to your estimates, don&#39;t let a manager try to convince you to &quot;do what it takes&quot; to make the deadline.</li>
<li>Professionals don&#39;t build a wall around their code. Any developer should be allowed/able to make changes to other developers code.</li>
<li>Professionals understand that pair programming is a good thing in that it helps you learn the system, find bugs faster and share knowledge more efficiently.</li>
</ul>
<h2><a name="acceptance-tests"class="anchor" href="#acceptance-tests"><span class="header-link"></span></a>Acceptance Tests</h2>
<p>Acceptance tests help avoid ambiguity in feature requests and how the existing system functions. They are different from unit-tests (which test individual components of the code) in that they ensure the finished application functions how the business expects it to (without the business having to understand the technical aspects of the system).</p>
<p>These types of tests should be co-written by a stakeholder &amp; a programmer to ensure clarity and accuracy, and they should always be written so they can be executed automatically.</p>
<p>Acceptance tests provide the entire team with the definition of &quot;done&quot; (e.g. code written, tests passing, code deployed &amp; QA satisfied).</p>
<p>Professionals should never be passive-aggressive when it comes to acceptance tests. By this we mean: if you&#39;ve been asked to implement a test that you think is faulty then it is your responsibility as a professional to make the business understand why the test is faulty and to come to an agreement on what an acceptable test should be. So don&#39;t act passive-aggressively (in a &quot;well if this is what they wanted, then this is what they&#39;ll get&quot; way) by allowing a faulty test to pass.</p>
<h2><a name="managing-time"class="anchor" href="#managing-time"><span class="header-link"></span></a>Managing time</h2>
<p>A professional knows how to manage their time. </p>
<h3><a name="meetings"class="anchor" href="#meetings"><span class="header-link"></span></a>Meetings</h3>
<p>They don&#39;t go to every meeting they are invited to just because they&#39;re invited. They only go to those meetings that affect the immediate job they&#39;re working on. </p>
<p>The people who invite you to meetings aren&#39;t responsible for managing your time, you are. Be wise about the time you give up as it otherwise will mean your work won&#39;t get done.</p>
<p>A good manager will do what they should to keep you out of meetings.</p>
<p>If a meeting gets boring: leave. It&#39;s unprofessional to stay in a meeting where your input is not needed. Be polite and excuse yourself.</p>
<p>Only agree to attend meetings where a clear agenda has been determined. </p>
<h3><a name="scrum"class="anchor" href="#scrum"><span class="header-link"></span></a>Scrum</h3>
<p>Participates in a Scrum stand-up meeting should spend no more than 20 seconds per question (what did I do yesterday, what am I doing today, what&#39;s blocking me)</p>
<h3><a name="sprint-planning"class="anchor" href="#sprint-planning"><span class="header-link"></span></a>Sprint Planning</h3>
<p>Sprint Planning sessions are a notoriously difficult part of Agile to get right. But effectively: estimates for backlog items should already be done, ready for selection/rejection. Ideally acceptance tests will also have already been written. No more than 10mins should be spent reviewing any item. If more time is needed then another meeting should be scheduled with a subset of the team to discuss further.</p>
<h3><a name="sprint-retro"class="anchor" href="#sprint-retro"><span class="header-link"></span></a>Sprint Retro</h3>
<p>Sprint Retro should only take 20mins and your sprint demo should only take 25mins. For most Agile teams it will only have been two weeks since your last retro so there shouldn&#39;t be <em>that much</em> to talk about.</p>
<h3><a name="discussions"class="anchor" href="#discussions"><span class="header-link"></span></a>Discussions</h3>
<p>Any argument that lasts longer than 5mins can not be settled by arguing. Get data to back up your opinions and to solidify a decision.</p>
<h3><a name="code"class="anchor" href="#code"><span class="header-link"></span></a>Code</h3>
<p>Avoid blind alleys. A blind alley is where you choose a technical solution and stick with it even though later on you realise it&#39;s not the right choice. Learn to stop digging that hole. Back out and try something different.</p>
<p>Avoid messes. A mess is like a time black hole that sucks you in. Every step you think you&#39;re closer to the finish, and it seems to be better than starting over. Don&#39;t fall for it!</p>
<p>Blind alleys and messes have very subtle differences but basically both should be recognised as early as possible so you can escape them.</p>
<h2><a name="estimations"class="anchor" href="#estimations"><span class="header-link"></span></a>Estimations</h2>
<p>A professional will try not to estimate a job by themselves. Any one who does this should expect to go over by at least 3 times as long as their original estimate. </p>
<p>Professionals will estimate with the help of their team as they know someone on the team may highlight an issue the others (including yourself) have missed or not considered.</p>
<p>If appropriate, try breaking up a task into smaller tasks and estimating each smaller task. In doing so you&#39;ll likely find that the total sum of your estimate is larger than your original estimate would have been for the whole thing (i.e. before you split the task into smaller chunks).</p>
<h2><a name="pressure"class="anchor" href="#pressure"><span class="header-link"></span></a>Pressure</h2>
<p>A professional knows to stay calm under pressure.</p>
<p>A clear head is essential. No good comes from pent up frustration at management for tight deadlines, or poor software (when a build breaks just before going live). </p>
<p>A professional resorts to discipline and training to get through these situations.</p>
<p>Ultimately: by handling your job and your responsibilities <em>professionally</em> you&#39;ll be able to avoid pressure by avoiding situations that cause pressure.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>This has been a bit of a whirlwind tour of &quot;The Clean Coder: A Code of Conduct for Professional Programmers&quot; but hopefully you&#39;ve learnt a few things about how to handle yourself in a professional manner and will want to pick up the book to get the full benefit of &quot;Uncle Bob&#39;s&quot; experience and advice.</p>
<p>I cannot recommend this book enough. I can see it being a useful tool for not only developers but for managers as well, because although the book is primarily focused on people in the software engineering industry, the information and tips are still relevant cross-discipline.</p>
]]></description><link>http://www.integralist.co.uk/posts/the-clean-coder-how-to-be-a-professional/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/the-clean-coder-how-to-be-a-professional/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sat, 01 Jun 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Grunt Boilerplate]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 19mins</em></p>
<ul>
<li>What is Grunt?</li>
<li>Installation</li>
<li>Package.json</li>
<li>Dependencies</li>
<li>Gruntfile.js</li>
<li>Sass</li>
<li>RequireJS</li>
<li>JSHint</li>
<li>Jasmine BDD</li>
<li>Image Minification</li>
<li>HTML Minification</li>
<li>Registering tasks</li>
<li>Watching files</li>
<li>Our full Grunt file</li>
<li>Conclusion</li>
</ul>
<h2><a name="what-is-grunt-"class="anchor" href="#what-is-grunt-"><span class="header-link"></span></a>What is Grunt?</h2>
<p><a href="http://gruntjs.com/">Grunt</a> is a JavaScript based task runner. What this means is that it will help you spend less time manually running tasks that can be automated.</p>
<p>Grunt comes with many pre-built tasks available and that can automate the majority of a developer&#39;s typical work flow. You also have the facility to write your own custom tasks if you have a specific requirement that isn&#39;t already catered for.</p>
<p>There are approximately 700+ tasks built for Grunt (as of May 2013) and the list is growing. Some of the most popular tasks I&#39;ll be covering in this article…</p>
<ul>
<li>Sass (CSS pre-processor)</li>
<li>RequireJS (AMD/script loader)</li>
<li>JSHint (JavaScript code quality)</li>
<li>Jasmine BDD (Behaviour-Driven Unit Testing framework)</li>
<li>ImageMin (Image minification)</li>
<li>HTMLMin (HTML minification)</li>
</ul>
<p>…but there are many more for tasks such as: compiling CoffeeScript to JavaScript, concatenating files, connecting to a web server, copying files and folders, precompiling handlebar templates, live reload within a web browser, compiling code documentation - just to name a few. </p>
<p>See the <a href="http://gruntjs.com/plugins">Grunt Plugins</a> page for a more comprehensive list (but also check GitHub).</p>
<h2><a name="installation"class="anchor" href="#installation"><span class="header-link"></span></a>Installation</h2>
<p>Grunt uses <a href="http://nodejs.org/">Node.js</a> and Node&#39;s package manager system (NPM) to handle the installation of Grunt tasks.</p>
<p>Essentially (as of Grunt 0.4) there are three items you need to install to get up and running with Grunt…</p>
<ol>
<li>Node.js</li>
<li>NPM</li>
<li>Grunt CLI (command line interface)</li>
</ol>
<p>The easiest way to install these are using <a href="http://mxcl.github.io/homebrew/">Homebrew</a> which is an excellent package manager for OS X (if you use Windows, my apologies but you&#39;re on your own).</p>
<p>Your mileage may vary, but if you have homebrew installed you can run the following commands via your terminal to install Node.js and NPM: <code>brew install node</code>.</p>
<p>The next step is to install Grunt CLI which you can do using: <code>npm install -g grunt-cli</code> (the <code>-g</code> means to install it globally on your OS so that you can use the <code>grunt</code> command where ever you are on your system).</p>
<p>Now you&#39;ll also want to run: <code>npm install -g grunt-init</code> and once that&#39;s done you&#39;ve effectively installed the basic requirements for Grunt.</p>
<h2><a name="package-json"class="anchor" href="#package-json"><span class="header-link"></span></a>Package.json</h2>
<p>Before you can start using Grunt you&#39;ll need a <code>package.json</code> file which stores all the base configuration settings.</p>
<p>To automatically generate this file run: <code>npm init</code>.</p>
<p>Below is the <code>package.json</code> file for my Grunt Boilerplate project...</p>
<pre><code class="lang-json"><div class="highlight"><pre><span class="p">{</span>
    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Grunt Boilerplate&quot;</span><span class="p">,</span>
    <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.1.0&quot;</span><span class="p">,</span>
    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;This is a project set-up using Grunt to take case of some standard tasks such as: compiling AMD based modules using RequireJS, watching/compiling Sass into CSS, watching/linting JS code and some other things such as running unit tests&quot;</span><span class="p">,</span>
    <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;Gruntfile.js&quot;</span><span class="p">,</span>
    <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{},</span>
    <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;grunt&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-watch&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.3.1&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-jshint&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.3&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-uglify&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.2.0&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-requirejs&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.0&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-sass&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.3.0&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-imagemin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.4&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-htmlmin&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.3&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-jasmine&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.4.2&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-template-jasmine-istanbul&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.2.1&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-template-jasmine-requirejs&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.1.1&quot;</span><span class="p">,</span>
        <span class="nt">&quot;grunt-contrib-connect&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.3.0&quot;</span>
    <span class="p">},</span>
    <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>
    <span class="p">},</span>
    <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
        <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;git@github.com:Integralist/Grunt-Boilerplate.git&quot;</span>
    <span class="p">},</span>
    <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&quot;Grunt&quot;</span><span class="p">,</span>
        <span class="s2">&quot;JavaScript&quot;</span>
    <span class="p">],</span>
    <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;Mark McDonnell&quot;</span><span class="p">,</span>
    <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…most of it is populated with content I provided when I ran <code>npm init</code> and the rest (such as <code>devDependencies</code>) was automatically generated for me when I started installing Grunt tasks (see next section).</p>
<h2><a name="dependencies"class="anchor" href="#dependencies"><span class="header-link"></span></a>Dependencies</h2>
<p>Typically we don&#39;t want dependencies we install to be installed globally (remember we installed Grunt globally using the <code>-g</code> flag). </p>
<p>The reason being, the dependencies you install for Project X might be different from your next project. </p>
<p>For example, you might install a Grunt task with a version number of 1.0 and by the time you start your next project that task might have been updated to version 2.0 and part of the major version update was a complete change in their API. So if you globally updated the task, your last project would break as it&#39;s using the old API. </p>
<p>But you still want to use the latest and greatest version of that task. So instead of installing your dependencies globally, install them locally (e.g. install them into the specific project you&#39;re currently working on) which means there will no chance of conflicts between projects.</p>
<p>Below are the tasks I install locally as part of my Grunt Boilerplate project…</p>
<ul>
<li><code>npm install grunt --save-dev</code></li>
<li><code>npm install grunt-contrib-watch --save-dev</code></li>
<li><code>npm install grunt-contrib-jshint --save-dev</code></li>
<li><code>npm install grunt-contrib-uglify --save-dev</code></li>
<li><code>npm install grunt-contrib-requirejs --save-dev</code></li>
<li><code>npm install grunt-contrib-sass --save-dev</code></li>
<li><code>npm install grunt-contrib-imagemin --save-dev</code></li>
<li><code>npm install grunt-contrib-htmlmin --save-dev</code></li>
<li><code>npm install grunt-contrib-connect --save-dev</code></li>
<li><code>npm install grunt-contrib-jasmine --save-dev</code></li>
<li><code>npm install grunt-template-jasmine-requirejs --save-dev</code></li>
</ul>
<p>…a couple of things to note here are: the first item you see me install is Grunt itself (which is separated from the Grunt CLI). As we&#39;ve already discussed, it means we can install different versions of Grunt if we want (depending on the project requirements).</p>
<p>The other thing is the use of the <code>--save-dev</code> flag which means our <code>package.json</code> file gets automatically updated to include the dependency we&#39;ve just installed.</p>
<p>Because these dependencies are installed locally, you&#39;ll notice a new <code>node_modules</code> folder has appeared within your project. This folder holds all of the above dependencies/tasks we&#39;ve just installed.</p>
<p>I suggest you create a <code>.gitignore</code> file (you are using <a href="http://git-scm.com/">Git</a> for your version control system, right?) that ignores this folder (you don&#39;t want to end up pushing these modules into your repo for other users to pull down, best to let them install these themselves as per my instructions above).</p>
<p>OK, now that we have all the dependencies/tasks installed, lets look at the remaining piece of the puzzle, the <code>Gruntfile.js</code>.</p>
<h2><a name="gruntfile-js"class="anchor" href="#gruntfile-js"><span class="header-link"></span></a>Gruntfile.js</h2>
<p><code>Gruntfile.js</code> is the main set-up file and contains the settings for each task we have installed.</p>
<p>Because Grunt is run using Node.js you&#39;ll notice the content of the file is wrapped in a closure and assigned to a module <code>exports</code> property…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
        <span class="c1">// our Grunt task settings</span>
    <span class="p">});</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>…within the function we call <code>initConfig</code> on the Grunt object, and we pass through an object literal holding our task settings.</p>
<p>One of the first properties we set is <code>pkg: grunt.file.readJSON(&#39;package.json&#39;)</code> which means that from within the other properties of our object we can access settings specified within our <code>package.json</code> configuration file.</p>
<p>For example, if we wanted to access the name of our package (which if you remember was set <code>&quot;name&quot;:&quot;Grunt Boilerplate&quot;</code>) then we could access it from within our object using <code>&lt;%= pkg.name %&gt;</code>.</p>
<p>From here, this is where we now start to explore the different tasks we previously installed (for full details of each task&#39;s own settings please go to their corresponding website/github repo).</p>
<h2><a name="sass"class="anchor" href="#sass"><span class="header-link"></span></a>Sass</h2>
<p>The Sass task allows us to compile our Sass files into CSS.</p>
<p>Here is an example...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">sass</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;compressed&#39;</span><span class="p">,</span>
            <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;./assets/styles/sass/helpers/url64.rb&#39;</span><span class="p">]</span>
        <span class="p">},</span>
        <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;./app/styles/sass/&#39;</span><span class="p">,</span>
        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;*.scss&#39;</span><span class="p">],</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./app/styles/&#39;</span><span class="p">,</span>
        <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span>
    <span class="p">},</span>
    <span class="nx">dev</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;expanded&#39;</span><span class="p">,</span>
            <span class="nx">debugInfo</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">lineNumbers</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;./app/styles/sass/helpers/url64.rb&#39;</span><span class="p">]</span>
        <span class="p">},</span>
        <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;./app/styles/sass/&#39;</span><span class="p">,</span>
        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;*.scss&#39;</span><span class="p">],</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./app/styles/&#39;</span><span class="p">,</span>
        <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>You&#39;ll see in the above example we&#39;ve set-up two sub tasks <code>dist</code> and <code>dev</code>.</p>
<p>The reason I&#39;ve created two sub tasks is because while I&#39;m developing my application I want my Sass files to compile in to expanded CSS (including debugging information), but when I finish my project I want to compile my Sass files in to compressed/minified CSS instead.</p>
<p>You&#39;ll see for each sub task I specify a <code>options</code> object which tells the compiler how I want the Sass to be compiled and where to find any additional Sass helper scripts.</p>
<p>You&#39;ll find in my <a href="https://github.com/Integralist/Grunt-Boilerplate">Grunt Boilerplate</a> (used in the above example) that I include a Sass helper script <code>require: [&#39;./app/styles/sass/helpers/url64.rb&#39;]</code> which allows you to use a special Sass function to convert a background image into a Base64 encoded string which is better performing than making an additional HTTP request for an image to be used - it also works around the IE8 issue where an Base64 encoded string can&#39;t be greater than 32kb of data.</p>
<p>Finally, we are using a Grunt specific pattern that allows us to better target and export multiple files: <code>expand: true</code>. Effectively that setting allows the other properties to follow it to be activated (if we didn&#39;t have <code>expand: true</code> set then the properties following it wouldn&#39;t work).</p>
<p>Let&#39;s look at the other properties a little bit closer, as you&#39;ll see them used in other tasks in a similar way so it&#39;s important for you to understand how they work…</p>
<p><code>cwd: &#39;./app/styles/sass/&#39;</code> - here I&#39;m setting the &#39;current working directory&#39; (this is where I want Grunt to find my Sass files).</p>
<p><code>src: [&#39;*.scss&#39;]</code> - here I&#39;m telling Grunt that I want it to look for any <code>scss</code> files within my &#39;current working directory&#39;.</p>
<p><code>dest: &#39;./app/styles/&#39;</code> - here I&#39;m telling Grunt that I want it to export the files to this directory.</p>
<p><code>ext: &#39;.css&#39;</code> - and that I want each exported file to have an extension of <code>css</code>.</p>
<p>To run this specific task we could open our terminal and execute: <code>grunt sass</code> (which would execute both sub tasks), or we could run a specific sub task like so: <code>grunt sass:dev</code>.</p>
<p>I won&#39;t explain the running of specific tasks again from here because effectively it&#39;s exactly the same for all tasks.</p>
<h2><a name="requirejs"class="anchor" href="#requirejs"><span class="header-link"></span></a>RequireJS</h2>
<p>This task is effectively the <code>r.js</code> build script that comes with RequireJS so I won&#39;t go into the details of how to write a build script - I&#39;ll instead refer you to the <a href="https://github.com/jrburke/r.js/blob/master/build/example.build.js">r.js documentation</a>, but know that the following has exactly the same settings as you would have used for <code>r.js</code> previously… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">requirejs</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">compile</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;./app&#39;</span><span class="p">,</span>
            <span class="nx">mainConfigFile</span><span class="o">:</span> <span class="s1">&#39;./app/main.js&#39;</span><span class="p">,</span>
            <span class="nx">dir</span><span class="o">:</span> <span class="s1">&#39;./app/release/&#39;</span><span class="p">,</span>
            <span class="nx">fileExclusionRegExp</span><span class="o">:</span> <span class="sr">/^\.|node_modules|Gruntfile|\.md|package.json/</span><span class="p">,</span>
            <span class="nx">modules</span><span class="o">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;main&#39;</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h2><a name="jshint"class="anchor" href="#jshint"><span class="header-link"></span></a>JSHint</h2>
<p>JSHint is a task that mimics the <a href="http://www.jshint.com/">web interface</a> in that it lets you specify files to lint (i.e. makes sure the code is written with valid syntax according to a set of rules you want it to abide by)… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">jshint</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;app/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!app/release/**&#39;</span><span class="p">,</span> <span class="s1">&#39;modules/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;specs/**/*Spec.js&#39;</span><span class="p">],</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">curly</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
        <span class="nx">eqeqeq</span><span class="o">:</span>  <span class="kc">true</span><span class="p">,</span>
        <span class="nx">immed</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
        <span class="nx">latedef</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">newcap</span><span class="o">:</span>  <span class="kc">true</span><span class="p">,</span>
        <span class="nx">noarg</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
        <span class="nx">sub</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>
        <span class="nx">undef</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
        <span class="nx">boss</span><span class="o">:</span>    <span class="kc">true</span><span class="p">,</span>
        <span class="nx">eqnull</span><span class="o">:</span>  <span class="kc">true</span><span class="p">,</span>
        <span class="nx">browser</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>

        <span class="nx">globals</span><span class="o">:</span> <span class="p">{</span>
            <span class="c1">// AMD</span>
            <span class="nx">module</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>
            <span class="nx">require</span><span class="o">:</span>    <span class="kc">true</span><span class="p">,</span>
            <span class="nx">requirejs</span><span class="o">:</span>  <span class="kc">true</span><span class="p">,</span>
            <span class="nx">define</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>

            <span class="c1">// Environments</span>
            <span class="nx">console</span><span class="o">:</span>    <span class="kc">true</span><span class="p">,</span>

            <span class="c1">// General Purpose Libraries</span>
            <span class="nx">$</span><span class="o">:</span>          <span class="kc">true</span><span class="p">,</span>
            <span class="nx">jQuery</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>

            <span class="c1">// Testing</span>
            <span class="nx">sinon</span><span class="o">:</span>      <span class="kc">true</span><span class="p">,</span>
            <span class="nx">describe</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
            <span class="nx">it</span><span class="o">:</span>         <span class="kc">true</span><span class="p">,</span>
            <span class="nx">expect</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>
            <span class="nx">beforeEach</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">afterEach</span><span class="o">:</span>  <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…some things to note: we&#39;re using the bang operator <code>!</code> to tell Grunt to ignore specific directories. So you&#39;ll see we said <code>!app/release/</code> which means DON&#39;T lint that particular directory because it will likely cause errors according to the rules set for JSHint (because that directory is our minified version of our JavaScript code that RequireJS compiled for us).</p>
<p>Also, you&#39;ll see we&#39;ve told JSHint about certain variables that we expect to be present (i.e. to be globally available). We need to do this because JSHint inspects our JavaScript files in isolation so although when we run our application all the scripts are loaded together, at the time of linting JSHint isn&#39;t aware of these different globals and so if we didn&#39;t tell it about them it would just error.</p>
<p>Finally, for the full list of rules that JSHint abides by see the <a href="http://www.jshint.com/docs/#enforcing_options">JSHint site</a>.</p>
<h2><a name="jasmine-bdd"class="anchor" href="#jasmine-bdd"><span class="header-link"></span></a>Jasmine BDD</h2>
<p>Jasmine is a Behaviour-Driven unit testing framework and assertion library.</p>
<p>This is probably one the most complicated task we cover because it requires a few other tasks.</p>
<p>The first first task it relies on is the <code>connect</code> task which fires up a web server using PhantomJS. But realise that this isn&#39;t required if your scripts have no DOM interaction (unlikely if you&#39;re doing web development), but because we&#39;re doing DOM manipulation and we&#39;re testing that interaction we need a DOM to test against, hence the need for the <code>connect</code> web server task… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">connect</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">test</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">port</span><span class="o">:</span> <span class="mi">8000</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…after that we set-up the actual <code>jasmine</code> task… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">jasmine</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;app/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!app/release/**&#39;</span><span class="p">],</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;http://127.0.0.1:8000/&#39;</span><span class="p">,</span>
        <span class="nx">specs</span><span class="o">:</span> <span class="s1">&#39;specs/**/*Spec.js&#39;</span><span class="p">,</span>
        <span class="nx">helpers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;specs/helpers/*Helper.js&#39;</span><span class="p">,</span> <span class="s1">&#39;specs/helpers/sinon.js&#39;</span><span class="p">],</span>
        <span class="nx">template</span><span class="o">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;grunt-template-jasmine-requirejs&#39;</span><span class="p">),</span>
        <span class="nx">templateOptions</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">requireConfig</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;./app/&#39;</span><span class="p">,</span>
                <span class="nx">mainConfigFile</span><span class="o">:</span> <span class="s1">&#39;./app/main.js&#39;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…you&#39;ll see we have specified a <code>host</code> option which relates to the <code>connect</code> web server task.</p>
<p>We also <code>specs</code> option where we tell Grunt where to find out BDD spec/test files.</p>
<p>We have a <code>helpers</code> option where we can load additional scripts required for us to utilise for testing (this is where I load an additional script called <a href="http://sinonjs.org/">Sinon.js</a> which handles Spies, Mocks and Stubs within our unit tests).</p>
<p>Next comes the other complicated part of this task: we need a &#39;template&#39; sub task which is specifically built for Jasmine <code>grunt-template-jasmine-requirejs</code>. We need this additional task because we&#39;re using AMD for making our JavaScript code modular, but AMD introduces race condition issues when it comes to running our async based scripts against a dynamic spec runner such as our Grunt Jasmine task.</p>
<p>You&#39;ll see that we just need to tell <code>grunt-template-jasmine-requirejs</code> where our base JS directory is and which file is the main AMD file to bootstrap our application. In the background the task generates a <code>_SpecRunner.html</code> file which basically requires in every single AMD modules and then starts running our tests within a callback once all the modules are loaded. It&#39;s not the greatest solution but it works.</p>
<p>If the tests pass then the <code>_SpecRunner.html</code> is removed so you never notice it, but if there are any failing tests then the file is left in your root directory so you can inspect the file and run it manually via a real web browser and try and debug any failing tests.</p>
<h2><a name="image-minification"class="anchor" href="#image-minification"><span class="header-link"></span></a>Image Minification</h2>
<p>The ImageMin task does exactly what you would expect, it searches out any images it finds (png or jpg format) and compresses them so they are smaller in file size.</p>
<p>As you can see from the below example we&#39;re using the <code>expand: true</code> setting (and subsequent settings) to tell Grunt where to find our images and where to export them to… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">imagemin</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">png</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">optimizationLevel</span><span class="o">:</span> <span class="mi">7</span>
        <span class="p">},</span>
        <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;./app/images/&#39;</span><span class="p">,</span>
                <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;**/*.png&#39;</span><span class="p">],</span>
                <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./app/images/compressed/&#39;</span><span class="p">,</span>
                <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.png&#39;</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">},</span>
    <span class="nx">jpg</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">progressive</span><span class="o">:</span> <span class="kc">true</span>
        <span class="p">},</span>
        <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;./app/images/&#39;</span><span class="p">,</span>
                <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;**/*.jpg&#39;</span><span class="p">],</span>
                <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./app/images/compressed/&#39;</span><span class="p">,</span>
                <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.jpg&#39;</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h2><a name="html-minification"class="anchor" href="#html-minification"><span class="header-link"></span></a>HTML Minification</h2>
<p>The HTMLMin task does exactly what you would expect, it searches out any HTML files it finds and compresses them so they are minified and thus smaller in file size.</p>
<p>As you can see from the below example we&#39;ve NOT used the <code>expand: true</code> setting but instead this task provided a slightly different api to let us tell Grunt where to find our HTML files and where to export the minified versions to (but effectively we could use <code>expand: true</code> if we wanted)…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">htmlmin</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">removeComments</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">collapseWhitespace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">removeEmptyAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">removeCommentsFromCDATA</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">removeRedundantAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">collapseBooleanAttributes</span><span class="o">:</span> <span class="kc">true</span>
        <span class="p">},</span>
        <span class="nx">files</span><span class="o">:</span> <span class="p">{</span>
            <span class="c1">// Destination : Source</span>
            <span class="s1">&#39;./index-min.html&#39;</span><span class="o">:</span> <span class="s1">&#39;./index.html&#39;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h2><a name="registering-tasks"class="anchor" href="#registering-tasks"><span class="header-link"></span></a>Registering tasks</h2>
<p>So far we&#39;ve looked at running specific Grunt tasks like so: <code>grunt sass:dev</code> and <code>grunt jshint</code> but you can also set-up a custom task which does nothing but run other tasks.</p>
<p>For example, you could create a task which when run would execute a specific set of tasks… </p>
<p><code>grunt.registerTask(&#39;release&#39;, [&#39;jshint&#39;, &#39;jasmine&#39;, &#39;requirejs&#39;, &#39;sass:dist&#39;, &#39;imagemin&#39;, &#39;htmlmin&#39;]);</code></p>
<p>…in the above example we&#39;ve created a &#39;release&#39; task which when run will get our files ready to be pushed to our production environment. I would typically run this task when I was finished building my application.</p>
<p>As you can see it lints my JavaScript files, and then makes sure my JavaScript tests are passing. It then runs my RequireJS build script and then my <code>dist</code> Sass sub task (the one specifically for our production server, so it minifies all the compiled CSS), it then finally minifies any images it finds and minifies our HTML files.</p>
<p>When you execute the command <code>grunt</code> by itself then it will  look for a registered task called <code>default</code>… </p>
<p><code>grunt.registerTask(&#39;default&#39;, [&#39;jshint&#39;, &#39;connect&#39;, &#39;jasmine&#39;, &#39;sass:dev&#39;]);</code></p>
<p>…in this case we&#39;re telling it to execute our JavaScript linting task, then to check our unit tests are still passing and finally to generate debug versions of our CSS.</p>
<h2><a name="watching-files"class="anchor" href="#watching-files"><span class="header-link"></span></a>Watching files</h2>
<p>Instead of manually running a Grunt command every time we make a change (e.g. imagine making a change to your Sass file and then having to go to the terminal and running <code>grunt sass:dev</code> to get the Sass to compile to CSS just so you can see the change reflected in your browser), we can instead get Grunt to do the hard work for us and to automatically run a task (or multiple tasks) whenever a specific set of files have been changed/updated… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= jshint.files %&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;%= jasmine.options.specs %&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;%= sass.dev.src %&gt;&#39;</span><span class="p">],</span>
    <span class="nx">tasks</span><span class="o">:</span> <span class="s1">&#39;default&#39;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…here you can see we&#39;re using the &#39;watch&#39; task along with a specific interpolation syntax to let it know what files to keep an eye on for us.</p>
<p>The syntax is: <code>&lt;%= jshint.files %&gt;</code> and in this instance it means &quot;look at the <code>jshint</code> property and return the value set on its sub property <code>files</code>&quot;. </p>
<p>So as you can see from the above example, we&#39;re telling the watch task to look out for any changes made to our JavaScript and Sass files, and if so run the <code>default</code> registered task.</p>
<h2><a name="our-full-grunt-file"class="anchor" href="#our-full-grunt-file"><span class="header-link"></span></a>Our full Grunt file</h2>
<p>You can find the following file on my <a href="https://github.com/Integralist/Grunt-Boilerplate">Grunt Boilerplate repo</a>… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>

    <span class="cm">/*</span>
<span class="cm">        Grunt installation:</span>
<span class="cm">        -------------------</span>
<span class="cm">            npm install -g grunt-cli</span>
<span class="cm">            npm install -g grunt-init</span>
<span class="cm">            npm init (creates a `package.json` file)</span>

<span class="cm">        Project Dependencies:</span>
<span class="cm">        ---------------------</span>
<span class="cm">            npm install grunt --save-dev</span>
<span class="cm">            npm install grunt-contrib-watch --save-dev</span>
<span class="cm">            npm install grunt-contrib-jshint --save-dev</span>
<span class="cm">            npm install grunt-contrib-uglify --save-dev</span>
<span class="cm">            npm install grunt-contrib-requirejs --save-dev</span>
<span class="cm">            npm install grunt-contrib-sass --save-dev</span>
<span class="cm">            npm install grunt-contrib-imagemin --save-dev</span>
<span class="cm">            npm install grunt-contrib-htmlmin --save-dev</span>
<span class="cm">            npm install grunt-contrib-connect --save-dev</span>
<span class="cm">            npm install grunt-contrib-jasmine --save-dev</span>
<span class="cm">            npm install grunt-template-jasmine-requirejs --save-dev</span>
<span class="cm">    */</span>

    <span class="c1">// Project configuration.</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>

        <span class="c1">// Store your Package file so you can reference its specific data whenever necessary</span>
        <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>

        <span class="c1">// Used to connect to a locally running web server (so Jasmine can test against a DOM)</span>
        <span class="nx">connect</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">test</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">port</span><span class="o">:</span> <span class="mi">8000</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">jasmine</span><span class="o">:</span> <span class="p">{</span>
            <span class="cm">/*</span>
<span class="cm">                Note:</span>
<span class="cm">                In case there is a /release/ directory found, we don&#39;t want to run tests on that </span>
<span class="cm">                so we use the ! (bang) operator to ignore the specified directory</span>
<span class="cm">            */</span>
            <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;app/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!app/release/**&#39;</span><span class="p">],</span>
            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;http://127.0.0.1:8000/&#39;</span><span class="p">,</span>
                <span class="nx">specs</span><span class="o">:</span> <span class="s1">&#39;specs/**/*Spec.js&#39;</span><span class="p">,</span>
                <span class="nx">helpers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;specs/helpers/*Helper.js&#39;</span><span class="p">,</span> <span class="s1">&#39;specs/helpers/sinon.js&#39;</span><span class="p">],</span>
                <span class="nx">template</span><span class="o">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;grunt-template-jasmine-requirejs&#39;</span><span class="p">),</span>
                <span class="nx">templateOptions</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">requireConfig</span><span class="o">:</span> <span class="p">{</span>
                        <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;./app/&#39;</span><span class="p">,</span>
                        <span class="nx">mainConfigFile</span><span class="o">:</span> <span class="s1">&#39;./app/main.js&#39;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">jshint</span><span class="o">:</span> <span class="p">{</span>
            <span class="cm">/*</span>
<span class="cm">                Note:</span>
<span class="cm">                In case there is a /release/ directory found, we don&#39;t want to lint that </span>
<span class="cm">                so we use the ! (bang) operator to ignore the specified directory</span>
<span class="cm">            */</span>
            <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;app/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!app/release/**&#39;</span><span class="p">,</span> <span class="s1">&#39;modules/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;specs/**/*Spec.js&#39;</span><span class="p">],</span>
            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">curly</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
                <span class="nx">eqeqeq</span><span class="o">:</span>  <span class="kc">true</span><span class="p">,</span>
                <span class="nx">immed</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
                <span class="nx">latedef</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">newcap</span><span class="o">:</span>  <span class="kc">true</span><span class="p">,</span>
                <span class="nx">noarg</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
                <span class="nx">sub</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>
                <span class="nx">undef</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
                <span class="nx">boss</span><span class="o">:</span>    <span class="kc">true</span><span class="p">,</span>
                <span class="nx">eqnull</span><span class="o">:</span>  <span class="kc">true</span><span class="p">,</span>
                <span class="nx">browser</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>

                <span class="nx">globals</span><span class="o">:</span> <span class="p">{</span>
                    <span class="c1">// AMD</span>
                    <span class="nx">module</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">require</span><span class="o">:</span>    <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">requirejs</span><span class="o">:</span>  <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">define</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>

                    <span class="c1">// Environments</span>
                    <span class="nx">console</span><span class="o">:</span>    <span class="kc">true</span><span class="p">,</span>

                    <span class="c1">// General Purpose Libraries</span>
                    <span class="nx">$</span><span class="o">:</span>          <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">jQuery</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>

                    <span class="c1">// Testing</span>
                    <span class="nx">sinon</span><span class="o">:</span>      <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">describe</span><span class="o">:</span>   <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">it</span><span class="o">:</span>         <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">expect</span><span class="o">:</span>     <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">beforeEach</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">afterEach</span><span class="o">:</span>  <span class="kc">true</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">requirejs</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">compile</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;./app&#39;</span><span class="p">,</span>
                    <span class="nx">mainConfigFile</span><span class="o">:</span> <span class="s1">&#39;./app/main.js&#39;</span><span class="p">,</span>
                    <span class="nx">dir</span><span class="o">:</span> <span class="s1">&#39;./app/release/&#39;</span><span class="p">,</span>
                    <span class="nx">fileExclusionRegExp</span><span class="o">:</span> <span class="sr">/^\.|node_modules|Gruntfile|\.md|package.json/</span><span class="p">,</span>
                    <span class="c1">// optimize: &#39;none&#39;,</span>
                    <span class="nx">modules</span><span class="o">:</span> <span class="p">[</span>
                        <span class="p">{</span>
                            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;main&#39;</span>
                            <span class="c1">// include: [&#39;module&#39;],</span>
                            <span class="c1">// exclude: [&#39;module&#39;]</span>
                        <span class="p">}</span>
                    <span class="p">]</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">sass</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;compressed&#39;</span><span class="p">,</span>
                    <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;./assets/styles/sass/helpers/url64.rb&#39;</span><span class="p">]</span>
                <span class="p">},</span>
                <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;./app/styles/sass/&#39;</span><span class="p">,</span>
                <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;*.scss&#39;</span><span class="p">],</span>
                <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./app/styles/&#39;</span><span class="p">,</span>
                <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span>
            <span class="p">},</span>
            <span class="nx">dev</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;expanded&#39;</span><span class="p">,</span>
                    <span class="nx">debugInfo</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">lineNumbers</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;./app/styles/sass/helpers/url64.rb&#39;</span><span class="p">]</span>
                <span class="p">},</span>
                <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;./app/styles/sass/&#39;</span><span class="p">,</span>
                <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;*.scss&#39;</span><span class="p">],</span>
                <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./app/styles/&#39;</span><span class="p">,</span>
                <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.css&#39;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="c1">// `optimizationLevel` is only applied to PNG files (not JPG)</span>
        <span class="nx">imagemin</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">png</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">optimizationLevel</span><span class="o">:</span> <span class="mi">7</span>
                <span class="p">},</span>
                <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
                    <span class="p">{</span>
                        <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                        <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;./app/images/&#39;</span><span class="p">,</span>
                        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;**/*.png&#39;</span><span class="p">],</span>
                        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./app/images/compressed/&#39;</span><span class="p">,</span>
                        <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.png&#39;</span>
                    <span class="p">}</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="nx">jpg</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">progressive</span><span class="o">:</span> <span class="kc">true</span>
                <span class="p">},</span>
                <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
                    <span class="p">{</span>
                        <span class="nx">expand</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                        <span class="nx">cwd</span><span class="o">:</span> <span class="s1">&#39;./app/images/&#39;</span><span class="p">,</span>
                        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;**/*.jpg&#39;</span><span class="p">],</span>
                        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./app/images/compressed/&#39;</span><span class="p">,</span>
                        <span class="nx">ext</span><span class="o">:</span> <span class="s1">&#39;.jpg&#39;</span>
                    <span class="p">}</span>
                <span class="p">]</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">htmlmin</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">removeComments</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">collapseWhitespace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">removeEmptyAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">removeCommentsFromCDATA</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">removeRedundantAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">collapseBooleanAttributes</span><span class="o">:</span> <span class="kc">true</span>
                <span class="p">},</span>
                <span class="nx">files</span><span class="o">:</span> <span class="p">{</span>
                    <span class="c1">// Destination : Source</span>
                    <span class="s1">&#39;./index-min.html&#39;</span><span class="o">:</span> <span class="s1">&#39;./index.html&#39;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="c1">// Run: `grunt watch` from command line for this section to take effect</span>
        <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= jshint.files %&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;%= jasmine.options.specs %&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;%= sass.dev.src %&gt;&#39;</span><span class="p">],</span>
            <span class="nx">tasks</span><span class="o">:</span> <span class="s1">&#39;default&#39;</span>
        <span class="p">}</span>

    <span class="p">});</span>

    <span class="c1">// Load NPM Tasks</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-jshint&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-uglify&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-requirejs&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-sass&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-imagemin&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-htmlmin&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-connect&#39;</span><span class="p">);</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-jasmine&#39;</span><span class="p">);</span>

    <span class="c1">// Default Task</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">,</span> <span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="s1">&#39;jasmine&#39;</span><span class="p">,</span> <span class="s1">&#39;sass:dev&#39;</span><span class="p">]);</span>

    <span class="c1">// Unit Testing Task</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="s1">&#39;jasmine&#39;</span><span class="p">]);</span>

    <span class="c1">// Release Task</span>
    <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;release&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">,</span> <span class="s1">&#39;jasmine&#39;</span><span class="p">,</span> <span class="s1">&#39;requirejs&#39;</span><span class="p">,</span> <span class="s1">&#39;sass:dist&#39;</span><span class="p">,</span> <span class="s1">&#39;imagemin&#39;</span><span class="p">,</span> <span class="s1">&#39;htmlmin&#39;</span><span class="p">]);</span>

<span class="p">};</span>
</pre></div>
</code></pre>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>Hopefully this guide gives you a good starting point to begin using Grunt to automate more of your work flow. It&#39;s an extremely powerful tool and we haven&#39;t even begun to scratch the surface as there is the custom task features built-in that let you write your own tasks that interact with the file system and do pretty much anything you want. Well worth investigating further.</p>
<p>Note: my <a href="https://github.com/Integralist/Grunt-Boilerplate">Grunt Boilerplate</a> project is constantly being updated so watch the repo to keep up to speed.</p>
]]></description><link>http://www.integralist.co.uk/posts/grunt-boilerplate/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/grunt-boilerplate/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Mon, 13 May 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Message passing in Object-Oriented Code]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 4mins</em></p>
<ul>
<li>Introduction</li>
<li>Quick example</li>
<li>The Proxy Design Pattern</li>
<li>How Ruby handles method calls</li>
<li>Implementing <code>method_missing</code></li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>In my <a href="http://integralist.co.uk/Object-Oriented-Design.html">previous post</a> I quoted the following description of object-oriented design…</p>
<blockquote>
<p>Object-Oriented Design is about the messages that get sent between objects and not the objects themselves.</p>
</blockquote>
<p>The reason I felt this quote was important for good code design was because it helped focus our attention on improving our object&#39;s interfaces.</p>
<p>Since then I&#39;ve been reading through <a href="http://designpatternsinruby.com">Design Patterns in Ruby</a> by Russ Olsen, and in the chapter on the Proxy design pattern he reiterates thinking about objects more from the perspective of &#39;messages&#39; and how that can help improve the Proxy pattern implementation.</p>
<p>His comments really nailed home for me the design benefits of thinking more about &#39;messages&#39; being passed to objects, and it&#39;s that point which I want to elaborate on below.</p>
<h2><a name="quick-example"class="anchor" href="#quick-example"><span class="header-link"></span></a>Quick example</h2>
<p>Imagine the following code example: <code>account.deposit(50)</code></p>
<p>When thinking about a statically typed language, object methods are generally considered to be more &#39;baked&#39; into the objects, in the sense that running the above code example suggests you are &#39;calling&#39; the <code>deposit</code> method found on the <code>account</code> object. </p>
<p>But in a dynamically typed language (such as Ruby) this doesn&#39;t make a lot of sense because the <code>account</code> object might not actually contain a method called <code>deposit</code> (statically typed languages are compiled and so we can be assured that if we call a method on an object, it will be there - otherwise the program would fail to compile) so talking about &#39;calling&#39; a method on an object is not as accurate as describing it like so: </p>
<blockquote>
<p>&quot;we&#39;re sending a deposit message to an account object&quot;</p>
</blockquote>
<h2><a name="the-proxy-design-pattern"class="anchor" href="#the-proxy-design-pattern"><span class="header-link"></span></a>The Proxy Design Pattern</h2>
<p>The Proxy design pattern is where we place an object between the user and the actual object the user wishes to interact with.</p>
<p>There are a few different types of proxy object:</p>
<ul>
<li>Protection proxies</li>
<li>Remote proxies</li>
<li>Virtual proxies</li>
</ul>
<p>The reason &#39;message passing&#39; came up in the Proxy design pattern (specifically when developing a &#39;virtual proxy&#39; - which is where we create a proxy object to prevent an expensive object instantiation operation from happening until the user &#39;actually&#39; interacts with one of the methods on the real object) was because the author wanted to avoid the situation where we would need to implement a stub method for each method found on the real object. </p>
<p>This isn&#39;t necessarily an issue for all types of objects. But if you look at built-in objects such as the <code>Array</code> object, that has approximately 118 (maybe more) methods! So for us to implement a proxy for that object we&#39;d theorectically need to implement 118 stub methods, each of which would simply forward on the request to the corresponding method on the real object to handle. That would not only be tedious but an inefficient way to implement our proxy object.</p>
<h2><a name="how-ruby-handles-method-calls"class="anchor" href="#how-ruby-handles-method-calls"><span class="header-link"></span></a>How Ruby handles method calls</h2>
<p>In Ruby if you pass a message (e.g. call a method) to an object and that method doesn&#39;t exist, then Ruby will try to find another method on that object: <code>method_missing</code>. </p>
<p>If <code>method_missing</code> doesn&#39;t exist then Ruby will try to lookup the method on the parent object, and will keep moving up the inheritance chain until it reaches the core <code>Object</code> object (which does implement <code>method_missing</code>) and which simply raises a <code>NoMethodError</code> exeception.</p>
<h2><a name="implementing-method_missing-"class="anchor" href="#implementing-method_missing-"><span class="header-link"></span></a>Implementing <code>method_missing</code></h2>
<p>If you implement <code>method_missing</code> on your proxy object then you can pass on the message to the real object more efficiently than stubbing the method.</p>
<p>So instead of this…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AccountProxy</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_object</span><span class="p">)</span>
        <span class="vi">@real_object</span> <span class="o">=</span> <span class="n">real_object</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
        <span class="vi">@real_object</span><span class="o">.</span><span class="n">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="err">…</span> <span class="n">ad</span> <span class="n">infinitum</span> <span class="err">…</span> 
<span class="k">end</span>

<span class="n">account</span> <span class="o">=</span> <span class="no">Account</span><span class="o">.</span><span class="n">new</span>
<span class="n">proxy</span> <span class="o">=</span> <span class="no">AccountProxy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
<span class="n">proxy</span><span class="o">.</span><span class="n">deposit</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</pre></div>
</code></pre>
<p>…we should really take advantage of the dynamic nature of the Ruby language to avoid having to manually write out these methods by hand, like so… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AccountProxy</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_account</span><span class="p">)</span>
        <span class="vi">@subject</span> <span class="o">=</span> <span class="n">real_account</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="vi">@subject</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>You can see from the above example that we&#39;re using the <a href="http://ruby-doc.org/core-2.0/Object.html#method-i-send">send</a> method to pass the message (i.e. the method invoked by the user on the proxy object) directly to the real object.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>As you can see, focusing on passing messages not only helps inform us of better interfaces when designing our application but also makes us more efficient by utilising features unique to dynamically typed languages.</p>
]]></description><link>http://www.integralist.co.uk/posts/message-passing-in-object-oriented-code/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/message-passing-in-object-oriented-code/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 31 Mar 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Object-Oriented Design (OOD)]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 22mins</em></p>
<ul>
<li>Quick Summary</li>
<li>Introduction</li>
<li>Objects</li>
<li>Class Analysis</li>
<li>Dependencies</li>
<li>Flexible Interfaces</li>
<li>Duck Typing</li>
<li>Inheritance</li>
<li>Inheritance vs Composition</li>
<li>Further good rules of development from Sandi Metz</li>
<li>Summary</li>
</ul>
<h2><a name="quick-summary"class="anchor" href="#quick-summary"><span class="header-link"></span></a>Quick Summary</h2>
<p>Here is a short summary for those of you who prefer to see a quick bullet-point list of items covered... </p>
<ul>
<li>Decouple your code (<em>we discuss this in more detail below</em>)</li>
<li>Describe your class to see if it does too much<br>e.g. for each class write down a single line description and try to avoid the words &#39;and&#39;, &#39;or&#39; from occuring</li>
<li>Review each method thoroughly (you may find some methods don&#39;t belong in your class and deserve their own interface)</li>
<li>Manage your dependencies:<ul>
<li>Check the method arguments you&#39;re passing around</li>
<li>Use dependency injection (don&#39;t hard code class names)</li>
<li>Avoid direct references to complex data structures (transform your data into a more appropriate form)</li>
<li>Abide by the Single Responsibility Principle (SRP)</li>
<li>Review comments to ensure their purpose and usefulness<ul>
<li>Your commented code could be better handled by moving into a separate method with a descriptive name</li>
</ul>
</li>
</ul>
</li>
<li>Write more flexible interfaces:<ul>
<li>Object-Oriented code is more about the &#39;messages&#39; sent between objects than the objects themselves</li>
<li>Think about the messages you want to send and create objects/interfaces to handle them</li>
<li>Ask for what you <em>want</em> and don&#39;t include <em>how</em> to do what you want</li>
<li>Ensure messages you send (e.g. method calls you make) don&#39;t rely on knowledge of the object that implements the method</li>
<li>Reduce your object&#39;s context (i.e. how much it knows about other objects). Dependency Injection can help here</li>
</ul>
</li>
<li>Trust your objects (e.g. Duck Typing design principles)</li>
<li>If using the inheritance pattern:<ul>
<li>Abstract your shared functionality into the base class</li>
<li>Make sure sub classes inherit only what they need</li>
<li>Avoid calling <code>super</code> as it&#39;s a code smell</li>
</ul>
</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>All of the following information has been distilled from Sandi Metz&#39; <a href="http://www.poodr.info/">Practical Object-Oriented Design in Ruby</a>, and although the code in this post is based on the Ruby language, don&#39;t worry - the concepts are applicable for any object-oriented language.</p>
<p>I would highly recommend you read <a href="http://www.poodr.info/">Practical Object-Oriented Design in Ruby</a> as the author goes into far more code detail and background information (as well as covering other subjects such as test-driven development and the process of writing efficient unit tests) which will help you understand the concepts better than I could in this single post. But hopefully the following distilled version should be a sufficient starting point for your journey into writing more flexible and maintainable code.</p>
<h2><a name="objects"class="anchor" href="#objects"><span class="header-link"></span></a>Objects</h2>
<p>The best description I have ever read regarding good Object-Oriented design goes like this... </p>
<blockquote>
<p>Object-Oriented Design is about the messages that get sent between objects and not the objects themselves.</p>
</blockquote>
<p>This single line quote perfectly captures the intention behind good Object-Oriented design. </p>
<p>It seems our focus on objects has been wrong. We should be thinking primarily about the messages we want to send. This way we build up classes based on good clean interfaces and so our subsequent objects are clearer and more direct in their message handling.</p>
<h2><a name="class-analysis"class="anchor" href="#class-analysis"><span class="header-link"></span></a>Class Analysis</h2>
<p>We want our classes to be as decoupled as possible. The benefit of this is to allow changes to occur over time with little to no side-effects. If your classes have too many dependencies, which are likely too tightly coupled to the class, then any design/code changes in the future could potentially have a negative knock-on effect on the rest of your code.</p>
<p>To ensure a class only contains the behaviour it needs try describing your class in one sentence. If you find you have to use the word &quot;and&quot; within your description then the class appears to have more than one responsibility (this is a bad thing - your classes should be small and focused on a single responsibility). If you find you have used the word &quot;or&quot; to describe your class then you not only have more than one responsibility but the responsibilities aren&#39;t even related. That again would be an indication of a code smell.</p>
<p>Another way to analyse your classes is to ask each method within the class a question, and to see if any of the answers sound out of place.</p>
<p>e.g. &quot;Please Mr. <code>ClassName</code> what is your <code>method_name</code>?&quot;</p>
<p>This sounds strange and maybe a bit childish, but it&#39;s surprising what methods suddenly appear to no longer fit within the responsibilities of the class being interrogated.</p>
<p>For example, look at the following class which is based on a part of a bicycle (specifically gears)... </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Gear</span>
    <span class="kp">attr_reader</span> <span class="ss">:chainring</span><span class="p">,</span> <span class="ss">:cog</span><span class="p">,</span> <span class="ss">:rim</span><span class="p">,</span> <span class="ss">:tire</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">(</span><span class="n">chainring</span><span class="p">,</span> <span class="n">cog</span><span class="p">,</span> <span class="n">rim</span><span class="p">,</span> <span class="n">tire</span><span class="p">)</span>
      <span class="vi">@chainring</span> <span class="o">=</span> <span class="n">chainring</span>
      <span class="vi">@cog</span>       <span class="o">=</span> <span class="n">cog</span>
      <span class="vi">@rim</span>       <span class="o">=</span> <span class="n">rim</span>
      <span class="vi">@tire</span>      <span class="o">=</span> <span class="n">tire</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">ratio</span>
      <span class="n">chainring</span> <span class="o">/</span> <span class="n">cog</span><span class="o">.</span><span class="n">to_f</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">gear_inches</span>
        <span class="c1"># tire goes around rim twice for diameter</span>
        <span class="n">ratio</span> <span class="o">*</span> <span class="p">(</span><span class="n">rim</span> <span class="o">+</span> <span class="p">(</span><span class="n">tire</span> <span class="o">*</span> <span class="mi">2</span><span class="p">))</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>...now start to ask each of its methods a question (remember that <code>attr_reader</code> generates a getter method and so those need to be queried as well)... </p>
<ul>
<li>&quot;Please Mr. <code>Gear</code> what is your <code>ratio</code>?&quot; <strong>- seems fine</strong></li>
<li>&quot;Please Mr. <code>Gear</code> what is your <code>gear_inches</code>?&quot; <strong>- seems fine also</strong></li>
<li>&quot;Please Mr. <code>Gear</code> what is your <code>tire</code>?&quot; <strong>- hmm? notice this doesn&#39;t sound like it quite fits the purpose of a &#39;Gears&#39; class</strong></li>
</ul>
<p>You can tell that the <code>tire</code> method doesn&#39;t fit in with a class which handles bicycle gears information and would be better suited to be placed in its own class. A simple querying of the methods has pointed us in the direction of a potential code smell.</p>
<p>One other potential code smell worth avoiding is the direct referencing of class attributes/properties. You should only access them via a getter method to ensure good separation of data access. For example...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Gear</span>
    <span class="kp">attr_reader</span> <span class="ss">:chainring</span><span class="p">,</span> <span class="ss">:cog</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">(</span><span class="n">chainring</span><span class="p">,</span> <span class="n">cog</span><span class="p">)</span>
      <span class="vi">@chainring</span> <span class="o">=</span> <span class="n">chainring</span>
      <span class="vi">@cog</span>       <span class="o">=</span> <span class="n">cog</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">ratio</span>
      <span class="vi">@chainring</span> <span class="o">/</span> <span class="vi">@cog</span><span class="o">.</span><span class="n">to_f</span> <span class="c1"># bad</span>
      <span class="n">chainring</span> <span class="o">/</span> <span class="n">cog</span><span class="o">.</span><span class="n">to_f</span>   <span class="c1"># good</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<h2><a name="dependencies"class="anchor" href="#dependencies"><span class="header-link"></span></a>Dependencies</h2>
<p>Dependencies can be many things, for example: external class references or arguments passed to methods.</p>
<p>Below are some rules to help you spot a dependency and how to better manage them... </p>
<h3><a name="direct-references"class="anchor" href="#direct-references"><span class="header-link"></span></a>Direct References</h3>
<p>Avoid &#39;direct references&#39;. These are things like drilling down into a complex array structure to grab some data to work with. You may know the data structure now, but that&#39;s not to say it won&#39;t change in the future. But also, linking to a complicated data structure is confusing to other users because it obscures what the data really is and what it is meant to represent. </p>
<p>So in the following example we are directly accessing <code>item[0]</code> and <code>item[1]</code> from a multi-dimensional array... </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="c1">#BAD</span>
<span class="k">class</span> <span class="nc">MyClass</span>
    <span class="kp">attr_reader</span> <span class="ss">:data</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="vi">@data</span> <span class="o">=</span> <span class="n">data</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">do_something</span>
        <span class="n">data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> 
            <span class="nb">puts</span> <span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
            <span class="nb">puts</span> <span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
            <span class="nb">puts</span> <span class="s1">&#39;---&#39;</span>
        <span class="k">end</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">41</span><span class="p">,</span> <span class="mi">7</span><span class="o">]]</span><span class="p">)</span>
<span class="n">obj</span><span class="o">.</span><span class="n">do_something</span>
</pre></div>
</code></pre>
<p>...but the order of the items may not always be what you think they are and the direct access is not very descriptive of what the data is that you&#39;re accessing. </p>
<p>Instead you should &#39;transform&#39; your data structure into a simpler and easier to understand structure (a good way to do this in Ruby is by using <code>Struct</code> which is perfect for creating basic data holding classes - which is what we want to do here)...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="c1">#GOOD</span>
<span class="k">class</span> <span class="nc">MyClass</span>
    <span class="kp">attr_reader</span> <span class="ss">:new_data</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="vi">@new_data</span> <span class="o">=</span> <span class="n">transform</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">do_something</span>
        <span class="n">new_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> 
            <span class="c1"># now we are able to reference easily understandable </span>
            <span class="c1"># property names (rather than item[0], item[1])</span>
            <span class="nb">puts</span> <span class="n">item</span><span class="o">.</span><span class="n">coord_x</span>
            <span class="nb">puts</span> <span class="n">item</span><span class="o">.</span><span class="n">coord_y</span>
            <span class="nb">puts</span> <span class="s1">&#39;---&#39;</span>
        <span class="k">end</span>
    <span class="k">end</span>

    <span class="no">Transform</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:coord_x</span><span class="p">,</span> <span class="ss">:coord_y</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">data</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="no">Transform</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">41</span><span class="p">,</span> <span class="mi">7</span><span class="o">]]</span><span class="p">)</span>
<span class="n">obj</span><span class="o">.</span><span class="n">do_something</span>
</pre></div>
</code></pre>
<h3><a name="single-responsibility-principle"class="anchor" href="#single-responsibility-principle"><span class="header-link"></span></a>Single Responsibility Principle</h3>
<p>You should refactor your methods so they do one thing (also known as the &#39;Single Responsibility Principle&#39;). One reason to do this is so that your methods become easier to test, and also their new found simplicity can provide a greater clarity that can highlight whether other methods within the class should even be there.</p>
<p>So for example, you may have a complex algorithm contained within a single method of your class and because of its complexity you may miss the fact that some of the algorithm should actually have been handled by a separate class altogether.</p>
<p>Following the Single Responsibility Principle will result in smaller (and greater number of) small sized methods. This result will encourage greater code reuse from yourself (as well as other users of your code) and will also make your methods easier to test and to move around into different classes.</p>
<h3><a name="remove-comments"class="anchor" href="#remove-comments"><span class="header-link"></span></a>Remove comments</h3>
<p>If a piece of code needs a comment then chances are you need to extract that code into a separate method. The name of the method should serve the same purpose as the comment once did. This isn&#39;t always the case, but as part of your analysis you should reconsider any comments to ensure they are helpful or just noise.</p>
<h3><a name="do-not-tightly-couple-your-code"class="anchor" href="#do-not-tightly-couple-your-code"><span class="header-link"></span></a>Do not tightly couple your code</h3>
<p>The best way to decouple your code is to manage your dependencies. </p>
<p>For example, if you look at a class that utilises another class for some additional functionality, that secondary class has become the dependency. Also, if you use that dependency in multiple places and the class was to change in some way then consider how many places your class potentially could break or need to be updated? </p>
<p>Now, a class referencing the name of another class isn&#39;t necessarily a major issue in itself (as the change of a class name can easily be rectified using a modern IDE find &amp; replace feature), the bigger problem is from the lack of code reuse. Your method is tightly coupled to a specific class. </p>
<p>Some other things to look out for are:  </p>
<ul>
<li>arguments passed to a method on the dependency class  <ul>
<li>if the class name itself is hard coded then technically that is an area of concern as well because if the dependency class was renamed then your code which references the old name would need to be updated. </li>
</ul>
</li>
<li>even down to things like the order of the arguments could be considered a dependency.  </li>
</ul>
<p>Every dependency results in more brittle, tightly coupled code.</p>
<h3><a name="facades"class="anchor" href="#facades"><span class="header-link"></span></a>Facades</h3>
<p>Do not let external dependencies permeate your code. </p>
<p>One way to prevent this is to wrap any dependencies in a method so you can implement a facade over the original interface allowing it to match your own API.</p>
<p>For example, if your dependency had a method which required arguments to be sent in a specific order then you could wrap the call to the method in a facade which allowed the user of your class to pass in the arguments in another format. Your facade could then normalise the data before passing it over to the dependency&#39;s method.</p>
<h3><a name="dependency-directions"class="anchor" href="#dependency-directions"><span class="header-link"></span></a>Dependency Directions</h3>
<p>Make sure you spend time considering the direction of your dependencies.</p>
<p>When considering the direction of your dependencies (e.g. does class A rely more on class B, or vice versa) remember to think about the following 3 points...</p>
<ol>
<li><p>Some classes are more likely to change than others</p>
</li>
<li><p>Concrete classes are more likely to change than abstract classes.<br>Imagine you have a class with a hard coded reference to another class. We could make the primary class more abstract by injecting the  dependency of the secondary class rather than having to reference it directly. This way the primary class is able to accept an object successfully as long as it implements the required method.</p>
</li>
<li><p>A class with many dependants could result in widespread consequences.</p>
</li>
</ol>
<h3><a name="summary-of-dependencies-"class="anchor" href="#summary-of-dependencies-"><span class="header-link"></span></a>Summary of dependencies...</h3>
<ul>
<li><p>Dependency management is core to creating future-proof applications. </p>
</li>
<li><p>Injecting dependencies creates loosely coupled objects that can be reused. </p>
</li>
<li><p>Isolating dependencies allows objects to adapt to unexpected changes. </p>
</li>
<li><p>Depending on abstractions decreases the likelihood of facing changes. </p>
</li>
<li><p>The key to managing dependencies is to control their direction. </p>
</li>
</ul>
<p>And to quote another... </p>
<blockquote>
<p>&quot;Depend on things that change less often than you do&quot;</p>
</blockquote>
<h2><a name="flexible-interfaces"class="anchor" href="#flexible-interfaces"><span class="header-link"></span></a>Flexible Interfaces</h2>
<p>Object-Oriented applications are made up of objects(classes) but are defined by the messages that pass between these objects. </p>
<p>Our code must handle...</p>
<ul>
<li>What objects <em>know</em> (i.e. their responsibility)</li>
<li><em>Who</em> they know (i.e. their dependencies)</li>
<li><em>How</em> they talk to one another</li>
</ul>
<p>...and this is done via our object&#39;s interfaces. </p>
<p>Creating a flexible interface is essential to good Object-Oriented design. </p>
<p>Each object should reveal as little about itself, and know as little about other objects as possible. </p>
<p>There are two parts to our interfaces: a Public Interface and a Private Interface... </p>
<h3><a name="public-interface-"class="anchor" href="#public-interface-"><span class="header-link"></span></a>Public interface:</h3>
<ul>
<li>Should reveal the primary responsibility </li>
<li>Is expected to be invoked by others</li>
<li>Will be unlikely to change (so safe for other objects to depend on)</li>
<li>Testable</li>
</ul>
<h3><a name="private-interface"class="anchor" href="#private-interface"><span class="header-link"></span></a>Private interface</h3>
<ul>
<li>Should handle implementation details</li>
<li>Not be accessible by other objects</li>
<li>Can be changed at anytime without causing side effects for other objects</li>
<li>Aren&#39;t even accessible by unit tests</li>
</ul>
<p>A good way to start designing your interfaces is to draw sequence diagrams (one way to do this is to use UML). Just remember to focus on the messages needing to be sent between objects rather than focusing on the objects themselves.</p>
<p>When designing your interfaces you should ask yourself the question: &quot;I need to send this message, who should respond to it?&quot;. </p>
<p>It&#39;s important to understand that you don&#39;t send messages because you have objects. You have objects because you send messages. If you keep that in mind then you can ensure your objects only handle responsibilities relevant to them.</p>
<p>Avoid asking the question &quot;What should this class do?&quot; and make sure your interfaces are designed in such a way that they ask for what they want and don&#39;t try to tell another object what to do. </p>
<p>For example, If you have a Mechanic class and you want the class to prepare a bike for you then don&#39;t call the Mechanic&#39;s individual methods: &quot;clean_bike&quot;, &quot;pump_tyres&quot;, &quot;check_brakes&quot; directly. Instead you know the message you want to send (in this case you want to have a bike prepared for you) so create an interface that supports that message requirement. Do this by creating a method on the Mechanic class called &quot;prepare_bike&quot; and send your message to that method. This way if the Mechanic class changes its implementation then the object that calls the &quot;prepare_bike&quot; method doesn&#39;t have to change as well. </p>
<h3><a name="reducing-context"class="anchor" href="#reducing-context"><span class="header-link"></span></a>Reducing Context</h3>
<p>The things an object knows about other objects make up its &#39;context&#39;. </p>
<p>An object may have a single responsibility but it expects a context. For example the object expects an object to respond to a specific method call. </p>
<p>For an object to become more reusable and more easily testable it must reduce its contexts. If there is a context then to reuse the object you need to bring along the context every time (this makes code reuse and testing harder). </p>
<p>Dependency injection reduces the context. For example if you had an object which called a generic method and passed &#39;self&#39; as an argument then the receiving object could handle the request (and because the first object was injected as a dependency) then the second object could call the first object when it&#39;s finished with the request. </p>
<h3><a name="summary-of-interfaces"class="anchor" href="#summary-of-interfaces"><span class="header-link"></span></a>Summary of Interfaces</h3>
<p>Your interface defines your application and determines its future. </p>
<p>Object-Oriented applications are defined by messages that pass between objects. This is handled via public interfaces. Ask for what you want and don&#39;t include any &#39;hows&#39; as part of the request which would be telling the receiving object how to behave rather than it handling the how itself. </p>
<h2><a name="duck-typing"class="anchor" href="#duck-typing"><span class="header-link"></span></a>Duck Typing</h2>
<p>Duck Typing is the process of making code more flexible and less tightly coupled by taking into consideration that if an object &quot;sounds like a duck, and quacks like a duck&quot; then it stands to reason the object must indeed be (or act like) a duck.</p>
<p>The principle idea behind Duck Typing is to trust your objects (e.g. do not worry about the class of an object, only that the object implement the expected interface - and trust that it does). Sounds scary/dangerous but it will help you to avoid writing code that tightly couples to your dependencies. </p>
<p>Cleaning up a long and ugly switch/case statement which checks the class of an object to determine what action to take is one area where Duck Typing can help. The problem with this example is that the switch statement technique is fragile and likely to break when new class types need to be added. </p>
<p>Instead, for each object create a generically named method (same name for each object) which handles the appropriate internal/specific details relevant for that object. This way you can just call the method (and even pass the calling object as a reference <code>self</code> in case the receiving object needs further information to carry out its work) and thus make your code more reusable by not tightly coupling a specific method to multiple object calls. </p>
<p>Also, any where you see the use of <code>is_a?</code> or <code>responds_to?</code> then that is an indication of a potential code smell because the principle issue identical to the switch statement. </p>
<h2><a name="inheritance"class="anchor" href="#inheritance"><span class="header-link"></span></a>Inheritance</h2>
<h3><a name="abstract-your-base-class"class="anchor" href="#abstract-your-base-class"><span class="header-link"></span></a>Abstract your base class</h3>
<p>When inheriting from another class it is essential that the parent class is as abstract as possible. For example, it only holds enough code that is relevant for all its sub classes. A sub class should never inherit redundant data or methods. If it does then your parent class isn&#39;t abstract enough. </p>
<h3><a name="default-values"class="anchor" href="#default-values"><span class="header-link"></span></a>Default values</h3>
<p>Be careful when using default values. If your base class has a common property which is different for each sub class, but is required within each sub class (hence sticking it in the base class) then you won&#39;t want to give it a value inside the base class. Your base class should take in the value via the constructor and if the value isn&#39;t provided you should set the default using a method like so...</p>
<p><code>xxx = args[:xxx] || default_xxx_value</code></p>
<p>In this example <code>default_xxx_value</code> should be a method the sub class implements which provides the specific value. The reason we have written it like this is so that the sub class has better control over setting the default value. </p>
<p>So far so good. But if a new user doesn&#39;t read the documentation (which states they must implement <code>default_xxx_value</code> within their sub class) then they will get an error thrown. In the above example it may be best to raise your own descriptive error by implementing the <code>default_xxx_value</code> method as an abstract method within the base class like so...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">default_xxx_value</span>
    <span class="k">raise</span> <span class="no">NotImplementedError</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2"> cannot respond to: &quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Note: the above custom error message raised will display automatically the name of the method (<code>default_xxx_value</code>) at the end of the message when it is displayed to the user (hence we don&#39;t need to manually include it). </p>
<h3><a name="super"class="anchor" href="#super"><span class="header-link"></span></a>Super</h3>
<p>Beware calls to <code>super</code> via a sub class, as this is a code smell. </p>
<p>Why? Because it declares that the sub class knows the implementation of the base class. It says &quot;I know what you do, I know what to send to you and I know what returned value to expect&quot;. The sub class has more context than it should do and we&#39;ve created a dependency. </p>
<p>In this example the sub class knows too much about the base class and so it is tightly coupled to it. If a new developer joins the project and creates a sub class, but doesn&#39;t call <code>super</code> at the appropriate time, then they would likely have a silent failure (or at least one that could be difficult to debug).</p>
<p>To resolve the concern of using <code>super</code> we can use a &#39;hook message&#39; which effectively allows the sub class to stay decoupled from the base class. The sub class needs to be able to trust that the base class will do the right thing (which in this case is to call a method). </p>
<p>The way the hook method works is you remove the constructor from the sub class and move the sub class specific constructor code into a separate method of the sub class called <code>post_initialise</code> (or whatever you want to call it). The base class&#39; own constructor will be run when a new instance of the sub class is created but now the base class constructor will be updated so it calls the <code>post_initialise</code> method at the end of its constructor (this means the base class needs to implement an empty <code>post_initialise</code> method which the sub class then overwrites). </p>
<p>Now the sub class doesn&#39;t know about the base class other than it inherits from it and the interface contract between them states the base class will at some point call <code>post_initialise</code> whenever it&#39;s ready to do so and the sub class takes over from there. It&#39;s now clear that the sub class is just a specialised version of the base class.</p>
<p>This works with other methods not just the constructor. The base class could have...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">spares</span>
    <span class="p">{</span> <span class="n">tyre_size</span><span class="ss">:tyre_size</span> <span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">local_spares</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>...the sub class can then implement its own <code>local_spares</code> method which returns a hash. So when a user creates a new instance of the sub class and calls the <code>spares</code> method, the base class handles the functionality. The sub class can insert its own specialised data without knowing how the base class works (other than the interface design dictates the sub class should implement a method called <code>local_spares</code>). </p>
<h3><a name="modules"class="anchor" href="#modules"><span class="header-link"></span></a>Modules</h3>
<p>Not all objects are specialised versions of another object and so they shouldn&#39;t always inherit functionality via the inheritance pattern. </p>
<p>Objects have a tendency to play a role, and some objects play a similar role to other objects.</p>
<p>Instead of the inheritance pattern we can use modules as &#39;mixins&#39; which will let these objects (those with similar roles) share behaviour. </p>
<p>Modules are placed inside the same lookup path as methods acquired through inheritance, so the principles for developing modules should follow those of writing classes: use the Template Method Pattern (e.g. have stub methods which the sub classes overwrite). </p>
<p>For example, any object which includes the module needs to provide their own specialisation of a hook method implemented in the module. This means an object which includes the module doesn&#39;t have to create a dependency by calling <code>super</code>, thus avoiding needing to know anything about the included module (other than its implied interface contract) and ultimately reducing its context (i.e. what it knows - a dumb object is a reusable object). </p>
<h3><a name="composition"class="anchor" href="#composition"><span class="header-link"></span></a>Composition</h3>
<p>The composition pattern is effectively the same as using modules (where you copy in functionality rather than inheriting it - thus creating a &#39;<em>has-a</em>&#39; relationship rather than a &#39;<em>is-a</em>&#39; relationship). </p>
<p>But composition from a design perspective is more about the resulting &#39;whole&#39;, than the subsequent parts that make up the whole. </p>
<h2><a name="inheritance-vs-composition"class="anchor" href="#inheritance-vs-composition"><span class="header-link"></span></a>Inheritance vs Composition</h2>
<p>Inheritance is the more appropriate solution if your design dictates that the objects have a well defined concrete class of functionality and that most of that base functionality is the same for all other objects. With inheritance you would write only small amounts of new code to extend the base functionality so the extending objects become more specialised.</p>
<blockquote>
<p>Inheritance is specialisation<br><em>Bertrand Meyer, Touch of Class</em></p>
</blockquote>
<p>If on the other hand your objects are all different and the design of the objects dictates there could be multiple reusable &#39;parts&#39;, then composition would be the better solution.</p>
<blockquote>
<p>Use composition when the behaviour is more than the sum of it&#39;s parts<br><em>Grady Booch, Object-Oriented Analysis and Design</em></p>
</blockquote>
<h2><a name="further-good-rules-of-development-from-sandi-metz"class="anchor" href="#further-good-rules-of-development-from-sandi-metz"><span class="header-link"></span></a>Further good rules of development from Sandi Metz</h2>
<ol>
<li>Your class can be no longer than a hundred lines of code.</li>
<li>Your methods can be no longer than five lines of code</li>
<li>You can pass no more than four parameters (do not make it one big hash either).</li>
<li>In your controller, you can only instantiate one object, to do whatever it is that needs to be done.</li>
<li>Your view can only know about one instance variable.</li>
<li>Rules are meant to be broken if by breaking them you produce better code. [ ...where &quot;better code&quot; is validated by explaining why you want to break the rule to someone else. ]</li>
</ol>
<h2><a name="summary"class="anchor" href="#summary"><span class="header-link"></span></a>Summary</h2>
<p>So just to quickly recap on some of the important points covered... </p>
<ul>
<li>Decouple your code</li>
<li>Describe your class to see if it does too much<br>e.g. for each class write down a single line description and try to avoid the words &#39;and&#39;, &#39;or&#39; from occuring</li>
<li>Review each method thoroughly (you may find some methods don&#39;t belong in your class and deserve their own interface)</li>
<li>Manage your dependencies:<ul>
<li>Check the method arguments you&#39;re passing around</li>
<li>Use dependency injection (don&#39;t hard code class names)</li>
<li>Avoid direct references to complex data structures (transform your data into a more appropriate form)</li>
<li>Abide by the Single Responsibility Principle (SRP)</li>
<li>Review comments to ensure their purpose and usefulness<ul>
<li>Your commented coded could be better handled by moving into a separate method with a descriptive name</li>
</ul>
</li>
</ul>
</li>
<li>Write more flexible interfaces:<ul>
<li>Object-Oriented code is more about the &#39;messages&#39; sent between objects than the objects themselves</li>
<li>Think about the messages you want to send and create objects/interfaces to handle them</li>
<li>Ask for what you <em>want</em> and don&#39;t include <em>how</em> to do what you want</li>
<li>Ensure messages you send (e.g. method calls you make) don&#39;t rely on knowledge of the object that implements the method</li>
<li>Reduce your object&#39;s context (i.e. how much it knows about other objects). Dependency Injection can help here</li>
</ul>
</li>
<li>Trust your objects (e.g. Duck Typing design principles)</li>
<li>If using the inheritance pattern:<ul>
<li>Abstract your shared functionality into the base class</li>
<li>Make sure sub classes inherit only what they need</li>
<li>Avoid calling <code>super</code> as it&#39;s a code smell</li>
</ul>
</li>
</ul>
]]></description><link>http://www.integralist.co.uk/posts/object-oriented-design-ood/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/object-oriented-design-ood/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Tue, 12 Feb 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Git Tips]]></title><description><![CDATA[<p>I thought I would get down in a blog post the different <a href="http://git-scm.com">Git</a> commands and tips that I find really useful, because every now and then it seems I need to refer back to these notes (which up until this point have been in a txt file in my Dropbox) if I&#39;ve not used a particular command in a while. </p>
<p>Hopefully you&#39;ll find them useful too.</p>
<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 13mins</em></p>
<ol>
<li><a href="#1">Show where Git is installed</a></li>
<li><a href="#2">Show the Git version installed</a></li>
<li><a href="#3">Update your global user details</a></li>
<li><a href="#4">Set-up a global ignore file</a></li>
<li><a href="#5">Adding all files (inc. those marked as deleted)</a></li>
<li><a href="#6">Writing a long commit</a></li>
<li><a href="#7">Viewing file changes while writing your commit</a></li>
<li><a href="#8">Viewing what files have been committed</a></li>
<li><a href="#9">Improving <code>git log</code> with <code>git lg</code></a></li>
<li><a href="#10">Shorter <code>git status</code></a></li>
<li><a href="#11">Finding a commit that includes a specific phrase</a></li>
<li><a href="#12">Only merging the files you want</a></li>
<li><a href="#13">Stashing changes you&#39;re not ready to commit</a></li>
<li><a href="#14">Revert all changes back to last commit</a></li>
<li><a href="#15">Unstaging files</a></li>
<li><a href="#16">Untrack a file without deleting it</a></li>
<li><a href="#17">Amend your last commit</a></li>
<li><a href="#18">Show the files within a commit</a></li>
<li><a href="#19">See any changes between current working directory and last commit</a></li>
<li><a href="#20">See changes between two commits</a></li>
<li><a href="#21">Creating a branch and moving to it at the same time</a></li>
<li><a href="#22">Deleting a branch</a></li>
<li><a href="#23">Viewing all branches of a remote</a></li>
<li><a href="#24">Checkout a remote branch</a></li>
<li><a href="#25">Remove a remote</a></li>
<li><a href="#26">Revert a specific file back to an earlier version</a></li>
<li><a href="#27">Viewing all commits for a file and who made those changes</a></li>
<li><a href="#28">Commiting only parts of a file rather than the whole file</a></li>
<li><a href="#29">Modifying your Git history with <code>rebase</code></a></li>
</ol>
<p><div id="1"></div></p>
<h2><a name="show-where-git-is-installed"class="anchor" href="#show-where-git-is-installed"><span class="header-link"></span></a>Show where Git is installed</h2>
<p><code>which git</code></p>
<p><div id="2"></div></p>
<h2><a name="show-the-git-version-installed"class="anchor" href="#show-the-git-version-installed"><span class="header-link"></span></a>Show the Git version installed</h2>
<p><code>git version</code></p>
<p><div id="3"></div></p>
<h2><a name="update-your-global-user-details"class="anchor" href="#update-your-global-user-details"><span class="header-link"></span></a>Update your global user details</h2>
<pre><code class="lang-sh"><div class="highlight"><pre>git config --global user.name <span class="s2">&quot;Your Name&quot;</span>
git config --global user.email <span class="s2">&quot;Your Email&quot;</span>
git config --global apply.whitespace nowarn <span class="c"># ignore white space changes!</span>
</pre></div>
</code></pre>
<p><div id="4"></div></p>
<h2><a name="set-up-a-global-ignore-file"class="anchor" href="#set-up-a-global-ignore-file"><span class="header-link"></span></a>Set-up a global ignore file</h2>
<p>First create the global ignore file…</p>
<p><code>touch ~/.gitignore_global</code></p>
<p>Then add the following content to it (<em>this is a standard ignore file but I&#39;ve added some Sass CSS pre-processor files to it</em>)…</p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="c"># Compiled source #</span>
<span class="c">###################</span>
*.com
*.class
*.dll
*.exe
*.o
*.so
*.sass-cache
*.scssc

<span class="c"># Packages #</span>
<span class="c">############</span>
<span class="c"># it&#39;s better to unpack these files and commit the raw source</span>
<span class="c"># git has its own built in compression methods</span>
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

<span class="c"># Logs and databases #</span>
<span class="c">######################</span>
*.log
*.sql
*.sqlite

<span class="c"># OS generated files #</span>
<span class="c">######################</span>
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
Icon?
ehthumbs.db
Thumbs.db
</pre></div>
</code></pre>
<p>You can let Git know about your global ignore file by editing your global <code>.gitconfig</code> file…</p>
<p><code>nano ~/.gitconfig</code></p>
<p>…then adding the following to it… </p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="o">[</span>core<span class="o">]</span>
    <span class="nv">excludesfile</span> <span class="o">=</span> /Users/&lt;home-directory&gt;/.gitignore_global
</pre></div>
</code></pre>
<p>…or once the <code>.gitignore_global</code> file is created you can just tell git by using this short-hand command…</p>
<p><code>git config --global core.excludesfile ~/.gitignore_global</code></p>
<p><div id="5"></div></p>
<h2><a name="adding-all-files-inc-those-marked-as-deleted-"class="anchor" href="#adding-all-files-inc-those-marked-as-deleted-"><span class="header-link"></span></a>Adding all files (inc. those marked as deleted)</h2>
<p><code>git add -A</code></p>
<p><div id="6"></div></p>
<h2><a name="writing-a-long-commit"class="anchor" href="#writing-a-long-commit"><span class="header-link"></span></a>Writing a long commit</h2>
<p>A short git commit message would look like this…</p>
<p><code>git commit -m &quot;My short commit message&quot;</code></p>
<p>…but you should really be writing longer more descriptive commit messages which you do like so:</p>
<p><code>git commit</code></p>
<p>…what this does is open up the default editor for commit messages (which for most is Vim). Now Vim is a bizarre editor with all sorts of odd shortcuts for adding text. I&#39;ve only used Vim to write commit messages (nothing else) so I have a very focused set of commands to write my commands…</p>
<p>Press <code>i</code> which puts Vim into &#39;insert&#39; mode (meaning you can actually write)</p>
<pre><code class="lang-sh"><div class="highlight"><pre>This is my short description <span class="k">for </span>this commit
- Here is a <span class="nb">break </span>down of my changes
- Another note about a particular change
</pre></div>
</code></pre>
<p>After I&#39;ve written my commit I just need to save the commit and exit Vim…</p>
<ul>
<li>Press <code>Esc</code></li>
<li>Press <code>:wq</code> (the colon means you can execute more commands, w = write, q = quit)</li>
</ul>
<p><div id="7"></div></p>
<h2><a name="viewing-file-changes-while-writing-your-commit"class="anchor" href="#viewing-file-changes-while-writing-your-commit"><span class="header-link"></span></a>Viewing file changes while writing your commit</h2>
<p><code>git commit -v</code></p>
<p><div id="8"></div></p>
<h2><a name="viewing-what-files-have-been-committed"class="anchor" href="#viewing-what-files-have-been-committed"><span class="header-link"></span></a>Viewing what files have been committed</h2>
<p><code>git ls-files</code></p>
<p><div id="9"></div></p>
<h2><a name="improving-git-log-with-git-lg-"class="anchor" href="#improving-git-log-with-git-lg-"><span class="header-link"></span></a>Improving <code>git log</code> with <code>git lg</code></h2>
<p>To get a better looking <code>git log</code> we need to write an alias called <code>git lg</code> that is just made up of standard Git commands/flags but when put together (along with specific colour settings) means we can have a short git command that provides us lots of useful information.</p>
<p>What we need to do is open the <code>~/.gitconfig</code> file and then add the following content… </p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
    <span class="nv">lg</span> <span class="o">=</span> log --color --graph --pretty<span class="o">=</span>format:<span class="s1">&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39;</span> --abbrev-commit --date<span class="o">=</span>relative
</pre></div>
</code></pre>
<p><div id="10"></div></p>
<h2><a name="shorter-git-status-"class="anchor" href="#shorter-git-status-"><span class="header-link"></span></a>Shorter <code>git status</code></h2>
<p>As per the above tip, we can create two extra alias&#39; which give us a shorter command to type (I don&#39;t know about you but when typing really fast I seem to always misspell the word &#39;status&#39;) and doesn&#39;t show us all the unnecessary crap that someone new to Git needs to see.</p>
<p>What we need to do is open the <code>~/.gitconfig</code> file and then add the following content… </p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="o">[</span><span class="nb">alias</span><span class="o">]</span> 
    <span class="nv">st</span> <span class="o">=</span> status
    <span class="nv">sts</span> <span class="o">=</span> status -sb
</pre></div>
</code></pre>
<p>…you don&#39;t need to specify <code>[alias]</code> if it&#39;s already in the file (see previous tip).</p>
<p>Now typing <code>git st</code> will be the same as <code>git status</code>, and typing <code>git sts</code> will be the same as <code>git status -sb</code>.</p>
<p><div id="11"></div></p>
<h2><a name="finding-a-commit-that-includes-a-specific-phrase"class="anchor" href="#finding-a-commit-that-includes-a-specific-phrase"><span class="header-link"></span></a>Finding a commit that includes a specific phrase</h2>
<p><code>git log --grep=&lt;your-phrase-here&gt;</code></p>
<p>For example, <code>git log --grep=CSS</code> will display all commits that contain the word &#39;CSS&#39; in the message.</p>
<p><div id="12"></div></p>
<h2><a name="only-merging-the-files-you-want"class="anchor" href="#only-merging-the-files-you-want"><span class="header-link"></span></a>Only merging the files you want</h2>
<p><code>git checkout &lt;branch-name&gt; &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;</code></p>
<p><div id="13"></div></p>
<h2><a name="stashing-changes-you-re-not-ready-to-commit"class="anchor" href="#stashing-changes-you-re-not-ready-to-commit"><span class="header-link"></span></a>Stashing changes you&#39;re not ready to commit</h2>
<p>If you make changes to your branch and then want to quickly change branches without first having to commit your current &#39;dirty state&#39; then run:</p>
<p><code>git stash</code></p>
<p>To apply a stashed state (git assumes the most recent stashed state if none specified) use: </p>
<p><code>git stash apply</code></p>
<p>To see which stashes you&#39;ve stored (on any branch) use:</p>
<p><code>git stash list</code></p>
<p>When viewing a list of stashes it can be useful if the stashes had corresponding messages (so you know what each stash holds), for that to happen you&#39;ll need to create stashes with an associated message using the <code>save</code> command:  </p>
<p><code>git stash save &quot;my message here&quot;</code></p>
<p>If you have multiple stashes under a branch (e.g. <code>stash@{1}</code> <code>stash@{2}</code> <code>stash@{3}</code>) then you can reference a particular stash using:</p>
<p><code>git stash apply@{2}</code></p>
<p>To view the contents of a stash use:</p>
<p><code>git stash show -p stash@{n}</code></p>
<p>…where &#39;n&#39; is the numeric index of the stash</p>
<p>Applying the stash doesn&#39;t mean it&#39;s removed from your list of stashes though(!) so you need to run:</p>
<p><code>git stash drop stash@{&lt;index&gt;}</code></p>
<p>e.g. <code>git stash drop stash@{2}</code></p>
<p>You can also apply and drop the stash at the same time:</p>
<p><code>git stash pop</code></p>
<p>You can also specify an exact stash to pop:</p>
<p><code>git stash pop stash@{2}</code></p>
<p>If you stash some work, leave it there for a while, and continue on the branch from which you stashed the work, you may have a problem reapplying the work. If the apply tries to modify a file that you’ve since modified, you’ll get a merge conflict and will have to try to resolve it. If you want an easier way to test the stashed changes again, you can run <code>git stash &lt;branch&gt;</code> which creates a new branch for you, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully.</p>
<p>If you need to stash only specific files then first <code>git add</code> the files you don&#39;t want to stash, then run:</p>
<p><code>git stash --keep-index</code></p>
<p>...finally you can then <code>git reset</code> the files you originally added (if you don&#39;t plan on committing them yet).</p>
<p><div id="14"></div></p>
<h2><a name="revert-all-changes-back-to-last-commit"class="anchor" href="#revert-all-changes-back-to-last-commit"><span class="header-link"></span></a>Revert all changes back to last commit</h2>
<p><code>git reset --hard</code></p>
<p>Note: you can do a &#39;soft&#39; reset <code>git reset --soft &lt;hash&gt;</code>. The difference between <code>--hard</code> and <code>--soft</code> is with <code>--hard</code> the specified commit hash&#39;s files are moved into the working directory and the staging area (as if there were no changes since that specified commit). But using <code>--soft</code> will leave whatever changes you&#39;ve made in your working directory/staging area but will restore the specified commit you&#39;ve selected.</p>
<p><div id="15"></div></p>
<h2><a name="unstaging-files"class="anchor" href="#unstaging-files"><span class="header-link"></span></a>Unstaging files</h2>
<p>To unstage files we&#39;ve added to the staging area we need to run the command <code>reset HEAD</code> but that&#39;s a bit ugly and awkward to remember. What would be easier is if we could just say <code>git unstage</code>, so let&#39;s create an alias to help make that easier!</p>
<p>Open up the file <code>~/.gitconfig</code> and then add the following content… </p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
    <span class="nv">unstage</span> <span class="o">=</span> reset HEAD
</pre></div>
</code></pre>
<p>Note: you don&#39;t need to specify <code>[alias]</code> if it&#39;s already in the <code>~/.gitconfig</code> file.</p>
<p>You can also unstage a single file using:</p>
<p><code>git reset &lt;file&gt;</code></p>
<p>If you&#39;ve staged files before any commits have been set (e.g. right at the start of your project) then you&#39;ll find the above wont work because technically there are no commits to revert back to. So instead you&#39;ll need to remove the files like so…</p>
<p><code>git rm --cached &lt;file&gt;</code></p>
<p><div id="16"></div></p>
<h2><a name="untrack-a-file-without-deleting-it"class="anchor" href="#untrack-a-file-without-deleting-it"><span class="header-link"></span></a>Untrack a file without deleting it</h2>
<p>If you want to have Git stop tracking a file it&#39;s already tracking then you would think to run:</p>
<p><code>git rm &lt;file&gt;</code></p>
<p>…but the problem with that command is that Git will also delete the file altogether!? Something we usually don&#39;t want to have happen.</p>
<p>The work around to that issue is to use the <code>--cached</code> flag:</p>
<p><code>git rm --cached &lt;file&gt;</code></p>
<p><div id="17"></div></p>
<h2><a name="amend-your-last-commit"class="anchor" href="#amend-your-last-commit"><span class="header-link"></span></a>Amend your last commit</h2>
<p>If you make a commit and then realise that you want to amend the commit message then don&#39;t make any changes to the files and just run…</p>
<p><code>git commit --amend</code></p>
<p>…which will open up the default editor for handling commits (usually Vim) and will let you amend the commit message.</p>
<p>If on the other hand you decide that after you&#39;ve written a commit that you want to amend the commit by adding some more files to it then just add the files as normal and run the same command as above and when Vim opens to let you edit the commit message you&#39;ll see the extra files you added as part of that commit.</p>
<p><div id="18"></div></p>
<h2><a name="show-the-files-within-a-commit"class="anchor" href="#show-the-files-within-a-commit"><span class="header-link"></span></a>Show the files within a commit</h2>
<p><code>git show &lt;hash&gt; --name-only</code></p>
<p><div id="19"></div></p>
<h2><a name="see-differences-between-files"class="anchor" href="#see-differences-between-files"><span class="header-link"></span></a>See differences between files</h2>
<p>To see the difference between the current working directory and the last commit:  </p>
<p><code>git diff</code></p>
<p>If your files have been added to the staging area already then you can use the <code>--cached</code> flag:  </p>
<p><code>git diff --cached</code></p>
<p>To show specific changes use the <code>--word-diff</code> flag:</p>
<p><code>git diff --word-diff</code></p>
<p>To see the diff between the working directory and a specific commit:  </p>
<p><code>git diff &lt;hash&gt; &lt;file-name&gt;</code> (the file name is optional)</p>
<p>To see the difference between branches:</p>
<p><code>git diff &lt;branch-1&gt;..&lt;branch-2&gt;</code></p>
<p><div id="20"></div></p>
<h2><a name="see-changes-between-two-commits"class="anchor" href="#see-changes-between-two-commits"><span class="header-link"></span></a>See changes between two commits</h2>
<p><code>git diff &lt;more-recent-hash&gt; &lt;older-hash&gt;</code></p>
<p><div id="21"></div></p>
<h2><a name="creating-a-branch-and-moving-to-it-at-the-same-time"class="anchor" href="#creating-a-branch-and-moving-to-it-at-the-same-time"><span class="header-link"></span></a>Creating a branch and moving to it at the same time</h2>
<p><code>git checkout -b &lt;branch-name&gt;</code></p>
<p><div id="22"></div></p>
<h2><a name="deleting-a-branch"class="anchor" href="#deleting-a-branch"><span class="header-link"></span></a>Deleting a branch</h2>
<p><code>git branch -D &lt;branch-name&gt;</code></p>
<p><div id="23"></div></p>
<h2><a name="viewing-all-branches-of-a-remote"class="anchor" href="#viewing-all-branches-of-a-remote"><span class="header-link"></span></a>Viewing all branches of a remote</h2>
<p><code>git branch -a</code></p>
<p><div id="24"></div></p>
<h2><a name="checkout-a-remote-branch"class="anchor" href="#checkout-a-remote-branch"><span class="header-link"></span></a>Checkout a remote branch</h2>
<p>What normally happens is this: you clone down a repository from GitHub and this repo will have multiple branches, but if you run <code>git branch</code> locally all you see is the <code>master</code> branch.</p>
<p>If you run <code>git branch -a</code> you can see all the branches for that remote repository but you just can&#39;t access them or check them out?</p>
<p>So if you want to access the other branches within that repo then run the following command:</p>
<p><code>git checkout -b &lt;new-local-branch-name&gt; origin/&lt;remote-branch-name&gt;</code></p>
<p>…this will create a new branch named whatever you called it and contains the content of the remote branch you specified.</p>
<p><div id="25"></div></p>
<h2><a name="remove-a-remote"class="anchor" href="#remove-a-remote"><span class="header-link"></span></a>Remove a remote</h2>
<p><code>git remove rm &lt;remote&gt;</code></p>
<p><div id="26"></div></p>
<h2><a name="revert-a-specific-file-back-to-an-earlier-version"class="anchor" href="#revert-a-specific-file-back-to-an-earlier-version"><span class="header-link"></span></a>Revert a specific file back to an earlier version</h2>
<p><code>git checkout &lt;hash|tag|HEAD&gt; &lt;file-name&gt;</code></p>
<p>Note if you&#39;ve staged your file and then started making changes to the file which you no longer want applied you can use: <code>git checkout -- &lt;file-name&gt;</code> to revert to the version of the file in the staging area.</p>
<p><div id="27"></div></p>
<h2><a name="viewing-all-commits-for-a-file-and-who-made-those-changes"class="anchor" href="#viewing-all-commits-for-a-file-and-who-made-those-changes"><span class="header-link"></span></a>Viewing all commits for a file and who made those changes</h2>
<p><code>git blame &lt;file&gt;</code></p>
<p><div id="28"></div></p>
<h2><a name="commiting-only-parts-of-a-file-rather-than-the-whole-file"class="anchor" href="#commiting-only-parts-of-a-file-rather-than-the-whole-file"><span class="header-link"></span></a>Commiting only parts of a file rather than the whole file</h2>
<p>If you have a file with lots of changes made, you might not want to have all the changes logged under one single commit.</p>
<p>To split the single file into multiple commits you need to use Git&#39;s <code>patch</code> mode… </p>
<p><code>git add &lt;file&gt; -p</code></p>
<p>…Git will attempt to split a file into separate hunks (Git terminology for a chunk of code). You can then press <code>?</code> to see what options you have available, the most common being:</p>
<ul>
<li><code>y</code> - yes</li>
<li><code>n</code> - no</li>
<li><code>d</code> - no to all remaining hunks</li>
<li><code>s</code> - split current hunk into more hunks</li>
</ul>
<p>Sometimes you can&#39;t split a hunk into more hunks automatically, you have to do it manually. To do so you press <code>e</code> to edit and then use Vim to manually make changes.</p>
<p>So if you have a line removed that you want to keep as part of the commit then you&#39;ll remove the <code>-</code> so there is just a space instead, and if you have a line added that you want to not have included as part of the commit then you remove the entire line. BUT the most important part it also updating the line numbers at the top of the file so that the number of lines in the file match what you are looking to commit (otherwise the commit will fail). To make the edit to the hunk final (pre-commit) press <code>esc</code> then <code>:wq</code> and then you&#39;ll be able to commit the selected changes.</p>
<p><div id="29"></div></p>
<h2><a name="modifying-your-git-history-with-rebase-"class="anchor" href="#modifying-your-git-history-with-rebase-"><span class="header-link"></span></a>Modifying your Git history with <code>rebase</code></h2>
<p>To change multiple commits you must use the interactive mode of the <code>rebase</code> command and you must tell Git how many commits back you want to go (because it&#39;ll start from there and keep moving through the commits until it reaches the <code>HEAD</code>).</p>
<p>REMEMBER: when using <code>rebase</code> every commit in the range specified is changed whether you change the message or not. So don&#39;t use <code>rebase</code> on commits that have already been pushed to a remote server as other users might have those commits pulled down and your changing of the commits will cause havoc for those users in the near future.</p>
<p>To amend the last 3 commits we use: <code>git rebase -i HEAD~3</code> and follow the instructions.</p>
<p>The principle is if you want to merge two commits then you&#39;ll need to have a commit to merge into and then change <code>pick</code> to <code>squash</code> on the other commits that you want to have squashed into the previous commit.</p>
<p>You can also re-order commits and other things like change commits (add files, rename the message) and remove commits completely.</p>
]]></description><link>http://www.integralist.co.uk/posts/git-tips/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/git-tips/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 16 Dec 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Maintainable CSS with BEM]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 7mins</em></p>
<ul>
<li>Introduction</li>
<li>BEM: Block, Element, Modifier</li>
<li>Example</li>
<li>Why BEM over the others?</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>This is a super quick post to introduce you to a method of writing more maintainable CSS by using what&#39;s called &quot;<a href="http://bem.info">BEM</a>&quot;.</p>
<p>Update: <a href="http://twitter.com/necolas">@necolas</a> made a comment worth noting, that I&#39;m using a modified version of the BEM naming conventions (BEM is a total framework that goes beyond just naming of classes and writing maintainable CSS). So I thought it best to make note of that here so as to not cause any confusion.</p>
<h2><a name="bem-block-element-modifier"class="anchor" href="#bem-block-element-modifier"><span class="header-link"></span></a>BEM: Block, Element, Modifier</h2>
<p>BEM stands for &quot;Block, Element, Modifier&quot; and is a simple but effective way to group together different components/widgets (as shown by the following visual aid).</p>
<div class="delayed-image-load" data-src="/images/generated/BEM-1024.png" data-width="1024"></div>

<p>Within each defined &#39;Block&#39; you can have multiple &#39;elements&#39; that make up the object, and for each element (depending on where it appears within the block) you might need to &#39;modify&#39; the state of the element.</p>
<p>The principles are similar to other methods of structuring CSS (<a href="https://github.com/stubbornella/oocss/wiki">OOCSS</a>/<a href="http://smacss.com">SMACSS</a>) but they are greatly simplified in comparison without giving up any of the architectural benefits.</p>
<p>The best way to understand BEM is to see an example of how it&#39;s used (see next section). But if you want the full details of its history and some more detailed/visual break down of the concepts then please see the <a href="http://bem.info">BEM</a> website.</p>
<h2><a name="example"class="anchor" href="#example"><span class="header-link"></span></a>Example</h2>
<p>Below we have a money calculator widget. You enter an amount of money (e.g. £2.12p) and when you press on &#39;calculate&#39; it&#39;ll return to you a list of coins required to make up the amount specified.</p>
<p>The HTML is very simple...</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;section&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Sterling Calculator<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;process.php&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>Please enter an amount: (e.g. 92p, <span class="ni">&amp;pound;</span>2.12)<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;p&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;amount&quot;</span><span class="nt">&gt;</span> 
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Calculate&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</pre></div>
</code></pre>
<p>So lets add in our classes for styling this widget and lets go on to break down what we&#39;ve added and why...</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;widget&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;widget__header&quot;</span><span class="nt">&gt;</span>Sterling Calculator<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;widget__form&quot;</span> <span class="na">action=</span><span class="s">&quot;process.php&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>Please enter an amount: (e.g. 92p, <span class="ni">&amp;pound;</span>2.12)<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;p&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;amount&quot;</span> <span class="na">class=</span><span class="s">&quot;widget__input widget__input--amount&quot;</span><span class="nt">&gt;</span> 
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Calculate&quot;</span> <span class="na">class=</span><span class="s">&quot;widget__input widget__input--submit&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</pre></div>
</code></pre>
<p>First thing to notice is that we&#39;ve determined the top level <code>&lt;section&gt;</code> element to be our &#39;block&#39;. This is the top level containing element. We&#39;ve added a class of <code>widget</code> and this will be our namespace for this object/widget (whatever you prefer to call it).</p>
<p>From here on all elements that we added classes to within this &#39;block&#39; will be namespaced to the top level name of <code>widget</code>.</p>
<p>I wanted to style the <code>&lt;form&gt;</code> element so I added the class <code>widget__form</code>. The double underscores allow us to easily recognise a class as being part of the <code>widget</code> block. We see this used on the <code>&lt;input&gt;</code> elements as well: <code>widget__input</code>.</p>
<p>Here is a list of the elements styled…</p>
<ul>
<li><code>widget</code></li>
<li><code>widget__header</code></li>
<li><code>widget__form</code></li>
<li><code>widget__input</code></li>
</ul>
<p>Notice that there are two other classes used: <code>widget__input--amount</code> and <code>widget__input--submit</code>. These are our &#39;modifiers&#39;. They modify the state of our elements.</p>
<p>Let&#39;s look at where these have been used. I&#39;ve applied the same class of <code>widget__input</code> on both <code>&lt;input&gt;</code> elements (because they both have the same base structure/styling). But both elements do have slight differences in their appearance, hence the use of a &#39;modifier&#39; to apply the additional unique styles. </p>
<p>Modifiers are written with two hyphens(dashes) like so: <code>block__element--modifier</code>.</p>
<p>This means that our CSS code for this widget ends up looking like this…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.widget</span> <span class="p">{</span>
    <span class="k">background-color</span><span class="o">:</span> <span class="m">#FC3</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.widget__header</span> <span class="p">{</span>
    <span class="k">color</span><span class="o">:</span> <span class="m">#930</span><span class="p">;</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">3em</span><span class="p">;</span>
    <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
    <span class="k">text-shadow</span><span class="o">:</span> <span class="m">#FFF</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">2px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.widget__input</span> <span class="p">{</span>
    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
       <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
         <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
            <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>

    <span class="k">font-size</span><span class="o">:</span> <span class="m">0.9em</span><span class="p">;</span>
    <span class="k">line-height</span><span class="o">:</span> <span class="m">1</span><span class="o">.</span><span class="m">3</span><span class="p">;</span>
    <span class="k">padding</span><span class="o">:</span> <span class="m">0.4em</span> <span class="m">0.7em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.widget__input--amount</span> <span class="p">{</span>
    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#930</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.widget__input--submit</span> <span class="p">{</span>
    <span class="k">background-color</span><span class="o">:</span> <span class="m">#EEE</span><span class="p">;</span>
    <span class="k">border</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h2><a name="why-bem-over-the-others-"class="anchor" href="#why-bem-over-the-others-"><span class="header-link"></span></a>Why BEM over the others?</h2>
<p>I&#39;ve tried a lot of different ways of writing CSS over the years. It went something like this…</p>
<ul>
<li>No structure, everything in one file loaded on every page of a site.</li>
<li>Separate files to try and keep page specific content together, but still no real structure.</li>
<li>Standard <a href="https://github.com/stubbornella/oocss/wiki">OOCSS (Object-Oriented CSS)</a></li>
<li><a href="http://smacss.com">SMACSS (Scalable and Modular Architecture for CSS)</a></li>
</ul>
<p>…and now BEM.</p>
<p><strong>The reason I choose BEM over other methodologies comes down to this: it&#39;s less confusing than the other methods (i.e. SMACSS) but still provides us the good architecture we want (i.e. OOCSS) and with a recognisable terminology.</strong></p>
<p>For me OOCSS isn&#39;t strict enough. It let&#39;s developers go wild with how they name their objects. But I&#39;ve seen that get really messy on larger projects, or projects with more than one developer and because of the lack of strictness in naming conventions developers become confused on what classes are supposed to be doing.</p>
<p>With regards to SMACSS: it&#39;s almost too strict in the sense that I think it&#39;s <em>over structured</em>. When I first started using it I thought this was the solution I had been searching for but all that ended up happening was that I had so many fragmented areas of CSS that I didn&#39;t know where to go first. It was too over whelming.</p>
<p>This might not be the case for some people, but for me these are all instances of the old adage: &quot;<em>don&#39;t make me think</em>&quot;. If I have to think too hard about how something works, or where I need to find the code for something then (in my opinion) that methodology has failed.</p>
<p>BEM succeeds because it provides a good object oriented structure with a familiar terminology and is simple enough to not get in your way.</p>
<p>But like with any tool, it can be misused. In the end it comes down to the overall skill and understanding of the developer.</p>
<h3><a name="simplicity"class="anchor" href="#simplicity"><span class="header-link"></span></a>Simplicity</h3>
<p>As I said before, the reason I find BEM a better option is the simplicity. </p>
<p>Even down to the terminology used is simplified compared to other methodologies. For example, depending on who you talk to about structured CSS you may hear the words: </p>
<ul>
<li>objects</li>
<li>modules</li>
<li>widgets</li>
<li>components</li>
</ul>
<p>…notice the terminology is different but what they refer to are effectively the same thing. No wonder it can become confusing to some people.</p>
<p>BEM is different in that its terminology is based around the environment it works for: HTML and CSS. We all know when working in CSS what a &#39;block&#39; is, it&#39;s the fundamental building block (no pun intended) of how elements on the page are rendered, but that term can also be understood when used like so… </p>
<blockquote>
<p>I saw this block of code the other day, it was hideous.</p>
</blockquote>
<p>…you know within the context of that sentence the person speaking is referring to a chunk of code, a grouping of code.</p>
<p>The word &#39;Block&#39; is simple but a very focused term, and more importantly it is a very familiar term. </p>
<p>We also know when working in CSS that ultimately we&#39;re targeting &#39;elements&#39;. No other word better fits the description, because that is exactly what we&#39;re doing.</p>
<p>And lastly, the word &#39;modifier&#39; again is a simple but fully understood and familiar term used by developers… </p>
<blockquote>
<p>I want to modify this element, how should I do that?</p>
</blockquote>
<h3><a name="but-still-structured"class="anchor" href="#but-still-structured"><span class="header-link"></span></a>But still structured</h3>
<p>But with this simplified terminology/structure it gives us all the tools we need to write maintainable and easily understandable code. BEM easily scales with the size of a project.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>I know I&#39;ve said it before about SMACSS (&quot;<em>wow, I think this is it!</em>&quot;) but even when I first started using SMACSS I still had niggling feelings about &quot;<em>hmm, it&#39;s a little complicated getting this all in place, but it seems to work well</em>&quot;. With BEM I&#39;ve not had any of those concerns. The only initial concern I had was with the look of it. I didn&#39;t like the double underscores or the double dashes. But now I actually like them!</p>
<p>If you want to see more good usage of BEM then I&#39;ll refer you to a small CSS abstraction library called <a href="https://github.com/csswizardry/inuit.css">inuit.css</a> by <a href="http://csswizardry.com/">Harry Roberts</a> as well as <a href="https://github.com/Integralist/integralist.github.com">my own website&#39;s source code</a></p>
]]></description><link>http://www.integralist.co.uk/posts/maintainable-css-with-bem/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/maintainable-css-with-bem/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 09 Dec 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Backbone Validation]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 17mins</em></p>
<ul>
<li>Introduction</li>
<li>Dependencies</li>
<li>HTML set-up</li>
<li>JavaScript set-up</li>
<li>Validation Module</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>A while ago I had any issue with validating a form using the Backbone.Model&#39;s <code>validate</code> method and so I went to the official Backbone GitHub issues area to raise a query. The problem I had isn&#39;t necessarily important but the ultimate result I got from the discussion with the maintainers of Backbone was that validating a form using a Model wasn&#39;t really the way you should use a Model.</p>
<p>To me this didn&#39;t make a lot of sense because a form is just data and a Model holds data and so I would have thought using the built-in <code>validate</code> method of the Model would have been the best way to validate the form data. But apparently that&#39;s not considered a best practice using Backbone.</p>
<p>So I decided to create a validation module that would make validating a form (and displaying errors) a little bit easier, because lets face it, validating forms are tedious and boring.</p>
<p>You can download the <a href="https://github.com/Integralist/Backbone-Validation-View">full project code from GitHub</a></p>
<h2><a name="dependencies"class="anchor" href="#dependencies"><span class="header-link"></span></a>Dependencies</h2>
<ul>
<li>Backbone (obviously, so this includes the dependencies required by Backbone)</li>
<li><a href="http://twitter.github.com/hogan.js/">Hogan.js</a> (for loading the error messages)</li>
</ul>
<p>Now although I&#39;ve used Backbone/Hogan you don&#39;t have to. The code is straight forward enough to port over to use whatever you like. You could rewrite the code to not use a framework at all. The principles are very simple.</p>
<h2><a name="html-set-up"class="anchor" href="#html-set-up"><span class="header-link"></span></a>HTML set-up</h2>
<p>OK, so the HTML requires a bit of setting up. Nothing major, but we utilise specific classes and custom data attributes in the HTML to help us validate the form.</p>
<p>For example, we mark-up any mandatory fields with a class of <code>js-mandatory-field</code> - you&#39;ll notice I&#39;ve prefixed the class with &#39;js-&#39; so other developers know that this class has no styles associated with it. It&#39;s literally only used as a JavaScript hook.</p>
<p>We also use a custom data attribute <code>data-message</code> to store specific validation error messages. I prefer having custom messages because otherwise at some point you&#39;ll want to validate a field that doesn&#39;t conform to the known validation methods. So having a custom message for each field gives better feedback to the user.</p>
<p>So as an example here is a form with the mandatory class and the custom data attribute</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;card&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you enter a valid credit card number&quot;</span><span class="nt">&gt;</span>
</pre></div>
</code></pre>
<p>Our full form code looks like this…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://www.google.com/&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">id=</span><span class="s">&quot;js-form&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p&gt;</span>Name: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;fullname&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you enter your full name&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Date of Birth: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;dob&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;dd/mm/yyyy&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you enter a valid date format&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Age: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you enter a valid age&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Email: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you enter a valid email&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Mobile: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;mobile&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you enter a valid mobile number&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Password (8 alpha-numerical characters, at least either 1 number or 1 text character): <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you enter a password that matches the criteria&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>Credit Card: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;card&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you enter a valid credit card number&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;</span>To proceed please tick this box: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;proceed&quot;</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">class=</span><span class="s">&quot;js-mandatory-field&quot;</span> <span class="na">data-message=</span><span class="s">&quot;Please ensure you tick the box to proceed&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;p&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit Form&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre></div>
</code></pre>
<h2><a name="javascript-set-up"class="anchor" href="#javascript-set-up"><span class="header-link"></span></a>JavaScript set-up</h2>
<p>Next let&#39;s look at our JavaScript set-up: we&#39;re utilising AMD to help keep our scripts modular and I&#39;m using the <a href="https://github.com/cujojs/curl">Curl.js AMD loader</a>.</p>
<p>So in our HTML file we&#39;ll load up the JavaScript files required…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;Assets/Scripts/curl.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;Assets/Scripts/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre></div>
</code></pre>
<p>Inside our app.js file we set-up a configuration object which handles the paths to the different dependencies we&#39;ll be using. We then load the &#39;Validation&#39; module (which is a Backbone.View)…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;./Assets/Scripts/&#39;</span><span class="p">,</span>
    <span class="nx">pluginPath</span><span class="o">:</span> <span class="s1">&#39;plugins&#39;</span><span class="p">,</span>
    <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
        <span class="s1">&#39;jquery&#39;</span><span class="o">:</span> <span class="s1">&#39;Libraries/jquery&#39;</span><span class="p">,</span>
        <span class="s1">&#39;lodash&#39;</span><span class="o">:</span> <span class="s1">&#39;Libraries/lodash&#39;</span><span class="p">,</span>
        <span class="s1">&#39;backbone&#39;</span><span class="o">:</span> <span class="s1">&#39;Libraries/backbone&#39;</span>
    <span class="p">},</span>
    <span class="nx">preloads</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jquery&#39;</span><span class="p">,</span> <span class="s1">&#39;lodash&#39;</span><span class="p">]</span>
<span class="p">};</span>

<span class="cm">/*</span>
<span class="cm">    The `exports` suffix ensures we receive a reference to the global Backbone object</span>
<span class="cm">    It also provides a way to check that the script loaded correctly.</span>
<span class="cm">    Without the `exports` suffix, there&#39;s no way to tell if IE or Opera 404&#39;ed.</span>
<span class="cm"> */</span>
<span class="nx">curl</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jquery&#39;</span><span class="p">,</span> <span class="s1">&#39;lodash&#39;</span><span class="p">,</span> <span class="s1">&#39;js!backbone!exports=Backbone&#39;</span><span class="p">],</span> <span class="nx">init</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">init</span> <span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">curl</span><span class="p">(</span><span class="s1">&#39;Views/Validation&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">error</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>Now we have our JavaScript set-up lets move onto the Backbone.View that will handle the validation of our form.</p>
<h2><a name="validation-module"class="anchor" href="#validation-module"><span class="header-link"></span></a>Validation Module</h2>
<p>We will go through each of the methods within this module so we can better understand what they&#39;re doing. There are four main methods and the rest are different validation methods.</p>
<p>The four main methods are:</p>
<ul>
<li><code>get_template</code></li>
<li><code>validate</code></li>
<li><code>process_errors</code></li>
<li><code>display_errors</code></li>
</ul>
<p>The validation methods are:</p>
<ul>
<li><code>validate_text</code></li>
<li><code>validate_number</code></li>
<li><code>validate_date</code></li>
<li><code>validate_email</code></li>
<li><code>validate_mobile</code></li>
<li><code>validate_password</code></li>
<li><code>validate_cardnumber</code></li>
<li><code>validate_checkbox</code></li>
</ul>
<p>So within the initialisation stage of the View we do a few things…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="c1">// Self explanatory: stores all mandatory fields</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">mandatory_fields</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.js-mandatory-field&#39;</span><span class="p">);</span>

    <span class="c1">// This holds the template file we&#39;ll compile with data pulled from server</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="c1">// This holds the actual rendered template content</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">template_content</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="c1">// We&#39;ll go ahead and grab the error message template file (no point waiting until the last minute and making the user wait).</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">get_template</span><span class="p">();</span>
<span class="p">}}</span>
</pre></div>
</code></pre>
<ul>
<li>Store a reference to all mandatory fields</li>
<li>Create a <code>template</code> property</li>
<li>Create a <code>template_content</code> property</li>
<li>Call the <code>get_template</code> method</li>
</ul>
<p>The reason we call the <code>get_template</code> method straight away (before the form has been submitted) is because it&#39;s a safe assumption that on a form, the user is likely to make an error in the data they submit so why not just go ahead and grab the template we&#39;ll need to render and display errors with.</p>
<p>The <code>get_template</code> method is called immediately but later on we also check to see if we need to try calling it again (e.g. when the user actually submits the form we check to see if <code>this.template</code> holds any value and if it does then we use it, otherwise we call <code>get_template</code> again to grab the data) so this is why we check within that method for a <code>callback</code> to be provided (when the template is loaded we want to continue on and process the errors found)</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">get_template</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;Assets/Templates/FormErrors.txt&#39;</span><span class="p">,</span>
        <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
        <span class="nx">success</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tmp</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">hogan</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">tmp</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">callback</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">},</span> <span class="k">this</span><span class="p">)</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>We then listen out for the form submission event to happen and call the <code>validate</code> method to handle the event…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
    <span class="s1">&#39;submit&#39;</span><span class="o">:</span> <span class="s1">&#39;validate&#39;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>The <code>validate</code> method creates an Array to hold any errors we encounter. The way we determine if there are any errors is to loop through all the mandatory fields and to check the name attribute value to see if we can find a match to known values. If we can&#39;t find a match then we just validate the field to make sure it has a value. If we do find a match (e.g. if the name attribute is &quot;email&quot;) then we know which validation method to pass the field on to validate against.</p>
<p>If the validation method returns <code>true</code> then that means an issue was found and so the field failed the validation and we store the specific error message for that field in the <code>errors</code> Array.</p>
<p>After we&#39;ve been through all the mandatory fields we check to see if the <code>errors</code> Array has any items, if it does then we know we need to process some errors and call <code>this.process_errors</code> and pass the <code>errors</code> Array through to that method.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">errors</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">var</span> <span class="nx">method</span><span class="p">;</span>

    <span class="c1">// Loop through all the fields checking for validation errors</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">mandatory_fields</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// First we check what the current field is and validate it against a specific method</span>
        <span class="k">switch</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="s1">&#39;dob&#39;</span><span class="o">:</span>
                <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_date&#39;</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span>
                <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_number&#39;</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;email&#39;</span><span class="o">:</span>
                <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_email&#39;</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;mobile&#39;</span><span class="o">:</span>
                <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_mobile&#39;</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;password&#39;</span><span class="o">:</span>
                <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_password&#39;</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;card&#39;</span><span class="o">:</span>
                <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_cardnumber&#39;</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s1">&#39;proceed&#39;</span><span class="o">:</span>
                <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_checkbox&#39;</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_text&#39;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">method</span><span class="p">](</span><span class="nx">item</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// Store just the messages and not the element itself (we only need the list of messages)</span>
            <span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-message&#39;</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">},</span> <span class="k">this</span><span class="p">));</span>

    <span class="c1">// If there are any errors then display warning messsage to the user</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">process_errors</span><span class="p">(</span><span class="nx">errors</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>The first thing the <code>process_errors</code> method does is it makes sure we are only dealing with unique error messages. For example if we have a set of &#39;sort code&#39; fields (which are typically three separate fields) they will all have the same error message but we don&#39;t want that error message displayed three times so the <code>_.unique</code> method ensures our errors are unique.</p>
<p>After that we need to make sure that Hogan.js has the error messages in a format it can handle so we use the <code>map</code> method to convert the data to the relevant format required.</p>
<p>Next we need to convert the jQuery collection into an actual Array for Hogan.js to be able to loop through it.</p>
<p>Finally we check if the template file has been loaded already or not. If it hasn&#39;t then we load it via ajax and then call the <code>display_errors</code> method.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">process_errors</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/*</span>
<span class="cm">        Clean the errors list so we only have unique data.</span>
<span class="cm">        This happens for things like the postcode validation (no point showing the postcode field error message twice)</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">clean_list</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">errors</span><span class="p">);</span>

    <span class="c1">// The list needs to be converted into an Object for Hogan.js to compile the data into its template</span>
    <span class="kd">var</span> <span class="nx">converted_list</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">clean_list</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="nx">error</span><span class="o">:</span> <span class="nx">item</span>
        <span class="p">};</span>
    <span class="p">});</span>

    <span class="c1">// Spent far longer on this than I wanted to, but this is it: jQuery collection is not an Array and so needs to be converted to an Array for Hogan.js to compile it</span>
    <span class="kd">var</span> <span class="nx">final_list</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">makeArray</span><span class="p">(</span><span class="nx">converted_list</span><span class="p">);</span>

    <span class="c1">// If the template file has been stored already then we&#39;ll just proceed to render the content</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">display_errors</span><span class="p">({</span> <span class="nx">errors</span><span class="o">:</span> <span class="nx">final_list</span> <span class="p">});</span>
    <span class="p">}</span> 
    <span class="c1">// Otherwise grab the template file and then render the content</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// Have to rebind the `this` value as otherwise it would be equal to the global object (Window)</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">get_template</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">display_errors</span><span class="p">({</span> <span class="nx">errors</span><span class="o">:</span> <span class="nx">final_list</span> <span class="p">});</span>
        <span class="p">},</span> <span class="k">this</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>The <code>display_errors</code> method takes in the object of errors we&#39;ve created and tries to compile it into the template file using Hogan.js</p>
<p>But the first thing the method does is check if any errors already exist in the page. If it finds an errors element then it removes it.</p>
<p>We then compile the data into the template file and insert it into the page (thus displaying the errors to the user).</p>
<p>We then update the URL hash to include the id value of the form errors element we&#39;ve just inserted into the page. This is because on a long form the errors are displayed at the top of the form, but the user may well not see it because the page only shows the bottom half the form, so we redirect the user back up to the top of the form to see the errors.</p>
<p>I know some people will disagree with doing that and would prefer to display an error next to each field but I find that makes the design of the page a lot more complicated, especially when dealing with multiple screen dimensions. I personally prefer to have a single place to display all errors.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">display_errors</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// First remove any errors that might already be on the page</span>
    <span class="kd">var</span> <span class="nx">existing_list</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#js-formerrors&#39;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">existing_list</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">existing_list</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Render the data into the template</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">template_content</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

    <span class="c1">// Insert the error messages into the page</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template_content</span><span class="p">);</span>

    <span class="cm">/*</span>
<span class="cm">        Focus page to the error message element.</span>
<span class="cm">        Had issue with WebKit where it wouldn&#39;t reposition window to the named anchor unless we reset the hash back to nothing and then set it again to the named anchor</span>
<span class="cm">     */</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="s1">&#39;js-formerrors&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>The full module code is as follows...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../Utils/Templating/hogan&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">hogan</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">Validation</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="c1">// Self explanatory: stores all mandatory fields</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">mandatory_fields</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.js-mandatory-field&#39;</span><span class="p">);</span>

            <span class="c1">// This holds the template file we&#39;ll compile with data pulled from server</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

            <span class="c1">// This holds the actual rendered template content</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">template_content</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

            <span class="c1">// We&#39;ll go ahead and grab the error message template file (no point waiting until the last minute and making the user wait).</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">get_template</span><span class="p">();</span>
        <span class="p">},</span>

        <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#js-form&#39;</span><span class="p">),</span>

        <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
            <span class="s1">&#39;submit&#39;</span><span class="o">:</span> <span class="s1">&#39;validate&#39;</span>
        <span class="p">},</span>

        <span class="nx">get_template</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;Assets/Templates/FormErrors.txt&#39;</span><span class="p">,</span>
                <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span>
                <span class="nx">success</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tmp</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">hogan</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">tmp</span><span class="p">);</span>

                    <span class="k">if</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">callback</span><span class="p">();</span>
                    <span class="p">}</span>
                <span class="p">},</span> <span class="k">this</span><span class="p">)</span>
            <span class="p">});</span>
        <span class="p">},</span>

        <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="kd">var</span> <span class="nx">errors</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="kd">var</span> <span class="nx">method</span><span class="p">;</span>

            <span class="c1">// Loop through all the fields checking for validation errors</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">mandatory_fields</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// First we check what the current field is and validate it against a specific method</span>
                <span class="k">switch</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">case</span> <span class="s1">&#39;dob&#39;</span><span class="o">:</span>
                        <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_date&#39;</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span>
                        <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_number&#39;</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="s1">&#39;email&#39;</span><span class="o">:</span>
                        <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_email&#39;</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="s1">&#39;mobile&#39;</span><span class="o">:</span>
                        <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_mobile&#39;</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="s1">&#39;password&#39;</span><span class="o">:</span>
                        <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_password&#39;</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="s1">&#39;card&#39;</span><span class="o">:</span>
                        <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_cardnumber&#39;</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="s1">&#39;proceed&#39;</span><span class="o">:</span>
                        <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_checkbox&#39;</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">default</span><span class="o">:</span>
                        <span class="nx">method</span> <span class="o">=</span> <span class="s1">&#39;validate_text&#39;</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">method</span><span class="p">](</span><span class="nx">item</span><span class="p">))</span> <span class="p">{</span>
                    <span class="c1">// Store just the messages and not the element itself (we only need the list of messages)</span>
                    <span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-message&#39;</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">},</span> <span class="k">this</span><span class="p">));</span>

            <span class="c1">// If there are any errors then display warning messsage to the user</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">process_errors</span><span class="p">(</span><span class="nx">errors</span><span class="p">);</span>
                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">validate_text</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/*</span>
<span class="cm">                If the length is zero (meaning the field is empty) then zero will coerce to false </span>
<span class="cm">                so we return the opposite of that using the ! operator (so the first part of the following condition is met) </span>
<span class="cm">                and if the length is greater than zero then the regex checks to see if the content isn&#39;t just empty spaces.</span>

<span class="cm">                If there was an error then we return true, if there wasn&#39;t an error then undefined will be returned (which coerces to false)</span>
<span class="cm">             */</span>
            <span class="k">if</span> <span class="p">(</span><span class="sr">/^\s+$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">validate_number</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="sr">/^\D+/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">validate_date</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/*</span>
<span class="cm">                The regex allows either double figure formats or singular...</span>
<span class="cm">                00/00/00</span>
<span class="cm">                0/0/0</span>
<span class="cm">             */</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/^\d{1,2}\/\d{1,2}\/\d{1,2}$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">validate_email</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;@&quot;</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="o">!</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">validate_mobile</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/*</span>
<span class="cm">                The regex allows the following formats:</span>
<span class="cm">                    +44 07000000000</span>
<span class="cm">                    07000000000</span>
<span class="cm">                    +4407000000000</span>

<span class="cm">                So there is an optional +000 country code at the start (wrapped in a non-capturing group)</span>
<span class="cm">                We then allow for an optional space after the optional country code</span>
<span class="cm">                Finally we allow for 11 digits (no spaces - but we also strip out any spaces found before running the regex so the &#39;no spaces&#39; thing doesn&#39;t really matter)</span>
<span class="cm">             */</span>
            <span class="kd">var</span> <span class="nx">strip_spaces</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// some people seem to add odd spacing when enterin numbers?</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/^(?:\+\d{1,3})?\s?\d{11}$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">strip_spaces</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">validate_password</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/*</span>
<span class="cm">                The regex makes sure there is at least 8 alpha-numerical characters</span>
<span class="cm">                And that at least one of those values is a number</span>
<span class="cm">                And that at least one of those values is a text character</span>
<span class="cm">                We use a positive lookahead (which checks to see if a sub pattern matches a specific position)</span>
<span class="cm">                The lookahead checks for any character (zero or more times) is followed by a digit (e.g. making sure there is at least one digit)</span>
<span class="cm">                The lookahead then checks for any character (zero or more times) is followed by a text character (e.g. making sure there is at least one text character)</span>
<span class="cm">                Finally after the two lookaheads we have the standard regex which makes sure there is at least 8 alpha-numerical characters</span>
<span class="cm">             */</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/^(?=.*\d)(?=.*[a-z])\w{8,}/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">validate_cardnumber</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">function</span> <span class="nx">luhn</span> <span class="p">(</span><span class="nx">cardnumber</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// Build an array with the digits in the card number</span>
                <span class="kd">var</span> <span class="nx">getdigits</span> <span class="o">=</span> <span class="sr">/\d/g</span><span class="p">;</span>
                <span class="kd">var</span> <span class="nx">digits</span> <span class="o">=</span> <span class="p">[];</span>
                <span class="kd">var</span> <span class="nx">match</span><span class="p">;</span>

                <span class="k">while</span> <span class="p">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">getdigits</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">cardnumber</span><span class="p">))</span> <span class="p">{</span>
                    <span class="nx">digits</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">10</span><span class="p">));</span>
                <span class="p">}</span>

                <span class="c1">// Run the Luhn algorithm on the array</span>
                <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="kd">var</span> <span class="nx">alt</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

                <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">digits</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// On every other number in the card sequence...</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">alt</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">digits</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// multiple the number by itself</span>

                        <span class="c1">// If the number is now over 9 then we&#39;ll minus 9 from the number</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">digits</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">digits</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">9</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>

                    <span class="c1">// Add this digit onto the current total sum</span>
                    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">digits</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>

                    <span class="c1">// Alternate</span>
                    <span class="nx">alt</span> <span class="o">=</span> <span class="o">!</span><span class="nx">alt</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="cm">/*</span>
<span class="cm">                    The individual card numbers (after the above algorithm is applied and then when added together) </span>
<span class="cm">                    should be possible to divide by 10 with zero left over</span>
<span class="cm">                 */</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">sum</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="c1">// The following regex was actually borrowed from The Regular Expression Cookbook (co-written by the regex legend @stevenlevithan)</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/g</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// If the card number appears to be valid we then run the Luhn test</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">luhn</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">validate_checkbox</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">field</span><span class="p">.</span><span class="nx">checked</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">process_errors</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/*</span>
<span class="cm">                Clean the errors list so we only have unique data.</span>
<span class="cm">                This happens for things like the postcode validation (no point showing the postcode field error message twice)</span>
<span class="cm">             */</span>
            <span class="kd">var</span> <span class="nx">clean_list</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">errors</span><span class="p">);</span>

            <span class="c1">// The list needs to be converted into an Object for Hogan.js to compile the data into its template</span>
            <span class="kd">var</span> <span class="nx">converted_list</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">clean_list</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="nx">error</span><span class="o">:</span> <span class="nx">item</span>
                <span class="p">};</span>
            <span class="p">});</span>

            <span class="c1">// Spent far longer on this than I wanted to, but this is it: jQuery collection is not an Array and so needs to be converted to an Array for Hogan.js to compile it</span>
            <span class="kd">var</span> <span class="nx">final_list</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">makeArray</span><span class="p">(</span><span class="nx">converted_list</span><span class="p">);</span>

            <span class="c1">// If the template file has been stored already then we&#39;ll just proceed to render the content</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">display_errors</span><span class="p">({</span> <span class="nx">errors</span><span class="o">:</span> <span class="nx">final_list</span> <span class="p">});</span>
            <span class="p">}</span> 
            <span class="c1">// Otherwise grab the template file and then render the content</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// Have to rebind the `this` value as otherwise it would be equal to the global object (Window)</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">get_template</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">display_errors</span><span class="p">({</span> <span class="nx">errors</span><span class="o">:</span> <span class="nx">final_list</span> <span class="p">});</span>
                <span class="p">},</span> <span class="k">this</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">display_errors</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// First remove any errors that might already be on the page</span>
            <span class="kd">var</span> <span class="nx">existing_list</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#js-formerrors&#39;</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">existing_list</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">existing_list</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Render the data into the template</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">template_content</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

            <span class="c1">// Insert the error messages into the page</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template_content</span><span class="p">);</span>

            <span class="cm">/*</span>
<span class="cm">                Focus page to the error message element.</span>
<span class="cm">                Had issue with WebKit where it wouldn&#39;t reposition window to the named anchor unless we reset the hash back to nothing and then set it again to the named anchor</span>
<span class="cm">             */</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="s1">&#39;js-formerrors&#39;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">new</span> <span class="nx">Validation</span><span class="p">();</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>OK, so that&#39;s our full validation method! It looks big but when you break it down it&#39;s not actually that complicated.</p>
<p>It works for me and has made my life a hell of a lot easier whenever I&#39;ve needed to validate a form. Hopefully it helps someone else, or inspires some one to take the principles shown here and to build their own variation so their life is a little easier when dealing with forms.</p>
]]></description><link>http://www.integralist.co.uk/posts/backbone-validation/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/backbone-validation/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Mon, 26 Nov 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[JavaScript 101]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 23mins</em></p>
<ul>
<li>Introduction</li>
<li>What is JavaScript</li>
<li>Terminology</li>
<li>Global Object</li>
<li>Variables</li>
<li>Types</li>
<li>Objects</li>
<li>Arrays</li>
<li>Conditional Statements</li>
<li>Coercion</li>
<li>Functions</li>
<li>Code Reuse (inheritance)</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>I&#39;ve written this <em>very</em> brief guide to JavaScript just as an aid for people new to the language and who need a basic starting point to see what the syntax looks like and to get a feeling for some of its features.</p>
<p>This article&#39;s main purpose is to give readers new to the language a glimpse of the JavaScript environment and to hopefully spur them onto further reading/learning. </p>
<h2><a name="what-is-javascript"class="anchor" href="#what-is-javascript"><span class="header-link"></span></a>What is JavaScript</h2>
<p>JavaScript is a <em>scripting language</em> - this means it is not <em>compiled</em> (like traditional software languages like C or C++) but is executed &#39;line by line&#39; via its host environment at run time (the host environment can be: Web Browser, Server, Command Line, Desktop).</p>
<h2><a name="terminology"class="anchor" href="#terminology"><span class="header-link"></span></a>Terminology</h2>
<table>
<thead>
<tr>
<th>Term</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>expression</td>
<td>An expression is a command that the JavaScript engine can <em>evaluate</em> to produce a value</td>
</tr>
<tr>
<td>statement</td>
<td>A statement is a command that can be executed (statements are terminated with a semicolon)</td>
</tr>
<tr>
<td>identifier</td>
<td>A name (e.g. variable name, function name, labels for loops).</td>
</tr>
<tr>
<td>function declaration</td>
<td><code>function myFunction(){ /* code */ }</code></td>
</tr>
<tr>
<td>function expression</td>
<td><code>var myFunction = function(){ /* code */ };</code></td>
</tr>
<tr>
<td>primitive</td>
<td><code>undefined</code>, <code>null</code>, <code>boolean</code>, <code>string</code> and <code>number</code></td>
</tr>
<tr>
<td>operator</td>
<td><code>+</code>, <code>-</code>, <code>!</code>, <code>++</code>, <code>===</code>, <code>&amp;&amp;</code>, <code>typeof</code></td>
</tr>
</tbody>
</table>
<h3><a name="expressions"class="anchor" href="#expressions"><span class="header-link"></span></a>Expressions</h3>
<p>An example of an &#39;expression&#39; would be <code>1+1</code>. </p>
<p>Looks straight forward enough, and it should be. As mentioned above, an expression is simply <em>something</em> that can be interpreted as a value. So <code>1+1</code> (when evaluated by the JavaScript engine) results in an number with a value of two. </p>
<p>Now the expression <code>1+1</code> is pretty useless in a JavaScript program because we&#39;re not doing anything with it. For us to more effectively use this expression we ideally want to store it somewhere so we can reference it later and that&#39;s where &#39;variables&#39; come in (see later on this article).</p>
<h3><a name="statements"class="anchor" href="#statements"><span class="header-link"></span></a>Statements</h3>
<p>Examples of JavaScript &#39;statements&#39;: </p>
<ul>
<li><code>if (condition) { /* code */ }</code></li>
<li><code>while (condition) { /* code */ }</code></li>
<li><code>return</code>, <code>break</code>, <code>throw</code> are single command statements</li>
</ul>
<h2><a name="global-object"class="anchor" href="#global-object"><span class="header-link"></span></a>Global Object</h2>
<p>When the JavaScript interpreter starts up it creates a Global object and any properties/methods added to the Global object are available to the entire JavaScript program.</p>
<p>The global object is a regular object (as per the Object section seen later in this article).</p>
<p>The global object is different depending on the context. In a web browser environment the global object is said to be the <code>window</code> object. But this isn&#39;t completely accurate. The global object happens to have a <code>window</code> property which is set back to the global object itself! A little confusing I know :-) If you open a browser console (e.g. Firefox&#39;s Firebug JavaScript Console, or Safari/Google Chrome&#39;s Console Tool) and enter the command <code>window</code> you&#39;ll see all the properties/methods available on that object - things like <code>window.location</code> will be one option that is listed (this references the location bar API of the web browser).</p>
<p>One quote you&#39;ll hear a lot in JavaScript is:</p>
<blockquote>
<p>Don&#39;t pollute the global environment</p>
</blockquote>
<p>…and what this means is try to avoid creating global properties and methods. The less &#39;globals&#39; you create then the less likely your code will conflict with another piece of code written by someone else that may be included in the same page.</p>
<p>To avoid declaring global properties/methods there are certain &#39;patterns&#39; that have been designed to work around this issue, such as the IIFE pattern…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/*</span>
<span class="cm"> * this pattern is referred to as an IIFE (immediately invoked function expression)</span>
<span class="cm"> * the function is immediately executed and all code within it is scoped to the function</span>
<span class="cm"> * when executed we pass through &#39;this&#39; which refers to the global object</span>
<span class="cm"> * we accept &#39;this&#39; into the function as an argument called &#39;global&#39;</span>
<span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// private data (private as in: it can&#39;t be accessed from other code outside this function)</span>
    <span class="c1">// note: don&#39;t EVER name your functions like this!</span>
    <span class="kd">function</span> <span class="nx">will_be_made_public_but_cant_be_accessed_directly</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Private&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="c1">// public API (private code we&#39;ve chosen to make public)</span>
        <span class="nx">do_something</span><span class="o">:</span> <span class="nx">will_be_made_public_but_cant_be_accessed_directly</span>
    <span class="p">};</span>

<span class="p">}(</span><span class="k">this</span><span class="p">));</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">will_be_made_public_but_cant_be_accessed_directly</span><span class="p">()</span> <span class="c1">// TypeError: Object #&lt;Object&gt; has no method &#39;will_be_made_public_but_cant_be_accessed_directly&#39;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">do_something</span><span class="p">();</span> <span class="c1">// =&gt; &#39;Private&#39;</span>
</pre></div>
</code></pre>
<p>Another pattern is to use AMD (Asynchronous Module Definition) which is a module based pattern (see: <a href="https://github.com/Integralist/Blog-Posts/blob/master/Beginners-guide-to-AMD-and-RequireJS.md">Beginners guide to AMD and RequireJS</a>)</p>
<h2><a name="variables"class="anchor" href="#variables"><span class="header-link"></span></a>Variables</h2>
<p>Variables hold values/data. </p>
<p>You declare a variable like so: <code>var my_var = 123;</code> - in this example we&#39;ve declared a variable and assigned the value <code>123</code> to it.</p>
<p>You must always declare a variable. An undeclared variable looks like this: <code>my_var = 123;</code> - notice the lack of the <code>var</code> keyword. </p>
<p>Undeclared variables are a bad practice because they cause confusion as to whether the variable should be &#39;global&#39; or not.</p>
<p>Here is a break down of the different variable scenarios:</p>
<ul>
<li>Variable is declared within a function:<br>variable becomes scoped to that function (i.e. it isn&#39;t accessible outside of that function). </li>
<li>Variable is declared at the top level of the script file (e.g. not inside of a function):<br>variable becomes a global variable (i.e. is available any where within the JavaScript program).</li>
<li>Variable is undeclared (e.g. doesn&#39;t matter where in the program the undeclared variable was created):<br>variable becomes a global variable (i.e. is available any where within the JavaScript program).</li>
</ul>
<p>As you can see, missing a <code>var</code> declaration will mean the JavaScript engine will make that undeclared variable a &#39;global&#39; variable (e.g. it is assigned to the Global object).</p>
<p>To see why this is a problem first imagine you have a web page you&#39;re working on and in which you have included a 3rd party JavaScript file (i.e. a script written by another developer). Now imagine the content of that 3rd party script is as follows:</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// 3rd party script written by another developer...</span>
<span class="kd">var</span> <span class="nx">my_name</span> <span class="o">=</span> <span class="s1">&#39;Mark&#39;</span><span class="p">;</span>
</pre></div>
</code></pre>
<p>…in this instance, the 3rd party script hasn&#39;t wrapped the line <code>var my_name = &#39;Mark&#39;;</code> inside of an IIFE (see above pattern) so the variable <code>my_name</code> will be created as global property (e.g. it is available any where within the JavaScript program as well as explicitly via <code>window.my_name</code>).</p>
<p>Now you don&#39;t want to overwrite the variable <code>my_name</code> because the 3rd party script that defined it is relying on it being a String with a value of <code>Mark</code> - if you change the value then it could cause the 3rd party code to break.</p>
<p>So now imagine you&#39;re going to add your own code to the page. You write the following…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">do_something</span><span class="p">(){</span>
    <span class="nx">my_name</span> <span class="o">=</span> <span class="s1">&#39;Bob&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…this may cause unintended side effects on the 3rd party code. Why? Because you coincidentally defined a variable by the same name of <code>my_name</code> and although you likely intended it to be scoped to the function <code>do_something</code> you&#39;ve accidentally forgotten the <code>var</code> keyword and so your variable is undeclared, so your variable has been assigned to the Global object, thus overwriting the <code>my_name</code> variable that is already available on the Global object (set by the 3rd party code).</p>
<p>To fix this you would simply make sure you properly declared your variable like so…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">do_something</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">my_name</span> <span class="o">=</span> <span class="s1">&#39;Bob&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>So now, even though the variable name is the same, the variable is &#39;scoped&#39; to the <code>do_something</code> function.</p>
<p>In today&#39;s world you&#39;ll be very hard pushed to find a library that sets anything more than one global variable - but it&#39;s an issue to be aware of in case you inherit a code base from a less educated developer.</p>
<p>Global properties aren&#39;t completely avoidable. A library will generally set one global which will act as a &#39;namespace&#39; for their entire app. For example, jQuery sets two globals <code>jQuery</code> and <code>$</code> and all their methods are available through those two globals so unless you&#39;re trying to use <code>jQuery</code> or <code>$</code> as your own namespace then you shouldn&#39;t notice any conflicts. </p>
<p>Most companies name their global namespace after their company: <code>var mycompany_app = /* code */;</code></p>
<h2><a name="types"class="anchor" href="#types"><span class="header-link"></span></a>Types</h2>
<p>JavaScript types are split into two groups: <code>primitive</code> types and <code>reference</code> types. </p>
<p><code>Numbers</code>, <code>Booleans</code>, <code>Strings</code>, <code>Null</code> and <code>Undefined</code> types are primitive. </p>
<p><code>Objects</code>, <code>Arrays</code>, and <code>Functions</code> are reference types. </p>
<p>It&#39;s important to know the different types because at some point in your JavaScript code you&#39;ll want to pass around values and objects and you might notice some issues with doing so. For example, you&#39;ll notice that JavaScript passes <code>Objects</code>/<code>Arrays</code>/<code>Functions</code> by reference, and passes primitives such as <code>Booleans</code>/<code>Strings</code>/<code>Numbers</code>/<code>Null</code>/<code>Undefined</code> by value.</p>
<p>What this means is if you have an Array and want to copy it so you can make changes to the copy (e.g. you want to leave the original as it is) then you might think to do something like this…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">my_arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">new_arr</span> <span class="o">=</span> <span class="nx">my_arr</span><span class="p">;</span>

<span class="nx">new_arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>…you might think that <code>new_arr</code> will be <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</code> and <code>my_arr</code> would still be equal to <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code> but you&#39;d be wrong because Arrays are passed by &#39;reference&#39; and so your change: <code>new_arr.push(&#39;d&#39;);</code> is effectively doing this: <code>my_arr.push(&#39;d&#39;);</code>, hence <code>my_arr</code> now has the value of <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</code> and so does <code>new_arr</code> because it really is just referencing (i.e. pointing to) <code>my_arr</code>.</p>
<p>So be careful.</p>
<h2><a name="objects"class="anchor" href="#objects"><span class="header-link"></span></a>Objects</h2>
<p>To create a new <code>Object</code> use the syntax: <code>{}</code></p>
<p>For example:</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Mark&#39;</span><span class="p">,</span>
    <span class="nx">location</span><span class="o">:</span> <span class="s1">&#39;London, England&#39;</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>A variable added to an Object is known as a &#39;property&#39;.<br>A function added to an Object is known as a &#39;method&#39;  </p>
<p>…this naming convention originates from traditional Object-Oriented languages.</p>
<p>So for example:</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="cm">/* Property */</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Mark&#39;</span><span class="p">,</span>
    <span class="cm">/* Property */</span>
        <span class="nx">location</span><span class="o">:</span> <span class="s1">&#39;London, England&#39;</span><span class="p">,</span>
    <span class="cm">/* Method */</span>
        <span class="nx">get_details</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is from &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span> <span class="c1">// =&gt; &quot;Mark is from London, England&quot;</span>
        <span class="p">}</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<h3><a name="-nearly-everything-in-javascript-is-an-object"class="anchor" href="#-nearly-everything-in-javascript-is-an-object"><span class="header-link"></span></a>(Nearly)Everything in JavaScript is an Object</h3>
<p>One thing to be clear on is that nearly everything in JavaScript is an object (e.g. Functions, Arrays, Numbers, Strings etc). They all inherit their properties/attributes from the top level Object, and this is made possible in JavaScript via what&#39;s called the &#39;prototype chain&#39;. </p>
<p>We won&#39;t go into the &#39;prototype&#39; too deeply now but the following section will touch on how it works briefly.</p>
<h3><a name="prototype"class="anchor" href="#prototype"><span class="header-link"></span></a>Prototype</h3>
<p>Every Object you create in JavaScript has a hidden object tied to it. This hidden object is called the &#39;prototype&#39; for that object, and what this means is that your object you&#39;ve created will inherit properties from the prototype.</p>
<p>All &#39;objects&#39; that you create (e.g. <code>var obj = {};</code>) have the same prototype object they point to/reference - which is the top level <code>Object</code> in JavaScript. We call this <code>Object.prototype</code>, and this top level <code>Object</code> itself has no prototype (it&#39;s the only object that has no prototype because nothing precedes it).</p>
<p>All built-in Constructors (e.g. <code>Array.prototype</code>, <code>Date.prototype</code>) inherit from the <code>Object.prototype</code> and this linked set of objects is known as the &#39;prototype chain&#39; and is how &#39;inheritance&#39; works (see below for a short mention of inheritance and other forms of code reuse).</p>
<h3><a name="accessing-properties-methods"class="anchor" href="#accessing-properties-methods"><span class="header-link"></span></a>Accessing properties/methods</h3>
<p>To access properties/methods you can use either the dot notation or the bracket notation. The difference is in whether the property/method name is known at the type of execution or not.</p>
<p>Using the previous example code, if your program was written by you then to access the &#39;name&#39; property you would simply use: <code>obj.name</code> - but if your application accepted input from the user (where by you asked them what property/method they wanted to access) you obviously don&#39;t know before hand what the user is going to choose. In this instance you would use the bracket notation: </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">user_input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;my_form_input&#39;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">user_input</span><span class="p">]);</span>
</pre></div>
</code></pre>
<p>The other time you&#39;ll need to use bracket notation is if you want to access a property that has special characters:</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="s1">&#39;my property&#39;</span><span class="o">:</span> <span class="mi">123</span> <span class="c1">// YOU SHOULD NEVER NEED TO CREATE A PROPERTY NAME LIKE THIS</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;my property&#39;</span><span class="p">]);</span>
</pre></div>
</code></pre>
<p>So the majority of the time you&#39;ll just use the dot notation, but depending on the dynamic aspect of your program you may need to use bracket notation every once in a while.</p>
<h3><a name="class-attribute"class="anchor" href="#class-attribute"><span class="header-link"></span></a>Class Attribute</h3>
<p>Every object has a <em>class</em> attribute which provides information about the object&#39;s type. </p>
<p>Sounds pretty useful, but unfortunately neither of the current specifications (ES3 or ES5) allow you to access this attribute!?</p>
<p>But there is a trick to accessing an object&#39;s <em>class</em> attribute and that is to call the <code>toString()</code> method on the top level <code>Object.prototype</code> but using it on the relevant object you want to get the class of. The following example demonstrates the most common use case of accessing the <em>class</em> attribute: trying to work out if an object is actually an <code>Array</code>…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arr</span><span class="p">);</span> <span class="c1">// =&gt; &quot;object&quot; - well that&#39;s not right, it should return the type as &#39;Array&#39;! (note: this is a known JavaScript bug)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arr</span><span class="p">));</span> <span class="c1">// =&gt; &quot;[object Array]&quot; - that&#39;s more like it</span>
</pre></div>
</code></pre>
<p>…what we&#39;ve done here is used a method available to all <code>Function</code>&#39;s called <code>.call()</code>. What this method does is let you call another function (i.e. borrow a function) but use the calling context as the <code>this</code> value.</p>
<p>That previous sentence probably didn&#39;t make a lot of sense because we&#39;ve not covered <code>this</code> or anything to do with contexts/execution environments etc - but try and stick with it for a moment and understand that what we&#39;ve done is called the <code>Object.prototype</code>&#39;s <code>toString</code> method but we&#39;ve called it as if it was our Array that had executed <code>toString</code>.</p>
<p>The way this trick works actually requires a deep level understanding of how JavaScript handles its conversion of data types: something I definitely wont go into here).</p>
<h2><a name="arrays"class="anchor" href="#arrays"><span class="header-link"></span></a>Arrays</h2>
<p>Arrays are like a simplified Object.</p>
<p>An Object is effectively a mapping of names (identifiers) to values… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>
    <span class="nx">name</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>
    <span class="nx">name</span><span class="o">:</span> <span class="nx">value</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>…an Array is the same with the exception that the &#39;name&#39; identifiers are automatically incremented numerical values. So an Array like this…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">];</span>
</pre></div>
</code></pre>
<p>…would effectively be similar to the following object…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="mi">0</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span>
    <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span>
    <span class="mi">2</span><span class="o">:</span> <span class="s1">&#39;c&#39;</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>Note: the above object with numerical keys requires you to use the bracket notation to access the identifiers (e.g. <code>obj[0]</code>) as <code>obj.0</code> would result in a <code>SyntaxError: Unexpected number</code>.</p>
<h3><a name="methods"class="anchor" href="#methods"><span class="header-link"></span></a>Methods</h3>
<p>Arrays come with many methods (functions) that let you manipulate and filter the data contained within the Array.</p>
<p>Some methods change the data in the Array (<em>mutators</em>).</p>
<p>Some methods return a new Array with the data changed (<em>accessors</em> - not the best/most descriptive name really,  as it suggests these methods just &#39;access&#39; data when that&#39;s not always the case).</p>
<p>Some methods loop through the data (<em>iterators</em>).</p>
<p>Below are some examples of each…</p>
<table>
<thead>
<tr>
<th>Mutators</th>
<th>Accessors</th>
<th>Iterators</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/pop">pop</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/concat">concat</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter">filter</a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/push">push</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/join">join</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach">forEach</a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/reverse">reverse</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/slice">slice</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/every">every</a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/shift">shift</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf">indexOf</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map">map</a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/sort">sort</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/lastIndexOf">lastIndexOf</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/some">some</a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice">splice</a></td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce">reduce</a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/unshift">unshift</a></td>
<td></td>
<td><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/ReduceRight">reduceRight</a></td>
</tr>
</tbody>
</table>
<h2><a name="conditional-statements"class="anchor" href="#conditional-statements"><span class="header-link"></span></a>Conditional Statements</h2>
<p>Conditional statements are &#39;control logic&#39;. This means that depending on the result of a specified condition the corresponding branch of logic will be executed.</p>
<p>There are a few different conditional statements such as:</p>
<ul>
<li><code>if</code></li>
<li><code>switch</code></li>
<li><code>ternary</code></li>
</ul>
<p>The simplest way to understand them is to see the syntax.</p>
<h3><a name="if-statement"class="anchor" href="#if-statement"><span class="header-link"></span></a>If Statement</h3>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// if &#39;condition&#39; evaluated to true then run this code</span>

<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">other_condition</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// if &#39;other_condition&#39; evaluated to true then run this code</span>

<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

    <span class="c1">// other wise we&#39;ll run this code as a fallback</span>

<span class="p">}</span>
</pre></div>
</code></pre>
<p>So a basic example would be something like this…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">can_drink</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">can_drink</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="switch-statement"class="anchor" href="#switch-statement"><span class="header-link"></span></a>Switch Statement</h3>
<p>If you have lots of checks against the same variable/condition then you&#39;re better off using a <code>switch</code> statement… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">switch</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">x</span><span class="o">:</span>
        <span class="c1">// Execute this code block</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">y</span><span class="o">:</span>
        <span class="c1">// Execute this code block</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">z</span><span class="o">:</span>
        <span class="c1">// Execute this code block</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="c1">// Execute this code block</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>An example of using this statement would be… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">car</span> <span class="o">=</span> <span class="s1">&#39;Porsche&#39;</span><span class="p">;</span>

<span class="k">switch</span> <span class="p">(</span><span class="nx">car</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s1">&#39;Ford&#39;</span><span class="o">:</span>
        <span class="c1">// Execute this code block if car is &#39;Ford&#39;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">&#39;Porsche&#39;</span><span class="o">:</span>
        <span class="c1">// Execute this code block if car is &#39;Porsche&#39;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">&#39;BMW&#39;</span><span class="o">:</span>
        <span class="c1">// Execute this code block if car is &#39;BMW&#39;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="c1">// Execute this code block if car is none of the above</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="ternary-statement"class="anchor" href="#ternary-statement"><span class="header-link"></span></a>Ternary Statement</h3>
<p>For very short <code>if</code> statements you can also use a shortened syntax (a conditional operator sometimes referred to as a &#39;ternary&#39; operator because of its three operands). The syntax is like so…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">condition</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span>
</pre></div>
</code></pre>
<p>…and can be used like so…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">can_drink</span> <span class="o">=</span> <span class="p">(</span><span class="nx">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// can_drink will equal a Boolean value of true</span>

<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="s1">&#39;abc&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;def&#39;</span> <span class="o">:</span> <span class="s1">&#39;xyz&#39;</span><span class="p">;</span> <span class="c1">// y will equal a String value of &#39;def&#39;</span>
</pre></div>
</code></pre>
<h2><a name="coercion"class="anchor" href="#coercion"><span class="header-link"></span></a>Coercion</h2>
<p>One of the areas of most confusion in JavaScript is its ability to coerce data &#39;types&#39;.</p>
<p>The best thing to do is to just try and take advantage of JavaScript&#39;s ability to coerce objects into different types and use it to your advantage to make your code more succinct.</p>
<p>For example, with an <code>if</code> conditional statement JavaScript will try to coerce the expression into either <code>true</code> or <code>false</code> like so… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;js-element&#39;</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// if the DOM element is available then this conditional</span>
    <span class="c1">// will coerce `element` into a Boolean value of true </span>
    <span class="c1">// and hence the condition will pass.</span>

    <span class="c1">// If the DOM element doesn&#39;t exist then the resulting value will be null</span>
    <span class="c1">// and null is converted into a Boolean value of false </span>
    <span class="c1">// and hence the condition will not pass</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>In the above example JavaScript automatically converts the condition into a Boolean, but you can manually coerce a value into a Boolean by using the double negation operator <code>!!</code> like so...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">1980</span> <span class="p">};</span>

<span class="o">!!</span><span class="nx">obj</span><span class="p">.</span><span class="nx">age</span> <span class="c1">// =&gt; false (because zero coerces to false)</span>
<span class="o">!!</span><span class="nx">obj</span><span class="p">.</span><span class="nx">year</span> <span class="c1">// =&gt; true (any number greater than zero coerces to true)</span>
</pre></div>
</code></pre>
<p>You can also use a single negation operator <code>!</code> to return the opposite Boolean value of an object (this is useful for saying &#39;if NOT x&#39;)…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">bool</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// this statement is executed if &#39;bool&#39; is NOT true (i.e. if it&#39;s false)</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="some-quick-notes-"class="anchor" href="#some-quick-notes-"><span class="header-link"></span></a>Some quick notes:</h3>
<p>All Objects/Arrays coerce to true (even an empty Array).</p>
<p>An empty String wil coerce to false.</p>
<p>There is a lot to learn about JavaScript&#39;s coercion process, so for full details please see the following article: <a href="http://webreflection.blogspot.co.uk/2010/10/javascript-coercion-demystified.html"><a href="http://webreflection.blogspot.co.uk/2010/10/javascript-coercion-demystified.html">http://webreflection.blogspot.co.uk/2010/10/javascript-coercion-demystified.html</a></a></p>
<h2><a name="functions"class="anchor" href="#functions"><span class="header-link"></span></a>Functions</h2>
<p>Functions make it easier to create re-useable code. They are simply blocks of JavaScript code that can be called/executed multiple times.</p>
<p>An example of the function syntax is as follows…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">identifier</span> <span class="p">(</span><span class="nx">parameters</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// statements</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…which could be used like so…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="c1">// =&gt; 2</span>
</pre></div>
</code></pre>
<h3><a name="parameters"class="anchor" href="#parameters"><span class="header-link"></span></a>Parameters</h3>
<p>Functions accept any number of &#39;parameters&#39; (also known as &#39;arguments&#39;).</p>
<p>Within a function you can access all arguments via a special <code>arguments</code> property…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">test</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span> 
<span class="p">}</span>

<span class="nx">test</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// =&gt; [1, 2, 3]</span>
</pre></div>
</code></pre>
<p>…you&#39;ll notice in the above example it looks like the <code>arguments</code> property is an Array but it&#39;s not. It&#39;s an &#39;array-like&#39; object. So you can access the keys values much like an Array but you don&#39;t have access to the Array methods.</p>
<h3><a name="return-values"class="anchor" href="#return-values"><span class="header-link"></span></a>Return values</h3>
<p>If a function doesn&#39;t explicitly return a value (if you look at our <code>add</code> function example above you&#39;ll see we explicitly returned <code>a + b</code>) then the function will have a return value of <code>undefined</code>. Hence when you run certain code snippets in a browsers web console you&#39;ll normally see <code>undefined</code> appear directly underneath the code you&#39;ve just written.</p>
<h3><a name="borrowing-methods"class="anchor" href="#borrowing-methods"><span class="header-link"></span></a>Borrowing methods</h3>
<p>Objects have two core methods made available to them: <code>call</code> and <code>apply</code>.</p>
<p>These two methods are the same (i.e. they do the same thing - which is to call a function <em>indirectly</em> while specifying a value for <code>this</code>) but with one small difference: <code>call</code> requires you pass through any arguments for the function as a comma separated list while <code>apply</code> requires you pass through any arguments for the function as an Array of values.</p>
<p>The purpose of these methods is to allow you to <em>borrow</em> a function/method from another object. The following code demonstrates its usage and how powerful it can be… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bob&#39;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Mark&#39;</span><span class="p">,</span> 
    <span class="nx">speak</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> 
        <span class="k">return</span> <span class="s1">&#39;My name is &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="nx">obj2</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span> <span class="c1">// =&gt; &#39;My name is Mark&#39;</span>

<span class="c1">// obj1 doesn&#39;t have a speak method and we don&#39;t want to add extra code to that object when </span>
<span class="c1">// obj2 already has the same method already defined. We want to be able to just borrow obj2&#39;s &#39;speak&#39; method!</span>

<span class="nx">obj2</span><span class="p">.</span><span class="nx">speak</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj1</span><span class="p">);</span> <span class="c1">// =&gt; &#39;My name is Bob&#39;</span>
</pre></div>
</code></pre>
<p>…you can see how by using the <code>call</code> method we can make better use of existing functions and so we become more productive as well as have smaller and more efficient code.</p>
<h2><a name="code-reuse-inheritance-"class="anchor" href="#code-reuse-inheritance-"><span class="header-link"></span></a>Code Reuse (inheritance)</h2>
<p>The final subject I want to briefly cover is &#39;code reuse&#39;. In most object-oriented programming languages the main principle of code reuse is done via <em>inheritance</em> (this is where you have a base object that all other objects inherit properties/methods from - much like how JavaScript already works! i.e. all objects inherit properties/methods from the top level <code>Object.prototype</code>).</p>
<p>The way you implement inheritance is by taking advantage of the <code>prototype</code> chain in JavaScript.</p>
<p>There are multiple ways to use the prototype chain, one populate way is to try and emulate the &#39;Classical Inheritance&#39; style syntax (i.e. most programming languages have a <code>Class</code> keyword that makes creating objects based off a blueprint Class very easy but JavaScript doesn&#39;t have the concept of Class&#39;es - not yet any way). </p>
<p>An example of how to emulate Class style syntax in JavaScript (currently) is by using functions as &#39;Constructors&#39; like so… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
   <span class="c1">// Instance properties (any new instances of the Person class will have these properties)</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="s1">&#39;no name given&#39;</span><span class="p">;</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">age</span> <span class="o">||</span> <span class="s1">&#39;no age given&#39;</span><span class="p">;</span>

   <span class="c1">// Instance method (any new instances of the Person class will have this method)</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
   <span class="p">};</span>
<span class="p">};</span>

<span class="c1">// Create a new instance of the Person Class</span>
<span class="kd">var</span> <span class="nx">bob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span><span class="mi">7</span> <span class="p">});</span>

<span class="c1">// Add a method to this instance of the Person Class only (no other instances created will have this method)</span>
<span class="nx">bob</span><span class="p">.</span><span class="nx">getAge</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Test the bob instance has access to both methods</span>
<span class="nx">bob</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>
<span class="nx">bob</span><span class="p">.</span><span class="nx">getAge</span><span class="p">();</span>

<span class="c1">// Create another instance of the Person Class</span>
<span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Mark&#39;</span> <span class="p">});</span>

<span class="c1">// Notice the user has access to a &#39;getName&#39; method but not a &#39;getAge&#39; method</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>

<span class="c1">// I know this will error so I&#39;m wrapping it in a try statement</span>
<span class="k">try</span> <span class="p">{</span>
   <span class="nx">user</span><span class="p">.</span><span class="nx">getAge</span><span class="p">();</span>
<span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">alert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="c1">// Uncaught TypeError: Object [object Object] has no method &#39;getAge&#39;</span>
<span class="p">}</span>

<span class="c1">// Add a method to the Person Class&#39; prototype chain (all instances of the Person Class will now get this method - even those already defined)</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getNameAndAge</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">return</span> <span class="s1">&#39;Hi, my name is &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;, and I\&#39;m &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">+</span> <span class="s1">&#39; years old.&#39;</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Test this new method is accessible to all instances of the Person Class</span>
<span class="nx">bob</span><span class="p">.</span><span class="nx">getNameAndAge</span><span class="p">();</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">getNameAndAge</span><span class="p">();</span>
</pre></div>
</code></pre>
<h3><a name="composition"class="anchor" href="#composition"><span class="header-link"></span></a>Composition</h3>
<p>There is another code reuse pattern you can use instead of &#39;inheritance&#39; called &#39;composition&#39;. The way it works is instead of inheriting methods/properties from a blueprint/base object you instead borrow the methods using <code>call</code> or <code>apply</code> (as we&#39;ve seen previously). </p>
<p>An example of this is as follows…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">names</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;James&#39;</span><span class="p">,</span> <span class="s1">&#39;Neil&#39;</span><span class="p">,</span> <span class="s1">&#39;Russ&#39;</span><span class="p">,</span> <span class="s1">&#39;Stuart&#39;</span><span class="p">]</span>
    <span class="p">};</span>

<span class="kd">var</span> <span class="nx">people</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">names</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Ash&#39;</span><span class="p">,</span> <span class="s1">&#39;Brad&#39;</span><span class="p">,</span> <span class="s1">&#39;Mark&#39;</span><span class="p">,</span> <span class="s1">&#39;Mike&#39;</span><span class="p">],</span>
    <span class="nx">speak</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">which</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;Hi, my name is &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">names</span><span class="p">[</span><span class="nx">which</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// Composition not Inheritance</span>
<span class="nx">people</span><span class="p">.</span><span class="nx">speak</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// =&gt; &#39;Hi, my name is Neil&#39;</span>
</pre></div>
</code></pre>
<h3><a name="mixins"class="anchor" href="#mixins"><span class="header-link"></span></a>Mixins</h3>
<p>Another code reuse pattern is called a &#39;mixin&#39; - which instead of using &#39;inheritance&#39; we simply copy over the functions/properties we want to use.</p>
<p>The following example demonstrates how this works… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">extend</span><span class="p">(</span><span class="nx">destination</span><span class="p">,</span> <span class="nx">source</span><span class="p">,</span> <span class="nx">overwrite</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">overwrite</span> <span class="o">=</span> <span class="nx">overwrite</span> <span class="o">||</span> <span class="kc">false</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">source</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">source</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// If we&#39;re not allowed to overwrite an existing property… </span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">overwrite</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// …then we check to see if the property is undefined… </span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">destination</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// …if it is then we know we can copy the property to the destination object</span>
                    <span class="nx">destination</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">source</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">destination</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">source</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">destination</span><span class="p">;</span> 
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">names</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;James&#39;</span><span class="p">,</span> <span class="s1">&#39;Neil&#39;</span><span class="p">,</span> <span class="s1">&#39;Russ&#39;</span><span class="p">,</span> <span class="s1">&#39;Stuart&#39;</span><span class="p">]</span>
    <span class="p">};</span>

<span class="kd">var</span> <span class="nx">people</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">names</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Ash&#39;</span><span class="p">,</span> <span class="s1">&#39;Brad&#39;</span><span class="p">,</span> <span class="s1">&#39;Mark&#39;</span><span class="p">,</span> <span class="s1">&#39;Mike&#39;</span><span class="p">],</span>
    <span class="nx">speak</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">which</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;Hi, my name is &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">names</span><span class="p">[</span><span class="nx">which</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">extend</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="nx">people</span><span class="p">);</span> <span class="c1">// copy properties from `people` to `person`</span>

<span class="c1">// `person` now has a `speak` method it didn&#39;t have originally </span>
<span class="nx">person</span><span class="p">.</span><span class="nx">speak</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// =&gt; &#39;Hi, my name is Neil&#39;</span>
</pre></div>
</code></pre>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>OK, this has been a super brief/quick run through of different JavaScript concepts and language features.</p>
<p>This isn&#39;t supposed to be even remotely an exhaustive discussion - have you seen the size of &#39;JavaScript: The Definitive Guide&#39; !?</p>
<p>Hopefully this has at least been enough to get you started and interested in learning more. If there are any issues or errors then please get in contact and let me know.</p>
]]></description><link>http://www.integralist.co.uk/posts/javascript-101/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/javascript-101/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sat, 24 Nov 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[MVC in JavaScript with Backbone.js]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 34mins</em></p>
<ul>
<li>Introduction</li>
<li>What is MVC?</li>
<li>Backbone&#39;s interpretation of MVC</li>
<li>Using AMD Modules and RequireJS</li>
<li>Scope Access</li>
<li>Project</li>
<li>Set-up</li>
<li>Architecture</li>
<li>Wrap-up</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>I&#39;ll be honest and tell you that I struggled for quite a while to actually see the point of using <a href="http://backbonejs.org/">Backbone.js</a>. </p>
<p>It seemed like a lot of overhead for very little in return.</p>
<p>I also didn&#39;t like the fact that it tied me into using both Underscore and jQuery as dependencies.</p>
<p>Because of this, and because I knew a lot of these so called MVC frameworks weren&#39;t <em>really</em> MVC (in the traditional sense), I decided to &#39;roll my own&#39; and so started writing <a href="https://github.com/Integralist/MVC-Start-up-Kit/tree/library_agnostic">my own MVC library</a> (please do read the articles listed at the end of this post by <a href="http://twitter.com/addyosmani">Addy Osmani</a> for an in-depth look at the massive MV* culture we have at the moment).</p>
<p>My own library worked fine, and it genuinely followed the MVC principles:</p>
<table>
  <tr>
    <th>M (Models)</th>
    <th>V (Views)</th>
    <th>C (Controllers)</th>
  </tr>
  <tr>
    <td>Data</td>
    <td>User Interface</td>
    <td>Logic</td>
  </tr>
</table>

<p>But my own biggest concern was that although my MVC library was <em>structurally</em> equivalent to the proper MVC pattern and the API itself was fairly clean and easy to use, there was a lot of areas where I had too tightly coupled my library to a particular way of working and that made it difficult to re-use on different projects without first spending a lot of time making those tight couplings &#39;loose&#39; again each time.</p>
<p>It was obvious I needed to spend a lot more time on this library of mine for it to be genuinely usable in a production environment, and that&#39;s when I decided to instead take another look into Backbone.js to see what it could offer me, because from all the examples I had looked at in the past the code produced appeared very clean, flexible and well structured. Plus there are <em>lots</em> of agencies/companies implementing Backbone nowadays. So out of all the MVC libraries available (and there are quite a few) it seemed like a pretty safe bet to take another look at it.</p>
<h2><a name="what-is-mvc-"class="anchor" href="#what-is-mvc-"><span class="header-link"></span></a>What is MVC?</h2>
<p>For those who&#39;ve not heard of the MVC Design Pattern it is quite simple: each letter of the acronym is a separate area of concern…</p>
<h3><a name="m-model"class="anchor" href="#m-model"><span class="header-link"></span></a>M: Model</h3>
<p>A Model is a piece of data.</p>
<p>If you had a photo album then each photo would be a Model.</p>
<p>If you had a car showroom then each car would be a Model.</p>
<p>If you owned a pet store then each animal would be a Model.</p>
<p>You get the idea.</p>
<h3><a name="v-view"class="anchor" href="#v-view"><span class="header-link"></span></a>V: View</h3>
<p>A View is the user interface.</p>
<p>This could literally be anything the user of your program interacts with. So any HTML element could be made into a &#39;View&#39;.</p>
<h3><a name="c-controller"class="anchor" href="#c-controller"><span class="header-link"></span></a>C: Controller</h3>
<p>A Controller is the brains of the program and determines what happens and when.</p>
<h3><a name="communication-between-them-"class="anchor" href="#communication-between-them-"><span class="header-link"></span></a>Communication between them?</h3>
<p>The traditional concept of MVC states that a Model should only handle its own data and should have no other logic bound to it. So for example, a Model can have a method for getting/updating its data but it should have no logic built-in to determine <em>when</em> it should get that data (that&#39;s what the Controller does). </p>
<p>Both the Model and the View can alert the Controller of any changes or interactions and then the Controller can decide what to do with that information (e.g. when the user selects an option from a drop down menu within the View then the Controller might request specific data from the Model, when the Model gives that data to the Controller then it can pass that onto the View to display).</p>
<p>Typically you&#39;ll have one Controller for every View/Model but you could have multiple Views/Models per Controller.</p>
<h2><a name="backbone-s-interpretation-of-mvc"class="anchor" href="#backbone-s-interpretation-of-mvc"><span class="header-link"></span></a>Backbone&#39;s interpretation of MVC</h2>
<p>Backbone.js is much like all the other JavaScript MVC libraries available today (with the exception of Peter Michaux&#39;s <a href="https://github.com/petermichaux/maria/">Maria</a>) where by it&#39;s not strictly MVC but a variation of the pattern.</p>
<p>Addy Osmani (from Google) has covered this subject in-depth and so I highly recommend you review his work (see the bottom of this post for links).</p>
<p>But the basic premise for most of these libraries is that they implement the Model and the View but the Controller is swapped out for something else. So in Backbone&#39;s case it doesn&#39;t have a Controller, instead the View handles both the traditional View responsibilities as well as the Controller logic.</p>
<h3><a name="collections-"class="anchor" href="#collections-"><span class="header-link"></span></a>Collections?</h3>
<p>Backbone.js also introduces another concept called a &#39;Collection&#39;. A Collection is simply a group of a specific Models. So if you had a Model called &quot;PhotoModel&quot; and you created a few instances of that Model you might want to create a Collection called &quot;PhotoAlbum&quot;. PhotoAlbum would then be a <em>collection</em> of PhotoModels.</p>
<p>Collections trigger events when a Model is added or removed from the Collection and you are able to iterate over the Collection and pull out a specific Model, so they can end up being pretty useful.</p>
<h3><a name="router-history-"class="anchor" href="#router-history-"><span class="header-link"></span></a>Router/History?</h3>
<p>Backbone.js provides a History object which monitors the <code>hashchange</code> event and also provides an opt-in HTML5 <code>pushState</code> variation (which falls back to standard AJAX style hash bang navigation).</p>
<p>There is also a Router object provided which handles the set-up of simple URL routing.</p>
<p>So far I&#39;ve only lightly interacted with the <code>Backbone.Router</code>/<code>Backbone.History</code> aspects but I&#39;ve provided examples below of how to utilise them.</p>
<h2><a name="using-amd-modules-and-requirejs"class="anchor" href="#using-amd-modules-and-requirejs"><span class="header-link"></span></a>Using AMD Modules and RequireJS</h2>
<p>Backbone.js can be used with standard <code>&lt;script&gt;</code> tags, so there is no need for you to use a module system such as AMD (or a module loader such as RequireJS). But my personal preference is to using both AMD with RequireJS, and that&#39;s what the example project I&#39;ll show you will use.</p>
<p>I wont go into the details of what AMD is or how to use RequireJS, I&#39;ll instead point you to <a href="https://github.com/Integralist/Blog-Posts/blob/master/Beginners-guide-to-AMD-and-RequireJS.md">another article I&#39;ve written on the subject</a>.</p>
<h2><a name="scope-access"class="anchor" href="#scope-access"><span class="header-link"></span></a>Scope Access</h2>
<p>Because we&#39;re using AMD (which keeps our code self-contained so it doesn&#39;t introduce global variables) it can be awkward (in some situations) to share information across modules.</p>
<p>One thing I wanted to do recently was access a View instance from within another View. After reviewing the situation I found there were multiple ways to do this:</p>
<ul>
<li>Setting an instance property on the other View</li>
<li>Passing the View through as a property of the argument object when creating the other View</li>
<li>Adding a property to a global namespace</li>
</ul>
<p>…which option you go with depends on personal preference more than anything. I went with the second option.</p>
<h2><a name="project"class="anchor" href="#project"><span class="header-link"></span></a>Project</h2>
<p>The project we&#39;ll build is a basic Contact Manager. </p>
<p>The layout will be a <code>&lt;select&gt;</code> menu that is populated with some Contact names.</p>
<p>Selecting a Contact from the menu will display all details for that contact.</p>
<p>Next to the menu will be a form where we can add a new contact and once added it&#39;ll automatically appear within the menu for the user to select to view.</p>
<p>A finished version of this project can be found <a href="https://github.com/Integralist/Backbone-Playground">on my GitHub</a>.</p>
<h2><a name="set-up"class="anchor" href="#set-up"><span class="header-link"></span></a>Set-up</h2>
<p>Let&#39;s take a top level view of our directory structure…</p>
<ul>
<li>/Assets/<ul>
<li>/Includes/<ul>
<li>Contacts.php</li>
</ul>
</li>
<li>/Scripts/<ul>
<li>/App/<ul>
<li>main.js</li>
<li>namespace.js</li>
</ul>
</li>
<li>/Collections/<ul>
<li>Contacts.js</li>
</ul>
</li>
<li>/Models/<ul>
<li>Contact.js</li>
</ul>
</li>
<li>/Routes/<ul>
<li>Routing.js</li>
</ul>
</li>
<li>/Utils/<ul>
<li>backbone.js</li>
<li>jquery.js</li>
<li>lodash.js</li>
</ul>
</li>
<li>/Views/<ul>
<li>AddContact.js</li>
<li>Contact.js</li>
<li>Contacts.js</li>
</ul>
</li>
<li>require.js</li>
</ul>
</li>
<li>/Styles/<ul>
<li>styles.css</li>
</ul>
</li>
</ul>
</li>
<li>index.html</li>
</ul>
<h2><a name="architecture"class="anchor" href="#architecture"><span class="header-link"></span></a>Architecture</h2>
<h3><a name="html"class="anchor" href="#html"><span class="header-link"></span></a>HTML</h3>
<p>The HTML page <code>index.html</code> consists of a few different elements that we&#39;ll use as &#39;Views&#39;. </p>
<p>We have the <code>&lt;select&gt;</code> menu for displaying the initial list of Contacts, the <code>&lt;form&gt;</code> for allowing us to add more Contacts, and an empty <code>&lt;div&gt;</code> which will be used for displaying the full details of the selected contact.</p>
<p>The full HTML page looks like this...</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">dir=</span><span class="s">&quot;ltr&quot;</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;Mark McDonnell&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;title&gt;</span>Backbone.js<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;Assets/Styles/styles.css&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;view-contacts&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;select&gt;</span>
                <span class="nt">&lt;option&gt;</span>Please select a user<span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;/select&gt;</span>
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;view-contact&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>

        <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">&quot;view-add&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;p&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Name&quot;</span> <span class="na">name=</span><span class="s">&quot;fullname&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
            <span class="nt">&lt;p&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Age&quot;</span> <span class="na">maxlength=</span><span class="s">&quot;3&quot;</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
            <span class="nt">&lt;p&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Address&quot;</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Add New Record&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/form&gt;</span>

        <span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;Assets/Scripts/App/main&quot;</span> <span class="na">src=</span><span class="s">&quot;Assets/Scripts/require.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/template&quot;</span> <span class="na">id=</span><span class="s">&quot;contact_template&quot;</span><span class="nt">&gt;</span>
            <span class="o">&lt;</span><span class="nx">dl</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">dt</span><span class="o">&gt;</span><span class="nx">ID</span><span class="o">&lt;</span><span class="err">/dt&gt;</span>
                <span class="o">&lt;</span><span class="nx">dd</span><span class="o">&gt;&lt;%=</span><span class="nx">id</span><span class="o">%&gt;&lt;</span><span class="err">/dd&gt;</span>
                <span class="o">&lt;</span><span class="nx">dt</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="err">/dt&gt;</span>
                <span class="o">&lt;</span><span class="nx">dd</span><span class="o">&gt;&lt;%=</span><span class="nx">name</span><span class="o">%&gt;&lt;</span><span class="err">/dd&gt;</span>
                <span class="o">&lt;</span><span class="nx">dt</span><span class="o">&gt;</span><span class="nx">Age</span><span class="o">&lt;</span><span class="err">/dt&gt;</span>
                <span class="o">&lt;</span><span class="nx">dd</span><span class="o">&gt;&lt;%=</span><span class="nx">age</span><span class="o">%&gt;&lt;</span><span class="err">/dd&gt;</span>
                <span class="o">&lt;</span><span class="nx">dt</span><span class="o">&gt;</span><span class="nx">Address</span><span class="o">&lt;</span><span class="err">/dt&gt;</span>
                <span class="o">&lt;</span><span class="nx">dd</span><span class="o">&gt;&lt;%=</span><span class="nx">address</span><span class="o">%&gt;&lt;</span><span class="err">/dd&gt;</span>
            <span class="o">&lt;</span><span class="err">/dl&gt;</span>
        <span class="nt">&lt;/script&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</code></pre>
<h3><a name="styles"class="anchor" href="#styles"><span class="header-link"></span></a>Styles</h3>
<p>The styles for this project are just basic - we&#39;re not worrying about design here… </p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nt">body</span> <span class="p">{</span>
    <span class="k">font</span><span class="o">:</span> <span class="k">normal</span> <span class="n">small</span> <span class="n">Arial</span><span class="o">,</span> <span class="n">Verdana</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.hide</span> <span class="p">{</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#view-add</span> <span class="p">{</span>
    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#999</span><span class="p">;</span>
    <span class="k">left</span><span class="o">:</span> <span class="m">350px</span><span class="p">;</span>
    <span class="k">padding-bottom</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="k">padding-left</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
    <span class="k">top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">166px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#view-add</span> <span class="nt">div</span> <span class="p">{</span>
    <span class="k">background-color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
    <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
    <span class="k">margin-right</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="k">margin-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="javascript"class="anchor" href="#javascript"><span class="header-link"></span></a>JavaScript</h3>
<p>RequireJS allows us to utilise just a single <code>&lt;script&gt;</code> tag which points to our main script file that contains the following structure… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">requirejs</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
    <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>
        <span class="s1">&#39;../Utils/backbone&#39;</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;../Utils/lodash&#39;</span><span class="p">,</span> <span class="s1">&#39;../Utils/jquery&#39;</span><span class="p">],</span> <span class="c1">// load dependencies</span>
            <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;Backbone&#39;</span> <span class="c1">// use the global &#39;Backbone&#39; as the module value</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="nx">require</span><span class="p">([</span><span class="s1">&#39;../Models/Contact&#39;</span><span class="p">,</span> <span class="s1">&#39;../Collections/Contacts&#39;</span><span class="p">,</span> <span class="s1">&#39;../Views/Contacts&#39;</span><span class="p">,</span> <span class="s1">&#39;../Views/AddContact&#39;</span><span class="p">,</span> <span class="s1">&#39;../Views/Contact&#39;</span><span class="p">,</span> <span class="s1">&#39;../Routes/Routing&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">Contact</span><span class="p">,</span> <span class="nx">Contacts</span><span class="p">,</span> <span class="nx">ContactsView</span><span class="p">,</span> <span class="nx">AddContactView</span><span class="p">,</span> <span class="nx">ContactView</span><span class="p">,</span> <span class="nx">Routing</span><span class="p">)</span> <span class="p">{</span>

    <span class="cm">/**</span>
<span class="cm">     * Model Generation Examples</span>
<span class="cm">     */</span>

    <span class="kd">var</span> <span class="nx">manager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contact</span><span class="p">({</span>
        <span class="nx">id</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(),</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Mark McDonnell&#39;</span><span class="p">,</span>
        <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span>
    <span class="p">});</span>

    <span class="kd">var</span> <span class="nx">developer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contact</span><span class="p">({</span>
        <span class="nx">id</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(),</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Ashley Banks&#39;</span><span class="p">,</span>
        <span class="nx">age</span><span class="o">:</span> <span class="mi">23</span>
    <span class="p">});</span>

    <span class="c1">// The following few lines are used just to demonstrate the Backbone.js API</span>
    <span class="kd">var</span> <span class="nx">dev_name</span> <span class="o">=</span> <span class="nx">developer</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">dev_age</span> <span class="o">=</span> <span class="nx">developer</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">);</span>

    <span class="nx">developer</span><span class="p">.</span><span class="nx">birthday</span><span class="p">();</span>

    <span class="c1">// The .toJSON() method is a Backbone specific Model/Collection method which returns js object of specified Model</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">manager</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">())</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">developer</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">());</span>


    <span class="cm">/**</span>
<span class="cm">     * Collection Generation Example</span>
<span class="cm">     */</span>

    <span class="kd">var</span> <span class="nx">contacts</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contacts</span><span class="p">([</span><span class="nx">manager</span><span class="p">,</span> <span class="nx">developer</span><span class="p">]);</span>

    <span class="c1">// The .toJSON() method is a Backbone specific Model/Collection method which returns js object of specified Model</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">());</span>


    <span class="cm">/**</span>
<span class="cm">     * View for &lt;select&gt; menu of Contacts</span>
<span class="cm">     */</span>

    <span class="kd">var</span> <span class="nx">contacts_view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContactsView</span><span class="p">({</span>
        <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#view-contacts&#39;</span><span class="p">),</span>
        <span class="nx">collection</span><span class="o">:</span> <span class="nx">contacts</span><span class="p">,</span> <span class="c1">// pass in the Collection into this View</span>

        <span class="cm">/**</span>
<span class="cm">         * View for displaying the selected Contact</span>
<span class="cm">         *</span>
<span class="cm">         * Originally I had created a global namespace property so I could access this View&#39;s &quot;render()&quot; method from within &#39;contacts_view&#39; (/Views/Contacts.js)</span>
<span class="cm">         * And according to people smarter than I (i.e. Addy Osmani from Google) this was the most appropriate solution.</span>
<span class="cm">         * But I since discovered I could pass in additional data when creating a View instance and so that&#39;s what I&#39;ve done here.</span>
<span class="cm">         */</span>

        <span class="nx">associated_view</span><span class="o">:</span> <span class="k">new</span> <span class="nx">ContactView</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#view-contact&#39;</span><span class="p">),</span>
            <span class="nx">collection</span><span class="o">:</span> <span class="nx">contacts</span>
        <span class="p">})</span>
    <span class="p">});</span>


    <span class="cm">/**</span>
<span class="cm">     * View for &lt;form&gt; to add a new Contact</span>
<span class="cm">     */</span>

    <span class="kd">var</span> <span class="nx">add_contact</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AddContactView</span><span class="p">({</span>
        <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#view-add&#39;</span><span class="p">),</span>
        <span class="nx">collection</span><span class="o">:</span> <span class="nx">contacts</span> <span class="c1">// pass in the Collection into this View</span>
    <span class="p">});</span>


    <span class="cm">/**</span>
<span class="cm">     * Lazy Load Models into Collection</span>
<span class="cm">     */</span>

    <span class="nx">contacts</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span>
        <span class="nx">add</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// Prevent resetting the Collection (i.e. instead or clearing the Collection first we just add new Models on top of current set of Models),</span>
        <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// You can do something on error loading</span>
        <span class="p">},</span>
        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// You can do something on successful loading</span>
        <span class="p">}</span>
    <span class="p">});</span>


    <span class="cm">/**</span>
<span class="cm">     * Router/History API Examples</span>
<span class="cm">     */</span>

    <span class="c1">// Create new instance of our Routing Class</span>
    <span class="kd">var</span> <span class="nx">routing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Routing</span><span class="p">();</span>

    <span class="c1">// Initialize the Router</span>
    <span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span> <span class="nx">pushState</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>…this breaks down to the following… </p>
<h3><a name="we-set-up-configurations-for-requirejs"class="anchor" href="#we-set-up-configurations-for-requirejs"><span class="header-link"></span></a>We set-up configurations for RequireJS</h3>
<p>Such as Backbone&#39;s dependencies - this is done using RequireJS&#39; <code>shim</code> feature for libraries that aren&#39;t AMD compatible.<br>&nbsp;<br>You&#39;ll also notice we aren&#39;t using the Underscore library, instead we&#39;re using Lo-dash which is a better performing/API compatible utility library.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">requirejs</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
    <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>
        <span class="s1">&#39;../Utils/backbone&#39;</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;../Utils/lodash&#39;</span><span class="p">,</span> <span class="s1">&#39;../Utils/jquery&#39;</span><span class="p">],</span> <span class="c1">// load dependencies</span>
            <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;Backbone&#39;</span> <span class="c1">// use the global &#39;Backbone&#39; as the module value</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h3><a name="specify-dependencies-and-execute-callback-function-once-all-are-loaded"class="anchor" href="#specify-dependencies-and-execute-callback-function-once-all-are-loaded"><span class="header-link"></span></a>Specify dependencies and execute callback function once all are loaded</h3>
<p>The dependencies we&#39;re loading are the relevant Models, Views, Collections required for this application to work - once loaded we can create new instances of them.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">require</span><span class="p">([</span><span class="s1">&#39;../Models/Contact&#39;</span><span class="p">,</span> <span class="s1">&#39;../Collections/Contacts&#39;</span><span class="p">,</span> <span class="s1">&#39;../Views/Contacts&#39;</span><span class="p">,</span> <span class="s1">&#39;../Views/AddContact&#39;</span><span class="p">,</span> <span class="s1">&#39;../Views/Contact&#39;</span><span class="p">,</span> <span class="s1">&#39;../Routes/Routing&#39;</span><span class="p">,</span> <span class="s1">&#39;../Utils/backbone&#39;</span><span class="p">],</span> 
<span class="kd">function</span> <span class="p">(</span><span class="nx">Contact</span><span class="p">,</span> <span class="nx">Contacts</span><span class="p">,</span> <span class="nx">ContactsView</span><span class="p">,</span> <span class="nx">AddContactView</span><span class="p">,</span> <span class="nx">ContactView</span><span class="p">,</span> <span class="nx">Routing</span><span class="p">)</span> <span class="p">{</span>
</pre></div>
</code></pre>
<h3><a name="generate-some-data-for-the-initial-select-menu-population"class="anchor" href="#generate-some-data-for-the-initial-select-menu-population"><span class="header-link"></span></a>Generate some data for the initial <code>&lt;select&gt;</code> menu population</h3>
<p>We&#39;ve loaded the <code>Contact</code> Model and we create two new instances of it and pass in the relevant properties for the Model data.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Model Generation Examples</span>
<span class="cm"> */</span>

<span class="kd">var</span> <span class="nx">manager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contact</span><span class="p">({</span>
    <span class="nx">id</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(),</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Mark McDonnell&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">developer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contact</span><span class="p">({</span>
    <span class="nx">id</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(),</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Ashley Banks&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span> <span class="mi">23</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h3><a name="create-a-collection-that-will-hold-the-model-data-we-ve-just-created"class="anchor" href="#create-a-collection-that-will-hold-the-model-data-we-ve-just-created"><span class="header-link"></span></a>Create a Collection that will hold the Model data we&#39;ve just created</h3>
<p>Backbone lets us pass through an Array of Models to instantiate the Collection with</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Collection Generation Example</span>
<span class="cm"> */</span>

<span class="kd">var</span> <span class="nx">contacts</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contacts</span><span class="p">([</span><span class="nx">manager</span><span class="p">,</span> <span class="nx">developer</span><span class="p">]);</span>
</pre></div>
</code></pre>
<h3><a name="create-the-view"class="anchor" href="#create-the-view"><span class="header-link"></span></a>Create the View</h3>
<p>You&#39;ll notice that when creating the view Backbone gives us the ability to pass in specific properties such as the HTML element we want to associate our View object with (in this case I&#39;m passing in the <code>&lt;select&gt;</code> element).  </p>
<p>Backbone also lets us specify a Collection for this View to be associated with (this is so we can watch for any events - such as a adding/removing Models - so we can keep the View in sync with any data changes)  </p>
<p>Lastly, we pass in a custom property I&#39;ve called <code>associated_view</code> and the value of this will be a new instance of <code>ContactView</code> (this View is the empty <code>&lt;div&gt;</code> which will be used to display the details of a specific record as selected by the user of our application). The reason I&#39;ve passed in this View into another View is because I want the <code>contacts_view</code> to have access to the <code>associated_view</code> so when the user selects a Contact we can easily tell <code>contacts_view</code> to render the selected Contact data.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * View for &lt;select&gt; menu of Contacts</span>
<span class="cm"> */</span>

<span class="kd">var</span> <span class="nx">contacts_view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContactsView</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#view-contacts&#39;</span><span class="p">),</span>
    <span class="nx">collection</span><span class="o">:</span> <span class="nx">contacts</span><span class="p">,</span> <span class="c1">// pass in the Collection into this View</span>

    <span class="cm">/**</span>
<span class="cm">     * View for displaying the selected Contact</span>
<span class="cm">     */</span>

    <span class="nx">associated_view</span><span class="o">:</span> <span class="k">new</span> <span class="nx">ContactView</span><span class="p">({</span>
        <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#view-contact&#39;</span><span class="p">),</span>
        <span class="nx">collection</span><span class="o">:</span> <span class="nx">contacts</span>
    <span class="p">})</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h3><a name="create-a-view-for-the-form-that-will-create-new-model-data"class="anchor" href="#create-a-view-for-the-form-that-will-create-new-model-data"><span class="header-link"></span></a>Create a View for the <code>&lt;form&gt;</code> that will create new Model data</h3>
<p>What you&#39;ll probably notice is that out of the three Views we have created instances for, they all use the same <code>contacts</code> Collection.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * View for &lt;form&gt; to add a new Contact</span>
<span class="cm"> */</span>

<span class="kd">var</span> <span class="nx">add_contact</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AddContactView</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#view-add&#39;</span><span class="p">),</span>
    <span class="nx">collection</span><span class="o">:</span> <span class="nx">contacts</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h3><a name="load-more-model-data-into-our-collection"class="anchor" href="#load-more-model-data-into-our-collection"><span class="header-link"></span></a>Load more Model data into our Collection</h3>
<p>We initially loaded some Model data into our Collection when starting our application, but now we&#39;re using a Backbone provided method called <code>fetch</code> which lets us grab more data from the server and populate our Collection with that server data.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Lazy Load Models into Collection</span>
<span class="cm"> */</span>

<span class="nx">contacts</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span>
    <span class="nx">add</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// Prevent resetting the Collection (i.e. instead or clearing the Collection first we just add new Models on top of current set of Models),</span>
    <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// You can do something on error loading</span>
    <span class="p">},</span>
    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// You can do something on successful loading</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h3><a name="fetching-collection-data"class="anchor" href="#fetching-collection-data"><span class="header-link"></span></a>Fetching Collection Data</h3>
<p>In the previous section we used <code>contacts.fetch</code> to grab Model data from the server.</p>
<p>To be able to understand how it works we need to look at the Collection module now. </p>
<p>As we know in the main JavaScript file we required a load of dependencies such as Models, Views and Collections and the following is the Collection module we loaded - hopefully the comments will adequately explain what&#39;s going on… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// This Collection requires the &#39;Contact&#39; Model and (obviously) Backbone</span>
<span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../Models/Contact&#39;</span><span class="p">,</span> <span class="s1">&#39;../Utils/backbone&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">Contact</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// We set-up a collection of Contact Models</span>
    <span class="c1">// This is so we can manipulate the group of Models more easily</span>
    <span class="kd">var</span> <span class="nx">Contacts</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
        <span class="c1">// Backbone specific property</span>
        <span class="nx">model</span><span class="o">:</span> <span class="nx">Contact</span><span class="p">,</span>

        <span class="c1">// Backbone specific property</span>
        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/Assets/Includes/Contacts.php&#39;</span><span class="p">,</span>

        <span class="c1">// Backbone specific method</span>
        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="c1">// Collections fire the events &#39;add&#39; and &#39;remove&#39;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">model_added</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
        <span class="p">},</span>

        <span class="nx">model_added</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// The View listens out for &#39;model:added&#39;</span>
            <span class="c1">// Once it hears it, it updates the &lt;select&gt; menu to include the latest Model</span>
            <span class="c1">// We pass the latest Model through from here...</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;model:added&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="p">);</span>
        <span class="p">},</span>

        <span class="c1">// We can&#39;t trigger a custom event from within the &#39;initialize&#39; method</span>
        <span class="c1">// because the View listener wont be ready/set-up yet!</span>
        <span class="c1">// So we have to stick it inside a separate method which I call after I set-up the associated View</span>
        <span class="nx">populate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;contacts:populate&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">Contacts</span><span class="p">;</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>You&#39;ll notice this Collection uses the Backbone specific property <code>url</code> which we&#39;ve pointed to a PHP script (you would replace this with whatever back-end you prefer to use: Ruby, Python, ASP.NET etc). </p>
<p>The PHP script we&#39;re using would normally connect to a database and return its data converted into JSON (JSON is the perfect data format for Backbone to process). But in this example we&#39;re simply just manually creating data and converting it to JSON… </p>
<pre><code class="lang-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
    <span class="nv">$json</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="mi">99</span><span class="p">,</span>
            <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Joe Bloggs&quot;</span><span class="p">,</span>
            <span class="s2">&quot;age&quot;</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> 
            <span class="s2">&quot;address&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;9 Cables Street, London&quot;</span><span class="p">,</span>
            <span class="s2">&quot;role&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Manager&quot;</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="mi">98</span><span class="p">,</span>
            <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Dan Smith&quot;</span><span class="p">,</span>
            <span class="s2">&quot;age&quot;</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">,</span> 
            <span class="s2">&quot;address&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bambridge Road, Essex&quot;</span><span class="p">,</span>
            <span class="s2">&quot;role&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Developer&quot;</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="mi">97</span><span class="p">,</span>
            <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bradley Few&quot;</span><span class="p">,</span>
            <span class="s2">&quot;age&quot;</span> <span class="o">=&gt;</span> <span class="mi">22</span><span class="p">,</span> 
            <span class="s2">&quot;address&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Meeson Mead, Leads&quot;</span><span class="p">,</span>
            <span class="s2">&quot;role&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Developer&quot;</span>
        <span class="p">)</span>
    <span class="p">);</span>

    <span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$json</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</code></pre>
<p>…Backbone.js then populates the Collection with the new data it has &#39;fetched&#39; from the server application.</p>
<p>You may have also noticed that back in our main JavaScript file (when we called the <code>fetch</code> method) we had specified a property called <code>add</code> and set its value to <code>true</code>. The reason we did this was because if we left that property out then when Backbone fetched the data from the server it would have cleared our Collection of all Model data and replaced it with the data from the server. Setting <code>add: true</code> means we don&#39;t overwrite any existing data but instead add the data on top of what&#39;s already there.</p>
<h3><a name="model-structure"class="anchor" href="#model-structure"><span class="header-link"></span></a>Model Structure</h3>
<p>So far we have a main script file where we have created new instances of some Backbone Views as well as created a Backbone Collection. We&#39;ve populated that Collection with specific Model data, but now lets look at the Model itself that we&#39;ve been using to construct our data from… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../Utils/backbone&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>

    <span class="kd">var</span> <span class="nx">Contact</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
        <span class="c1">// Backbone specific object</span>
        <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;No name provided&#39;</span><span class="p">,</span>
            <span class="nx">age</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nx">address</span><span class="o">:</span> <span class="s1">&#39;No address provided&#39;</span>
        <span class="p">},</span>

        <span class="c1">// Backbone specific method</span>
        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="c1">// Syntax: .on(type:property)</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change:age&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\&#39;s age changed to &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">));</span>
            <span class="p">});</span>

            <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s1">&#39;Error:&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
        <span class="p">},</span>

        <span class="c1">// Backbone specific method</span>
        <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span> <span class="o">||</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="s1">&#39;An error has occurred? There should be an id generated!&#39;</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">age</span> <span class="o">!=</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="s1">&#39;Age needs to be a number&#39;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="nx">birthday</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="o">++</span><span class="nx">age</span> <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">Contact</span><span class="p">;</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>…as you can see the only dependency this module has is Backbone.js itself. Don&#39;t worry about specifying Backbone.js in each module, when we run a build script using RequireJS&#39; optimisation tool it&#39;ll only load one instance of Backbone. </p>
<p>The reason we specify Backbone as a dependency in each of these module files (rather than just specifying it once in the top level main script file) is because if we decided to reuse this specific module in another project then it would be crystal clear what dependencies it has (I know in this example if you saw <code>Backbone.Model</code> then it would seem pretty obvious that Backbone.js would need to be loaded, but doing this is just good practice because some modules can have lots of dependencies and they wont always be that obvious, so it&#39;s best to get into the habit of specifying all dependencies for the sake of helpfulness).</p>
<p>Let&#39;s now break down the specific sections of the Model we&#39;ve created:</p>
<h3><a name="first-we-specify-default-values"class="anchor" href="#first-we-specify-default-values"><span class="header-link"></span></a>First we specify default values</h3>
<p>This is in case (when creating a new Model instance) we don&#39;t have all the values readily available</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;No name provided&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nx">address</span><span class="o">:</span> <span class="s1">&#39;No address provided&#39;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="carry-out-some-initial-set-up-stuff-when-a-new-instance-is-created"class="anchor" href="#carry-out-some-initial-set-up-stuff-when-a-new-instance-is-created"><span class="header-link"></span></a>Carry out some initial set-up stuff when a new instance is created</h3>
<p>In this example we want to set-up some event listeners for when the <code>age</code> property is changed as well as when an error occurs.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="c1">// Syntax: .on(type:property)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change:age&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\&#39;s age changed to &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">));</span>
    <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s1">&#39;Error:&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="validate-data-before-actually-making-any-changes"class="anchor" href="#validate-data-before-actually-making-any-changes"><span class="header-link"></span></a>Validate data before actually making any changes</h3>
<p>Backbone.js provides a <code>validate</code> method that returns your own specified error message.<br>If the function doesn&#39;t return any value then it is assumed the data is valid.<br>If the function returns <em>any thing</em> then whatever was returned is used as the error message.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span> <span class="o">||</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;An error has occurred? There should be an id generated!&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">age</span> <span class="o">!=</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;Age needs to be a number&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="create-a-custom-birthday-method"class="anchor" href="#create-a-custom-birthday-method"><span class="header-link"></span></a>Create a custom <code>birthday</code> method</h3>
<p>We use two Backbone methods: <code>get</code> and <code>set</code> to increment the age of the user.<br>First we <code>get</code> the current age, then we <code>set</code> the age using the prefixed <code>++</code> increment operator</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">birthday</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="o">++</span><span class="nx">age</span> <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>So in our main script file you&#39;ll remember we used this custom method like so… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Create a new Model instance</span>
<span class="kd">var</span> <span class="nx">developer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contact</span><span class="p">({</span>
    <span class="nx">id</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(),</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Ashley Banks&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span> <span class="mi">23</span>
<span class="p">});</span>

<span class="c1">// Now effectively set the user&#39;s age to 24</span>
<span class="c1">// i.e. the age was 23 and calling `birthday()` increments the age by one</span>
<span class="nx">developer</span><span class="p">.</span><span class="nx">birthday</span><span class="p">();</span>
</pre></div>
</code></pre>
<h3><a name="view-structures"class="anchor" href="#view-structures"><span class="header-link"></span></a>View Structures</h3>
<p>So again, in our main script file we have created three new View instances. Lets now take a look at each of the View files so we can see what they&#39;re doing and how they work.</p>
<p>If you remember from our main script file we created the following View (well, this is two Views, one inside another)…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * View for &lt;select&gt; menu of Contacts</span>
<span class="cm"> */</span>

<span class="kd">var</span> <span class="nx">contacts_view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContactsView</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#view-contacts&#39;</span><span class="p">),</span>
    <span class="nx">collection</span><span class="o">:</span> <span class="nx">contacts</span><span class="p">,</span> <span class="c1">// pass in the Collection into this View</span>

    <span class="cm">/**</span>
<span class="cm">     * View for displaying the selected Contact</span>
<span class="cm">     *</span>
<span class="cm">     * Originally I had created a global namespace property so I could access this View&#39;s &quot;render()&quot; method from within &#39;contacts_view&#39; (/Views/Contacts.js)</span>
<span class="cm">     * And according to people smarter than I (i.e. Addy Osmani from Google) this was the most appropriate solution.</span>
<span class="cm">     * But I since discovered I could pass in additional data when creating a View instance and so that&#39;s what I&#39;ve done here.</span>
<span class="cm">     */</span>

    <span class="nx">associated_view</span><span class="o">:</span> <span class="k">new</span> <span class="nx">ContactView</span><span class="p">({</span>
        <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#view-contact&#39;</span><span class="p">),</span>
        <span class="nx">collection</span><span class="o">:</span> <span class="nx">contacts</span>
    <span class="p">})</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>…the <code>contacts_view</code> was the <code>&lt;select&gt;</code> menu that held a list of names. The idea being the user selected a name from the list and the details for the selected user was displayed on the page.</p>
<p>So let&#39;s take a look at that particular View file… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../Utils/backbone&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>

    <span class="kd">var</span> <span class="nx">ContactsView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
        <span class="c1">// Backbone specific method</span>
        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;select&#39;</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;contacts:populate&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">populate</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;model:added&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">populate</span><span class="p">();</span> <span class="c1">// when this completes it triggers the custom event &#39;contacts:populate&#39;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">associated_view</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">associated_view</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="c1">// Backbone specific &#39;events&#39; management only applies to DOM elements (as this is a &#39;View&#39; after all)</span>
        <span class="c1">// other custom events triggered are handled via &#39;this.on&#39; within the initialize method </span>
        <span class="c1">// because of this we have to use &#39;this.on&#39; within a &#39;Collection&#39;</span>
        <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
            <span class="s1">&#39;change select&#39;</span><span class="o">:</span> <span class="s1">&#39;display_selected&#39;</span>
        <span class="p">},</span>

        <span class="nx">populate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="kd">var</span> <span class="nx">select</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">select</span><span class="p">;</span> <span class="c1">// scope of this changes within &#39;each&#39; (refers to same thing as the &#39;model&#39; argument)</span>
            <span class="kd">var</span> <span class="nx">frag</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">option</span><span class="p">;</span>

            <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span>
                <span class="nx">option</span> <span class="o">=</span> <span class="s1">&#39;&lt;option value=&quot;&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">cid</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;&lt;/option&gt;&#39;</span><span class="p">;</span>
                <span class="nx">frag</span> <span class="o">+=</span> <span class="nx">option</span><span class="p">;</span>
            <span class="p">},</span> <span class="k">this</span><span class="p">);</span>

            <span class="c1">// We could of had the &#39;append&#39; calls within the loop</span>
            <span class="c1">// but that would have meant multiple DOM interactions</span>
            <span class="nx">select</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">frag</span><span class="p">);</span>
        <span class="p">},</span>

        <span class="nx">display_selected</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">targ</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">selected_option</span> <span class="o">=</span> <span class="nx">targ</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">targ</span><span class="p">.</span><span class="nx">selectedIndex</span><span class="p">];</span>
            <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">getByCid</span><span class="p">(</span><span class="nx">selected_option</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>

            <span class="c1">// We call the &#39;render&#39; method on the associated View we passed through when creating this View&#39;s instance</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">associated_view</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
        <span class="p">},</span>

        <span class="c1">// &#39;model&#39; is passed through from Collection</span>
        <span class="nx">update</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">select</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;select&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">option</span> <span class="o">=</span> <span class="s1">&#39;&lt;option value=&quot;&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">cid</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;&lt;/option&gt;&#39;</span><span class="p">;</span>
            <span class="nx">select</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">option</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">ContactsView</span><span class="p">;</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>…and let&#39;s break down what it&#39;s doing… </p>
<h3><a name="carry-out-some-initial-set-up-stuff-when-a-new-instance-is-created"class="anchor" href="#carry-out-some-initial-set-up-stuff-when-a-new-instance-is-created"><span class="header-link"></span></a>Carry out some initial set-up stuff when a new instance is created</h3>
<p>A few things going on here:  </p>
<p>We first grab the <code>&lt;select&gt;</code> element using Backbone&#39;s <code>$el</code> property (this property references the element we passed through to the View&#39;s <code>extend</code> method when creating a new instance. It&#39;s effectively a jQuery wrapped version of the element - which is why we&#39;re able to use jQuery&#39;s <code>find</code> method.  </p>
<p>Next we set-up a couple of event listeners (for custom events) - you&#39;ll remember the Collection triggers the custom events like so <code>this.trigger(&#39;model:added&#39;, model);</code> and <code>this.trigger(&#39;contacts:populate&#39;);</code>.  </p>
<p>This is where it gets a little weird I&#39;m afraid. We now call the Collection&#39;s custom <code>populate</code> method. That method does literally nothing other than trigger the custom event <code>contacts:populate</code>. The reason that method even exists (and why we&#39;re calling it) is because we only want to populate the <code>&lt;select&gt;</code> menu when we know there is data available! We weren&#39;t able to trigger a custom event from the Collections <code>initialize</code> method (which would have been ideal, because once the Collection instance is created would have been a good time to trigger the custom event) and so we&#39;ve had to create our own method within the Collection which we manually call from this View. It&#39;s a bit &quot;arse about face&quot; but that&#39;s just the way it is.  </p>
<p>Lastly we create a property for this instance that points to another View. The reason we do this is because later on in this View&#39;s <code>display_selected</code> method we need to call the associated View&#39;s <code>render</code> method.  </p>
<p>Because we&#39;re using AMD we&#39;ve made our Views into separate modules/files, but because of this we aren&#39;t able to access code outside of a module (our module&#39;s code is protected) - so we&#39;re unable to access the <code>ContactView</code> View unless we pass around a reference to it like we&#39;ve done here.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;select&#39;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;contacts:populate&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">populate</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;model:added&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">populate</span><span class="p">();</span> <span class="c1">// when this completes it triggers the custom event &#39;contacts:populate&#39;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">associated_view</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">associated_view</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="define-some-events"class="anchor" href="#define-some-events"><span class="header-link"></span></a>Define some events</h3>
<p>We specify a &#39;change&#39; event for the <code>&lt;select&gt;</code> element<br>which when triggered executes the <code>display_selected</code> method we&#39;ve created for this View.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
    <span class="s1">&#39;change select&#39;</span><span class="o">:</span> <span class="s1">&#39;display_selected&#39;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="custom-populate-function"class="anchor" href="#custom-populate-function"><span class="header-link"></span></a>Custom <code>populate</code> function</h3>
<p>This method builds up the content of the <code>&lt;select&gt;</code> menu.<br>It does this by looping through the Collection data and accessing each individual Model stored within it.<br>You&#39;ll notice that we set the value of each <code>&lt;option&gt;</code> element to be whatever the <code>cid</code> value for the Model is (the <code>cid</code> value is set automatically by Backbone on each Model)</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">populate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">select</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">select</span><span class="p">;</span> <span class="c1">// scope of this changes within &#39;each&#39; (refers to same thing as the &#39;model&#39; argument)</span>
    <span class="kd">var</span> <span class="nx">frag</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">option</span><span class="p">;</span>

   <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span>
        <span class="nx">option</span> <span class="o">=</span> <span class="s1">&#39;&lt;option value=&quot;&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">cid</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;&lt;/option&gt;&#39;</span><span class="p">;</span>
        <span class="nx">frag</span> <span class="o">+=</span> <span class="nx">option</span><span class="p">;</span>
    <span class="p">},</span> <span class="k">this</span><span class="p">);</span>

    <span class="c1">// We could of had the &#39;append&#39; calls within the loop</span>
    <span class="c1">// but that would have meant multiple DOM interactions</span>
    <span class="nx">select</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">frag</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="custom-display_selected-function"class="anchor" href="#custom-display_selected-function"><span class="header-link"></span></a>Custom <code>display_selected</code> function</h3>
<p>This methods works out which menu item was selected and then<br>uses a Backbone specific method <code>getByCid</code> to access the required Model.<br>We then call the <code>ContactView</code>&#39;s <code>render</code> method and pass through the Model data that needs to be rendered.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">display_selected</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">targ</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">selected_option</span> <span class="o">=</span> <span class="nx">targ</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">targ</span><span class="p">.</span><span class="nx">selectedIndex</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">getByCid</span><span class="p">(</span><span class="nx">selected_option</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>

    <span class="c1">// We call the &#39;render&#39; method on the associated View we passed through when creating this View&#39;s instance</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">associated_view</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="custom-update-function"class="anchor" href="#custom-update-function"><span class="header-link"></span></a>Custom <code>update</code> function</h3>
<p>Every time a Model is added to the Collection it triggers an <code>model:added</code> event.<br>This event causes the View&#39;s <code>update</code> method to be executed, which inserts the new Model directly into the <code>&lt;select&gt;</code> menu.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">update</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">select</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;select&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">option</span> <span class="o">=</span> <span class="s1">&#39;&lt;option value=&quot;&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">cid</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;&lt;/option&gt;&#39;</span><span class="p">;</span>
    <span class="nx">select</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">option</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="template-for-the-associated-view"class="anchor" href="#template-for-the-associated-view"><span class="header-link"></span></a>Template for the Associated View</h3>
<p>Let&#39;s take a look at the associated View that we created…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../Utils/backbone&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>

    <span class="kd">var</span> <span class="nx">ContactView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">models</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="kd">var</span> <span class="nx">attributes</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#contact_template&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">compile</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">html</span><span class="p">(),</span> <span class="p">{</span>
                <span class="nx">id</span><span class="o">:</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                <span class="nx">name</span><span class="o">:</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
                <span class="nx">age</span><span class="o">:</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">age</span><span class="p">,</span>
                <span class="nx">address</span><span class="o">:</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">address</span>
            <span class="p">});</span>

            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">compile</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">ContactView</span><span class="p">;</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>…as you can see: it&#39;s a lot simpler! All it consists of is a <code>render</code> method.</p>
<p>The purpose of this View is to display the selected contact details.</p>
<p>When this method is called we pass it the Model that we want to display and then we use Underscore&#39;s <code>_.template</code> method to render the data in HTML.</p>
<p>If you&#39;ve not used a template library before then it simply is just a text file which contains HTML tags where the dynamic content areas are replaced with specific delimiter tags. You would then pass through an object of data to the template library in which is would use to compile the template&#39;s HTML content so its tags are replaced with content from the data object.</p>
<p>For example, if the template was <code>&lt;p&gt;{{fullname}}&lt;/p&gt;</code> (this assumes the template library you&#39;re using requires the delimiter tags to be double braces <code>{ {</code> <code>}}</code> then you could pass in a data object like <code>{ fullname: &#39;Mark&#39; }</code> and then when the template is compiled it would return the HTML like this: <code>&lt;p&gt;Mark&lt;/p&gt;</code>.</p>
<p>Underscore&#39;s <code>_.template</code> method uses different tags: <code>&lt;%=fullname%&gt;</code> and although the internal workings for each template library can be different (each one trying to out perform the other) the general principle of how they work stays the same.</p>
<p>In this example we&#39;ve gotten the content of the template file from within the HTML page itself. If you remember, the main HTML page we had contained a <code>&lt;script&gt;</code> tag with the <code>type</code> attribute value set to <code>text/template</code>. This odd type value causes the browser to ignore it (a browser wont try to execute the HTML content within that script tag as JavaScript because it doesn&#39;t recognise the type value). </p>
<p>Ideally though you&#39;d have the template content as a separate file and then AJAX in that template file. The reason I recommend keeping your template in a separate file is because relying on the browser to not execute a script just because it has an unknown attribute value is very fragile and likely to break in future, but for the purpose of this example it&#39;ll do.</p>
<h3><a name="adding-a-new-model"class="anchor" href="#adding-a-new-model"><span class="header-link"></span></a>Adding a new Model</h3>
<p>We have one more View left to look at, this is the HTML <code>&lt;form&gt;</code> element which lets us add a new contact to the list of contacts…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../Models/Contact&#39;</span><span class="p">,</span> <span class="s1">&#39;../Utils/backbone&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">Contact</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">AddContactView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
        <span class="c1">// Built-in object for handling DOM events</span>
        <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
            <span class="s1">&#39;click input[type=submit]&#39;</span><span class="o">:</span> <span class="s1">&#39;add_contact&#39;</span>
        <span class="p">},</span>

        <span class="nx">add_contact</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="c1">// prevent form from submitting</span>

            <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;message-success&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">errors</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="kd">var</span> <span class="nx">fullname</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">fullname</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">age</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">address</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">contact</span><span class="p">;</span>

            <span class="c1">// This regex tests for a first name with at least two characters, </span>
            <span class="c1">// followed by an optional middle name with at least two characters (we use a non-capturing group to save the regex engine some work), </span>
            <span class="c1">// followed by the last name with at least two characters.</span>
            <span class="c1">// This regex allows the first-middle name (and the middle-last) to be joined by a hypen (e.g. Georges St-Pierre or Georges-St Pierre)</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/[\w-]{2,}(?:\s\w{2,})?[\s-]\w{2,}/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">fullname</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;Name was invalid&#39;</span><span class="p">);</span>
            <span class="p">}</span> 

            <span class="c1">// We allow ages from 1-999</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/\d{1,3}/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">age</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;Age was invalid (should be numeric value only)&#39;</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">address</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// Provide a default for the address (mainly because it&#39;s awkward to validate this type of field)</span>
                <span class="nx">address</span> <span class="o">=</span> <span class="s1">&#39;No address provided&#39;</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// If there are any errors then we can&#39;t proceed</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// If the success message (from a previous successful record added) is still visible</span>
                <span class="c1">// then remove it to save from confusing the user.</span>
                <span class="kd">var</span> <span class="nx">success</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">success</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;message-success&#39;</span><span class="p">))</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">success</span><span class="p">);</span> <span class="c1">// this.el provided by Backbone</span>
                <span class="p">}</span>

                <span class="c1">// Display errors</span>
                <span class="nx">alert</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">));</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// There should be an AJAX function to post data to server-side script (for storing in db)</span>
                <span class="c1">// Backbone.Model.save() might be a built-in handler for this, I&#39;m not sure yet?</span>

                <span class="c1">// Create a new Model</span>
                <span class="nx">contact</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contact</span><span class="p">({</span>
                    <span class="nx">id</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(),</span>
                    <span class="nx">name</span><span class="o">:</span> <span class="nx">fullname</span><span class="p">,</span>
                    <span class="nx">age</span><span class="o">:</span> <span class="o">+</span><span class="nx">age</span><span class="p">,</span> <span class="c1">// ensure data is an Integer</span>
                    <span class="nx">address</span><span class="o">:</span> <span class="nx">address</span>
                <span class="p">});</span>

                <span class="c1">// Add the new Model into the Contacts Collection</span>
                <span class="c1">// This should trigger an &#39;add&#39; event which means the record is inserted into the &lt;select&gt;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">contact</span><span class="p">);</span>

                <span class="c1">// Display success message and reset the form</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span> <span class="c1">// this.el provided by Backbone</span>

                <span class="c1">// Don&#39;t want to see a massive long list of &#39;Record added successfully!&#39; messages</span>
                <span class="c1">// So if one is already there then just remove it first</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">message</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="c1">// Create an element to hold our success message</span>
                <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">;</span>
                <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
                <span class="kd">var</span> <span class="nx">txt</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;Record added successfully!&#39;</span><span class="p">);</span>

                <span class="nx">div</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="s1">&#39;message-success&#39;</span><span class="p">;</span>

                <span class="nx">div</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">txt</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span> <span class="c1">// this.el provided by Backbone</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">AddContactView</span><span class="p">;</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>…this does a lot of stuff so lets break it down…</p>
<h3><a name="event-listeners"class="anchor" href="#event-listeners"><span class="header-link"></span></a>Event listeners</h3>
<p>We set-up a listener for the <code>click</code> event for the form&#39;s submit button which calls the <code>add_contact</code> method.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
    <span class="s1">&#39;click input[type=submit]&#39;</span><span class="o">:</span> <span class="s1">&#39;add_contact&#39;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="add-a-new-contact-and-validate-the-user-input"class="anchor" href="#add-a-new-contact-and-validate-the-user-input"><span class="header-link"></span></a>Add a new contact and validate the user input</h3>
<p>We call the <code>add_contact</code> method and immediately call <code>e.preventDefault</code> which stops the form from submitting and thus refreshing the page (which we don&#39;t want to have happen as we&#39;ll lose the state of the page).</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">add_contact</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;message-success&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">errors</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">var</span> <span class="nx">fullname</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">fullname</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">age</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">address</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">contact</span><span class="p">;</span>

    <span class="c1">// This regex tests for a first name with at least two characters, </span>
    <span class="c1">// followed by an optional middle name with at least two characters (we use a non-capturing group to save the regex engine some work), </span>
    <span class="c1">// followed by the last name with at least two characters.</span>
    <span class="c1">// This regex allows the first-middle name (and the middle-last) to be joined by a hypen (e.g. George St-Pierre or Georges-St Pierre)</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/[\w-]{2,}(?:\s\w{2,})?[\s-]\w{2,}/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">fullname</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;Name was invalid&#39;</span><span class="p">);</span>
    <span class="p">}</span> 

    <span class="c1">// We allow ages from 1-999</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/\d{1,3}/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">age</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">errors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;Age was invalid (should be numeric value only)&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">address</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">address</span> <span class="o">=</span> <span class="s1">&#39;No address provided&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="handle-any-invalid-data"class="anchor" href="#handle-any-invalid-data"><span class="header-link"></span></a>Handle any invalid data</h3>
<p>If the success message (from a previous successful record added) is still visible then remove it to save from confusing the user.<br>Then display any errors found.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">success</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">success</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;message-success&#39;</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">success</span><span class="p">);</span> <span class="c1">// this.el provided by Backbone</span>
    <span class="p">}</span>

    <span class="c1">// Display errors</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">errors</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">));</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="add-a-new-contact"class="anchor" href="#add-a-new-contact"><span class="header-link"></span></a>Add a new contact</h3>
<p>This adds the new Model data, then updates the <code>&lt;select&gt;</code> menu, then inserts a success message to let the user know the details were added without issue.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">else</span> <span class="p">{</span>
    <span class="c1">// Create a new Model</span>
    <span class="nx">contact</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Contact</span><span class="p">({</span>
        <span class="nx">id</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(),</span>
        <span class="nx">name</span><span class="o">:</span> <span class="nx">fullname</span><span class="p">,</span>
        <span class="nx">age</span><span class="o">:</span> <span class="o">+</span><span class="nx">age</span><span class="p">,</span> <span class="c1">// ensure data is an Integer</span>
        <span class="nx">address</span><span class="o">:</span> <span class="nx">address</span>
    <span class="p">});</span>

    <span class="c1">// Add the new Model into the Contacts Collection</span>
    <span class="c1">// This should trigger an &#39;add&#39; event which means the record is inserted into the &lt;select&gt;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">contact</span><span class="p">);</span>

    <span class="c1">// Display success message and reset the form</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span> <span class="c1">// this.el provided by Backbone</span>

    <span class="c1">// Don&#39;t want to see a massive long list of &#39;Record added successfully!&#39; messages</span>
    <span class="c1">// So if one is already there then just remove it first</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">message</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Create an element to hold our success message</span>
    <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">txt</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;Record added successfully!&#39;</span><span class="p">);</span>

    <span class="nx">div</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="s1">&#39;message-success&#39;</span><span class="p">;</span>

    <span class="nx">div</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">txt</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span> <span class="c1">// this.el provided by Backbone</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="url-routing"class="anchor" href="#url-routing"><span class="header-link"></span></a>URL Routing</h3>
<p>I&#39;ve not built in any real routing logic into this particular example application, but I&#39;ve included below part of the example from the Backbone website so you at least have an idea of how it works...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;../Utils/backbone&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>

    <span class="kd">var</span> <span class="nx">Routing</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
        <span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
            <span class="s1">&#39;test&#39;</span><span class="o">:</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span>
            <span class="s1">&#39;search/:query/:page&#39;</span><span class="o">:</span> <span class="s1">&#39;search&#39;</span>
        <span class="p">},</span>

        <span class="nx">test</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;User has accessed this app from /test/&#39;</span><span class="p">);</span>
        <span class="p">},</span>

        <span class="nx">search</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">page</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">Routing</span><span class="p">;</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>...what we have here is a new <code>Router</code> instance where we then defines a set of &#39;routes&#39; into your application. The routes we have defined are:</p>
<ul>
<li><p><a href="http://backbone:8888/#test">http://backbone:8888/#test</a><br>If we access our application with this URL we&#39;ll see a log message of <code>User has accessed this app from /test/</code></p>
</li>
<li><p><a href="http://backbone:8888/#search/testing/p7">http://backbone:8888/#search/testing/p7</a><br>If we access our application with this URL we&#39;ll see a log message of <code>testing, p7</code></p>
</li>
</ul>
<p>...to initialise this Router system we need to trigger it via the main script file... </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Router/History API Examples</span>
<span class="cm"> */</span>

<span class="c1">// Create new instance of our Routing Class</span>
<span class="kd">var</span> <span class="nx">routing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Routing</span><span class="p">();</span>

<span class="c1">// Initialize the Router</span>
<span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span> <span class="nx">pushState</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</pre></div>
</code></pre>
<p>Instead of displaying basic log messages we would use this routing feature to load a specific application state.</p>
<p>So for example, if we set-up the relevant route then the user could access the application via a URL like: <a href="http://backbone:8888/#contact/99">http://backbone:8888/#contact/99</a> and that could load the contact details for Model item 99.</p>
<p>You also have the facility to take advantage of HTML5&#39;s <code>pushState</code> which removes the need for URL rewriting but does require extra application logic/work. The default for <code>Backbone.Router</code> is to use hashbangs.</p>
<p>If a user accesses the application with a hashbang URL and the application is set-up to use <code>pushState</code> then Backbone will update the URL from the hashbang to the proper HTML5 variation.</p>
<h2><a name="wrap-up"class="anchor" href="#wrap-up"><span class="header-link"></span></a>Wrap-up</h2>
<p>So this is where we end. </p>
<p>We&#39;ve got our three Views set-up, we have our Model defined and contacts created from it and we created a Collection based on that Model type.</p>
<p>The Views and Models/Collection are tied together and the application is functioning as it should be.</p>
<p>There are lots of things we could do to improve this example, but as a basic example of an MVC style application built using Backbone.js I think it does everything it needs to.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>When you start using Backbone.js the concepts can be a bit confusing, but you quickly learn your way around. </p>
<p>Oddly, trying to <em>explain</em> how to use Backbone.js is harder than actually using it! So I would suggest just start using it.</p>
<p>The main <a href="http://www.backbonejs.org/">Backbone.js website</a> is the best documentation available and is the ideal place to start after here. </p>
<p>Also, the following links are excellent resources to understand the MV* concepts discussed at the start of this post.</p>
<h2><a name="links-"class="anchor" href="#links-"><span class="header-link"></span></a>Links**</h2>
<ul>
<li><a href="http://addyosmani.com/blog/backbone-fundamentals/">Backbone Fundamentals</a></li>
<li><a href="http://addyosmani.com/blog/short-musings-on-javascript-mv-tech-stacks/">Short Musings On JavaScript MV* Tech Stacks</a></li>
<li><a href="http://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/">Understanding MVC And MVP (For JavaScript And Backbone Developers)</a></li>
<li><a href="http://addyosmani.com/blog/understanding-mvvm-a-guide-for-javascript-developers/">Understanding MVVM – A Guide For JavaScript Developers</a></li>
<li><a href="http://addyosmani.com/blog/digesting-javascript-mvc-pattern-abuse-or-evolution/">Digesting JavaScript MVC – Pattern Abuse Or Evolution?</a></li>
<li><a href="http://addyosmani.com/blog/javascript-mvc-jungle/">Journey Through The JavaScript MVC Jungle</a></li>
</ul>
]]></description><link>http://www.integralist.co.uk/posts/mvc-in-javascript-with-backbone-js/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/mvc-in-javascript-with-backbone-js/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Thu, 16 Aug 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Ruby and the Sinatra framework]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 23mins</em></p>
<ul>
<li>Introduction<ul>
<li>DSL vs GPL</li>
</ul>
</li>
<li>GitHub Repository</li>
<li>Sinatra</li>
<li>Hosting</li>
<li>Example<ul>
<li>Requirements</li>
<li>Set-up</li>
<li>Shotgun</li>
<li>Loading pages</li>
<li>Loading templates</li>
<li>Static resources</li>
<li>Handling errors</li>
<li>Performance</li>
<li>Hosting our application</li>
</ul>
</li>
<li>Conclusions</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>In my opinion there&#39;s isn&#39;t enough good information on the web about how to get started building a <a href="http://www.ruby-lang.org/" title="The Ruby Programming Language">Ruby</a> based website (unless you want to use the ever popular <a href="http://rubyonrails.org/" title="Ruby on Rails">Ruby on Rails</a> framework). </p>
<p>But even then, it&#39;s not as straight forward as you&#39;d think (not for someone new to the language or server-side coding in general).</p>
<h3><a name="dsl-vs-gpl"class="anchor" href="#dsl-vs-gpl"><span class="header-link"></span></a>DSL vs GPL</h3>
<p>Before we go any further, it&#39;s worth clarifying the difference between a Domain Specific Language (DSL) and a General Purpose Language (GPL). Languages like JavaScript and PHP are DSL&#39;s** because they were designed to be run within a specific &#39;domain&#39; (and by domain we really mean &#39;environment&#39;) such as the web. But languages like Python and Ruby are GPL&#39;s because they can run within many different domains (e.g. Ruby can run on the web, desktop, command line etc).</p>
<p>If we look at a DSL language such as <a href="http://www.php.net/" title="PHP Hypertext Preprocessor">PHP</a>**: it is very easy to build a site using PHP because you can just input some procedural code, upload the file onto a server that supports PHP (and what server doesn&#39;t nowadays) and that&#39;s all there is to it (!now I&#39;m obviously not suggesting this is good practice - I&#39;m just illustrating the point that if you wanted to <strong>just get started</strong> with PHP then that is all there is to it).</p>
<p>With a GPL such as Ruby it isn&#39;t so straight forward (it&#39;s like the old adage &quot;the question is easy when you know the answer&quot;: Ruby can be easy to use and get set-up when you know what you&#39;re doing, but the fundamentals - in my opinion - are difficult to grasp without a helping hand).</p>
<p><em>**PHP (and JavaScript) were designed to be DSL&#39;s but have since evolved more into GPL&#39;s as they can be run on the desktop as well as the web (and many other environments they weren&#39;t originally designed for).</em></p>
<p>My issue with Ruby is that there is no &quot;just get started&quot; guide for those who want to build a site with it but not have to deal with design patterns such as MVC (maybe not straight away at least). I wouldn&#39;t be surprised if developers new to Ruby felt obliged to use Ruby on Rails because it seems to be the only Ruby related framework out there that gets any real spotlight - and I understand why, because it truly is an all encompassing framework - but I wanted a Ruby site without the bloat of a framework like <a href="http://rubyonrails.org/" title="Ruby on Rails">Ruby on Rails</a>. I didn&#39;t want all the confusing MVC structure and features that I&#39;d never use. Hence why I&#39;m writing this now.</p>
<h2><a name="github-repository"class="anchor" href="#github-repository"><span class="header-link"></span></a>GitHub Repository</h2>
<p>You can find an example repository with all code discussed in this article here: <a href="https://github.com/Integralist/passage"><a href="https://github.com/Integralist/passage">https://github.com/Integralist/passage</a></a></p>
<h2><a name="sinatra"class="anchor" href="#sinatra"><span class="header-link"></span></a>Sinatra</h2>
<p>So, let me begin by introducing you to <a href="http://www.sinatrarb.com/" title="Put this in your pipe and smoke it">Sinatra</a>. Sinatra is a micro web framework for Ruby that although small (much smaller than a framework such as Ruby on Rails) is still surprising complex and powerful (I&#39;d highly recommend reading O&#39;Reilly&#39;s book &quot;<a href="http://shop.oreilly.com/product/0636920019664.do" title="Ruby for the Web">Sinatra: Up and Running</a>&quot;).</p>
<p>Sinatra does require you to do a lot of work off your own back, but at the same time it doesn&#39;t enforce a particular style on you. It&#39;s also very easy to get a site up and running with Sinatra and that is hopefully what I&#39;ll demonstrate here today.</p>
<h2><a name="hosting"class="anchor" href="#hosting"><span class="header-link"></span></a>Hosting</h2>
<p>Now running a site locally on your computer is one thing, but you want to be able to share it with the community and let others use it! Ruby hosting is something I&#39;m still looking into but I have found two popular options for those who aren&#39;t willing to put their money where their mouth is just yet (e.g. developers who are just experimenting with Ruby to see if it&#39;ll work for them). These are:</p>
<ul>
<li><a href="http://www.heroku.com/" title="Cloud Application Platform">Heroku</a></li>
<li><a href="https://openshift.redhat.com/app/" title="Develop and Scale Apps in the Cloud">OpenShift</a></li>
</ul>
<p>OpenShift is a relative newcomer to the hosting arena and currently is free (although paid for plans are likely to be introduced soon).</p>
<p>Heroku is one of the most well known and talked about Ruby web hosts and offers both free and paid for options.</p>
<p>This means we can use either one to host our application for free and so allow us to test their services, and if you discover your latest web creation is doing well and getting lots of traffic then these platforms can scale to meet your needs.</p>
<p>For today we&#39;ll be using the first option Heroku, but we&#39;ll come back to the hosting aspect at the end of this article when we&#39;re ready to actually upload our test application.</p>
<h2><a name="example"class="anchor" href="#example"><span class="header-link"></span></a>Example</h2>
<h3><a name="requirements"class="anchor" href="#requirements"><span class="header-link"></span></a>Requirements</h3>
<p>OK, for us to build our application we&#39;re going to need to install the following software...</p>
<ul>
<li>Ruby (Programming Language - see my <a href="https://github.com/Integralist/Blog-Posts/blob/master/Introduction-to-Ruby.md" title="Introduction to Ruby (a front-end developers perspective)">introduction to the Ruby language</a> for more information on how to do this)</li>
<li>Sinatra (Web Framework)</li>
<li>Bundler (Dependancy Manager)</li>
<li>Shotgun (Utility)</li>
<li>Thin (Web Server)</li>
</ul>
<p>When Ruby is installed it provides you with a tool called &#39;gems&#39;. It is a list of code based projects and each one is referred to as a &#39;gem&#39;. These gems are actually hosted publically on <a href="http://rubygems.org/" title="Your community gem host"><a href="http://rubygems.org/">http://rubygems.org/</a></a>. If you ever need a piece of functionality that you don&#39;t fancy writing yourself then you can search for a &#39;gem&#39; that has already been built and download it, and then use it within your application.</p>
<p>For example, you could be looking for a way to send email from your Ruby application. You would then search the Ruby Gems site (or you can do it via the command line) for a gem that provides this functionality. In this instance you would probably find the gem <code>Pony</code> which does exactly this and can be installed simply by running the command <code>gem install pony</code>.</p>
<p>So, with this new knowledge about <code>gems</code> let us start downloading the above software. Start by opening your CLI (Command Line Interface) tool of choice. I&#39;m on a Macintosh so by default that will be the Terminal app. </p>
<p>All we need to do is to execute the following command <code>gem install name_of_gem</code>...</p>
<ul>
<li>Sinatra: <code>gem install sinatra</code></li>
<li>Bundler: <code>gem install bundler</code></li>
<li>Shotgun: <code>gem install shotgun</code></li>
<li>Thin: <code>gem install thin</code></li>
</ul>
<p>To see what &#39;gems&#39; you have already installed you can run the command <code>gem list --local</code> and this will display something similar to this (which is what I have installed on my own machine currently)…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>bundler <span class="o">(</span>1.1.3<span class="o">)</span>
cgi_multipart_eof_fix <span class="o">(</span>2.5.0<span class="o">)</span>
daemons <span class="o">(</span>1.1.8<span class="o">)</span>
eventmachine <span class="o">(</span>0.12.10<span class="o">)</span>
fastthread <span class="o">(</span>1.0.7<span class="o">)</span>
gem_plugin <span class="o">(</span>0.2.3<span class="o">)</span>
i18n <span class="o">(</span>0.6.0<span class="o">)</span>
mail <span class="o">(</span>2.4.4<span class="o">)</span>
mime-types <span class="o">(</span>1.18<span class="o">)</span>
polyglot <span class="o">(</span>0.3.3<span class="o">)</span>
pony <span class="o">(</span>1.4<span class="o">)</span>
rack <span class="o">(</span>1.4.1<span class="o">)</span>
rack-protection <span class="o">(</span>1.2.0<span class="o">)</span>
rake <span class="o">(</span>0.9.2.2, 0.9.2<span class="o">)</span>
rubygems-bundler <span class="o">(</span>0.3.0, 0.2.8<span class="o">)</span>
sass <span class="o">(</span>3.1.17<span class="o">)</span>
shotgun <span class="o">(</span>0.9<span class="o">)</span>
sinatra <span class="o">(</span>1.3.2<span class="o">)</span>
thin <span class="o">(</span>1.3.1<span class="o">)</span>
tilt <span class="o">(</span>1.3.3<span class="o">)</span>
treetop <span class="o">(</span>1.4.10<span class="o">)</span>
</pre></div>
</code></pre>
<h3><a name="set-up"class="anchor" href="#set-up"><span class="header-link"></span></a>Set-up</h3>
<p>Now we have our software set-up, lets open our programming tool of choice and start writing some code.</p>
<p>First thing we want to do is to create a file that will be our application. So lets go ahead and do that and call it <code>app.rb</code> and lets add the following content to it…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>

<span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
    <span class="s2">&quot;Hello World!&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…now open your CLI, direct yourself to the folder where the above file is located and run <code>ruby app.rb</code>.</p>
<p>You should see a message similar to this…</p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="o">==</span> Sinatra/1.3.2 has taken the stage on 4567 <span class="k">for </span>development with backup from Thin
&gt;&gt; Thin web server <span class="o">(</span>v1.3.1 codename Triple Espresso<span class="o">)</span>
&gt;&gt; Maximum connections <span class="nb">set </span>to 1024
&gt;&gt; Listening on 0.0.0.0:4567, CTRL+C to stop
</pre></div>
</code></pre>
<p>You should now be able to open your web browser and go to: <code>http://localhost:4567/</code> and see the message &quot;Hello World!&quot;</p>
<p>If you can then OK, this is our app, good job!</p>
<p>Lets quickly recap what we&#39;ve got in our file:</p>
<ul>
<li><p><code>#!/usr/bin/env ruby</code><br>The first line tells the interpreter that&#39;s trying to run this file that we should interpret this file as a Ruby application.</p>
</li>
<li><p><code>require &#39;sinatra&#39;</code><br>Here we&#39;re loading in the Sinatra framework ready for us to use.</p>
</li>
<li><p><code>get &#39;/&#39; do &quot;Hello World!&quot; end</code><br>This is Sinatra&#39;s &quot;Classic&quot;** DSL syntax which basically says when someone loads the home page show them the message &quot;Hello World!&quot;.</p>
</li>
</ul>
<p><em>**There are two ways to build Sinatra applications: one is the &quot;Classic&quot; way (which we&#39;ll be doing as it&#39;s much easier to understand) and the other is the &quot;Modular&quot; way which doesn&#39;t use the DSL syntax and taps straight into the base Sinatra Class.</em></p>
<h3><a name="shotgun"class="anchor" href="#shotgun"><span class="header-link"></span></a>Shotgun</h3>
<p>One quick note about running your Ruby application: we used <code>ruby app.rb</code> but for development purposes we want to use our <code>shotgun</code> utility instead. </p>
<p>What <code>shotgun</code> does is it restarts the web server for every HTTP request it receives. This is only useful for local development, you wouldn&#39;t do this on a live server as that would just be wasting resources. The reason we use <code>shotgun</code> is because otherwise if we&#39;re running our application using <code>ruby app.rb</code> and decide to make a tweak to our code then we wouldn&#39;t be able to see the change until we restarted the web server! So we&#39;d have to first stop Sinatra (<code>Ctrl+C</code>) and then start it back up again (<code>ruby app.rb</code>) and that&#39;s a lot of hassle when you&#39;re making changes every few seconds and checking them in your web browser. So <code>shotgun</code> helps workaround this issue (while we&#39;re in development). Just run: <code>shotgun app.rb</code> and it&#39;ll take care of the rest**.</p>
<p><em>**One thing I&#39;ve noticed using <code>shotgun</code> is that it can affect other resources. For example, I was caching resources and for some reason when running <code>shotgun</code> I noticed the resources weren&#39;t being cached - but if I shut it down and run <code>ruby app.rb</code> instead then the resources would show as cached? Apparently it has something to do with the internals of how <code>shotgun</code> works and is something to be aware of if you notice something not working then just try running your Ruby application without <code>shotgun</code>.</em></p>
<p>So at this point you&#39;ve got some Ruby code and you&#39;re able to view it in a web browser. Now lets look further at Sinatra&#39;s DSL syntax...</p>
<h3><a name="loading-pages"class="anchor" href="#loading-pages"><span class="header-link"></span></a>Loading pages</h3>
<p>If you wanted to add a new page called &quot;Projects&quot; that you accessed via <code>http://localhost:4567/projects</code> then all you would need to do is add the following code…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">get</span> <span class="s1">&#39;/projects&#39;</span> <span class="k">do</span>
    <span class="c1"># page content</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>What we&#39;ve done is created a new &#39;route&#39; - a new way for a user to access your application.</p>
<p>Imagine now that this &#39;projects&#39; page had a login form on it that let the user enter a username and password and this form POST&#39;ed the data entered by the user back to the current page...</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;dl&gt;</span>
        <span class="nt">&lt;dt&gt;</span>Name<span class="nt">&lt;/dt&gt;</span>
        <span class="nt">&lt;dd&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;user&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;&lt;/dd&gt;</span>
        <span class="nt">&lt;dt&gt;</span>Email<span class="nt">&lt;/dt&gt;</span>
        <span class="nt">&lt;dd&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;&lt;/dd&gt;</span>
    <span class="nt">&lt;/dl&gt;</span>
    <span class="nt">&lt;p&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Send&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre></div>
</code></pre>
<p>...for you to access the POST&#39;ed data then you would need to add another &#39;route&#39; to handle it. But this time instead of using a <code>get</code> request it would be a <code>post</code> request like so…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">post</span> <span class="s1">&#39;/projects&#39;</span> <span class="k">do</span>
    <span class="c1"># do something with the form fields</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span>
    <span class="n">pass</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…you&#39;ll notice that the form data is passed to the block using special parameters called <code>params</code>. So in the above example we had two form fields with the names <code>user</code> and <code>password</code> and we&#39;re assigning their values to the variables <code>user</code> and <code>pass</code> where we can now do validation on the values.</p>
<p>You can also use the URL path as a way for the user to interact with your application. For example if you had a page which added two numbers together then it could be handled directly via the URL as follows…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">get</span> <span class="s1">&#39;/add/:a/:b&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">to_i</span> <span class="o">+</span> <span class="n">b</span><span class="o">.</span><span class="n">to_i</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…this would display on the page the result of adding <code>a</code> and <code>b</code> together. So if I went to the URL <code>http://localhost:4567/add/2/2</code> then this would display <code>4</code> as that would be the result of <code>2 + 2</code> (which was the two parameters I specified within the URL).</p>
<h3><a name="loading-templates"class="anchor" href="#loading-templates"><span class="header-link"></span></a>Loading templates</h3>
<p>Now at the moment we&#39;re using the fact that with Ruby, the last expression inside a function is what gets returned from that function. These calls to <code>get</code> and <code>post</code> are actually function calls hidden behind an abstraction. So in my original example we were displaying &quot;Hello World!&quot; to the page because that was the last expression inside the <code>get</code> call.</p>
<p>But we ideally want to be displaying HTML to the user! To do this we&#39;ll use &#39;templates&#39;.</p>
<p>Note that templates can be inlined inside your Ruby code, but personally I prefer them to be external because I think that&#39;s a lot cleaner and abides by the &#39;separate of concerns&#39; rule (which I like to keep to whenever possible).</p>
<p>Our code is going to start looking something like this…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
    <span class="n">erb</span> <span class="ss">:home</span>
<span class="k">end</span>

<span class="n">get</span> <span class="s1">&#39;/projects&#39;</span> <span class="k">do</span>
    <span class="n">erb</span> <span class="ss">:projects</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…what this is doing is using ERB (which stands for &#39;Embedded Ruby&#39;) and is the standard templating language available in Ruby - although there are many templating languages you could load and use in its place. What we&#39;ve said here in our code is load the <code>:home</code> template (.erb file) when on the home page, and load the <code>:project</code> template (.erb file) when on the projects page.</p>
<p>By default Sinatra looks for templates inside of a root folder called <code>views</code> (you can change this if you want but I didn&#39;t bother as <code>views</code> made the most sense for a folder containing &#39;templates&#39;).</p>
<p>Inside our <code>views</code> folder we&#39;ll need to create two files then: <code>home.erb</code> and <code>projects.erb</code> and they&#39;ll look a little bit like this…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="c">&lt;!-- home.erb --&gt;</span>
<span class="nt">&lt;p&gt;</span>HTML content for my home page<span class="nt">&lt;/p&gt;</span>

<span class="c">&lt;!-- projects.erb --&gt;</span>
<span class="nt">&lt;p&gt;</span>HTML content for my projects page<span class="nt">&lt;/p&gt;</span>
</pre></div>
</code></pre>
<p>Now this doesn&#39;t look like much of a HTML page, and that&#39;s because I&#39;m using (or I&#39;m going to be using very shortly) what Sinatra refers to as a main layout file and this &#39;layout&#39; file will contain the rest of my HTML code and will be wrapped around my above templates. </p>
<p>What this means is I can have a &#39;master&#39; HTML file that stays the same for every page and I can load my templates into that master layout. This is done by creating a <code>layout.erb</code> file (also within the <code>views</code> folder). If Sinatra finds a <code>layout.erb</code> file it will automatically use it as a master layout for all your templates.</p>
<p>But if I didn&#39;t create a <code>layout.erb</code> file then I could have modified my templates above to include a full set of HTML like so…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="c">&lt;!-- home.erb --&gt;</span>
<span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;title&gt;</span>My Page<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
       <span class="nt">&lt;p&gt;</span>HTML content for my home page<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</code></pre>
<p>…but I prefer having a master layout to handle this stuff, so lets create a <code>layout.erb</code> file (within the <code>views</code> folder) and add the following content to it…</p>
<pre><code class="lang-erb"><div class="highlight"><pre><span class="x">&lt;!-- layout.erb --&gt;</span>
<span class="x">&lt;!doctype html&gt;</span>
<span class="x">&lt;html&gt;</span>
<span class="x">    &lt;head&gt;</span>
<span class="x">        &lt;meta charset=&quot;utf-8&quot;&gt;</span>
<span class="x">        &lt;title&gt;My Page&lt;/title&gt;</span>
<span class="x">    &lt;/head&gt;</span>
<span class="x">    &lt;body&gt;</span>
<span class="x">       </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    &lt;/body&gt;</span>
<span class="x">&lt;/html&gt;</span>
</pre></div>
</code></pre>
<p>…you should notice the Ruby tags <code>&lt;% %&gt;</code> which are used to place Ruby code inside of them. Here we&#39;re telling Ruby to <code>yield</code> to the template file we&#39;re loading. So for example when a user accesses the home page and we load <code>home.erb</code>, we&#39;re effectively loading the <code>layout.erb</code> file and telling it that when it reaches the <code>body</code> tag we want it to load in the content from the <code>home.erb</code> file into it so it will end up rendering in the web browser like this…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;title&gt;</span>My Page<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
       <span class="nt">&lt;p&gt;</span>HTML content for my home page<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</code></pre>
<p>If you want to load a different master layout for a specific page then you can do that also. For example I have a page that I display to users of Internet Explorer version 7 or lower. The master layout for that page is a lot simpler than the other pages of my site in that it loads different stylesheets specifically for this IE page. So in my application file I have the following…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">get</span> <span class="s1">&#39;/internet-explorer&#39;</span> <span class="k">do</span>
    <span class="n">erb</span> <span class="ss">:ie</span><span class="p">,</span> <span class="ss">:layout</span> <span class="o">=&gt;</span> <span class="ss">:layout_ie</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…and what you can see here is that I&#39;m not only telling Sinatra to load the <code>ie.erb</code> file but to also use the <code>layout_ie.erb</code> file as the master layout file for this page rather than the default <code>layout.erb</code>.</p>
<p>One other thing worth mentioning is that you can pass variables from your route block into your template using class instance variables…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">post</span> <span class="s1">&#39;/contact&#39;</span> <span class="k">do</span>
    <span class="n">redirect</span> <span class="s2">&quot;/contact-error/name&quot;</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">].</span><span class="n">empty?</span>
    <span class="n">redirect</span> <span class="s2">&quot;/contact-error/email&quot;</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">].</span><span class="n">empty?</span>
    <span class="n">redirect</span> <span class="s2">&quot;/contact-error/message&quot;</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">].</span><span class="n">empty?</span>

    <span class="n">erb</span> <span class="ss">:contact_success</span>
<span class="k">end</span>

<span class="n">get</span> <span class="s1">&#39;/contact-error/:field&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span>
    <span class="vi">@field</span> <span class="o">=</span> <span class="n">field</span>
    <span class="n">erb</span> <span class="ss">:contact_error</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…in the above example when a user makes an error on my contact form I redirect them to a page that shows them what field they made an error on. In my template file I have…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;p&gt;</span>Sorry there was an error with your form submission. Seems you didn&#39;t fill in the <span class="err">&lt;</span>%= @field %&gt; field.<span class="nt">&lt;/p&gt;</span>
</pre></div>
</code></pre>
<p>…notice I picked up the field from the URL and stored it in a class instance variable and used that variable within my template.</p>
<h3><a name="static-resources"class="anchor" href="#static-resources"><span class="header-link"></span></a>Static resources</h3>
<p>OK, the next thing to be aware of is that Sinatra serves up ALL static resources from a folder called <code>public</code> (again you can change this but I&#39;m happy using it - as the name is perfectly logical already).</p>
<p>What this means is that if you have a file path like: <code>/path/to/file</code> then for that to work you need to have the folders/files within the root <code>public</code> folder otherwise Sinatra can&#39;t locate them. It DOESN&#39;T mean you have to change all your paths to <code>/public/path/to/file</code>. You keep the path the same as it is already but you just move the files/folders inside of a root folder called <code>public</code>.</p>
<p>So for example in all my projects I have my JavaScript files in the following directory…</p>
<p><code>Assets/Scripts/</code></p>
<p>…and all my CSS in the following directory…</p>
<p><code>Assets/Styles/</code></p>
<p>…all I need to do is create an <code>Assets</code> folder within the <code>public</code> folder. Within that I then have the <code>Assets</code> folder, and inside of that is my <code>Scripts</code> and <code>Styles</code> folders which hold the relevant files.</p>
<p>If this sounds a bit confusing then have a look at the GitHub repo linked at the top of this article to see what I&#39;m talking about.</p>
<h3><a name="handling-errors"class="anchor" href="#handling-errors"><span class="header-link"></span></a>Handling errors</h3>
<p>If the user tries to access a page that doesn&#39;t exist then you can direct them to your own <code>404 error</code> page by using the following route…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">not_found</span> <span class="k">do</span>
    <span class="n">erb</span> <span class="ss">:notfound</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…as you can see I&#39;m loading a &#39;notfound.erb&#39; template for the content. This will get called anytime an unknown URL is specified by the user.</p>
<p>One thing you might not want to have happen is if someone types in <code>http://localhost:4567/projects/</code> instead of <code>http://localhost:4567/projects</code> (notice the extra forward-slash at the end of the first example) then that is considered a different &#39;route&#39; and wont be recognised by Sinatra and so the user is directed to the &#39;not found&#39; route. </p>
<p>To fix this you can do the following…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">before</span> <span class="k">do</span>
    <span class="n">request</span><span class="o">.</span><span class="n">path_info</span><span class="o">.</span><span class="n">sub!</span> <span class="sr">%r{/$}</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…the above code block is referred to as a &#39;filter&#39; block and it is executed before every HTTP request. </p>
<p>So what this does is execute <code>request.path_info.sub! %r{/$}, &#39;&#39;</code> <em>before</em> every HTTP request. This code uses a Regular Expression to find the last forward-slash in the path and then removes it if it finds one. Which means it doesn&#39;t matter if the user puts an extra slash at the end of the URL.</p>
<p>Note: there is also a <code>after</code> filter block as well for doing tidy up work (although I&#39;ve not had any reason to use it - yet).</p>
<p>If there is an actual error then you can use…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">error</span> <span class="k">do</span>
    <span class="n">erb</span> <span class="ss">:error</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>In a development environment Sinatra tries to be helpful by displaying very detailed error messages. But you may find this overrides your custom error page which you would want to show to a user. So if you want to just test your error page is working correct before you &#39;go live&#39; then simply add <code>disable :show_exceptions</code> to some where near the top of your application file and this will mean the detailed error stack is no longer shown when you encounter an error during development and so you&#39;ll end up seeing what your users will see in the live environment.</p>
<p>Also, within your <code>error.erb</code> template file you can access the error using the environment variable <code>sinatra.error</code>…</p>
<pre><code class="lang-erb"><div class="highlight"><pre><span class="x">&lt;p&gt;Sorry there was the following error: &lt;strong class=&quot;error&quot;&gt;</span><span class="cp">&lt;%=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;sinatra.error&quot;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">&lt;/strong&gt;&lt;/p&gt;</span>
</pre></div>
</code></pre>
<h3><a name="performance"class="anchor" href="#performance"><span class="header-link"></span></a>Performance</h3>
<p>The performance of your application is very important, and specifically for a web application you want to make sure that all resources are sent to the user as quickly as possible.</p>
<p>Here are some things you can do to help improve the performance of your web application...</p>
<ol>
<li>Cache static resources</li>
<li>Use the <code>Thin</code> Web Server</li>
<li>GZIP all content</li>
</ol>
<h3><a name="cache-static-resources"class="anchor" href="#cache-static-resources"><span class="header-link"></span></a>Cache static resources</h3>
<p>We set the cache control for static resources to approximately 1 month</p>
<p><code>set :static_cache_control, [:public, :max_age =&gt; 2678400]</code></p>
<h3><a name="use-the-thin-web-server"class="anchor" href="#use-the-thin-web-server"><span class="header-link"></span></a>Use the <code>Thin</code> Web Server</h3>
<p>You can also tell Sinatra to use the <code>Thin</code> server rather than the default <code>WEBrick</code> server if it&#39;s available (<code>Thin</code> is a supremely better performing web server so do please use it!)</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="c1"># We specify which server we want to use (Thin is tried first and then failing that WEBrick)</span>
<span class="n">set</span> <span class="ss">:server</span><span class="p">,</span> <span class="sx">%w[thin webrick]</span>
</pre></div>
</code></pre>
<h3><a name="gzip-all-content"class="anchor" href="#gzip-all-content"><span class="header-link"></span></a>GZIP all content</h3>
<p>We can also have the web server automatically GZIP all our static resources (which can reduce the file size of a resource by up to 70%!) such as HTML content, JavaScript files, CSS files by using one line of Ruby code…</p>
<p><code>use Rack::Deflater</code></p>
<p>…this uses the &#39;Rack&#39; middleware application (Rack is what sits behind Sinatra and is the actual HTTP web server interface), but Sinatra hides all of that behind the DSL syntax of <code>get</code> and <code>post</code> calls (nice huh).</p>
<h3><a name="hosting-our-application"class="anchor" href="#hosting-our-application"><span class="header-link"></span></a>Hosting our application</h3>
<p>Right. Let&#39;s get our application uploaded shall we.</p>
<p>This is going to be short and quick…</p>
<ol>
<li>Set-up account (<a href="http://www.heroku.com/" title="Cloud Application Platform">heroku.com</a>)</li>
<li>Install toolbelt (<a href="http://toolbelt.heroku.com/" title="Everything you need to get started using heroku">toolbelt.heroku.com</a>)</li>
<li>Open your Command Line Interface (CLI) and enter:<ul>
<li><code>heroku login</code> (follow on screen instructions)</li>
<li>You may want to add additional SSH keys, if you do use: <code>heroku keys:add</code></li>
<li>To create an app on heroku use: <code>heroku create --stack cedar</code> (you can also do: <code>heroku create yourappname --stack cedar</code>) - <code>cedar</code> will shortly be the <em>default</em> web stack on heroku but for the time being it&#39;s worth including it in the command <code>--stack cedar</code> otherwise your app will be created on an older web stack which isn&#39;t as good.</li>
</ul>
</li>
<li><p>Create a <code>config.ru</code> file and add the following content:  </p>
<pre><code><div class="highlight"><pre> <span class="nx">require</span> <span class="s1">&#39;app&#39;</span> <span class="err">#</span> <span class="nx">where</span> <span class="nx">app</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">name</span> <span class="nx">of</span> <span class="nx">your</span> <span class="nx">main</span> <span class="nx">file</span> <span class="nx">that</span> <span class="nx">initializes</span> <span class="nx">your</span> <span class="nx">web</span> <span class="nx">application</span>
 <span class="nx">run</span> <span class="nx">Sinatra</span><span class="o">::</span><span class="nx">Application</span>
</pre></div>
</code></pre>
</li>
<li><p>Create a Gemfile file (no file extension) and add the content:  </p>
</li>
</ol>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.2&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;thin&#39;</span><span class="p">,</span> <span class="s1">&#39;1.3.1&#39;</span>
</pre></div>
</code></pre>
<ol>
<li>Go back to your CLI and enter:<ul>
<li><code>bundle install</code> which will create a <code>Gemfile.lock</code> file specifying ALL the dependancies needed for your app to run (you shouldn&#39;t need to manually create your own Gemfile - as I&#39;ve told you to do in step 5. - but just in case <code>bundle install</code> doesn&#39;t work for you then you can at least do it manually).</li>
<li>Create a Procfile (no file extension) and add the content: <code>web: bundle exec ruby app.rb -p $PORT</code><br> e.g.<br> <code>touch Procfile</code>,<br> <code>echo web: bundle exec ruby app.rb -p $PORT &gt; Procfile</code></li>
<li>Commit your files using Git (if you don&#39;t know how to use Git then <a href="https://github.com/Integralist/Blog-Posts/blob/master/How-to-use-Git-and-GitHub.md" title="How to use Git and GitHub">read this introduction</a>)</li>
<li>If you&#39;ve not done this already then create a <code>remote</code> for heroku: <code>git remote add heroku git@heroku.com:xxxxx.git</code> (when you created your app earlier heroku would have generated a remote URL for you to use)</li>
<li><code>git push heroku master</code></li>
<li><code>heroku open</code> will open your default browser to the relevant app URL heroku has given you (they are normally pretty crazy looking URL&#39;s - but you can at some later stage - if you want - register a proper domain and point it to the app on heroku&#39;s server so you don&#39;t have to give out a dodgy long URL to your users)</li>
</ul>
</li>
</ol>
<p>Hopefully if you followed along, and had no errors, then you should see your new app online and hosted by heroku!</p>
<h2><a name="conclusions"class="anchor" href="#conclusions"><span class="header-link"></span></a>Conclusions</h2>
<p>Well, there you have it. Building a website using Sinatra and Ruby, and actually getting it hosted online.</p>
<p>It has been a bit of a whirlwind pace we&#39;ve set here, going through lots of different concepts such as performance tricks and handling errors, through to loading template files etc. But hopefully it wasn&#39;t too fast paced, and you managed to utilise this information to get you up and running. </p>
<p>I&#39;m actually writing this at record pace at home, late at night - feeling very tired, so if this article doesn&#39;t read right, or you think it needs improving then please get in contact and let me know what you think would help improve it (and thus help other people better understand the concepts)</p>
<p>Thanks.</p>
]]></description><link>http://www.integralist.co.uk/posts/ruby-and-the-sinatra-framework/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/ruby-and-the-sinatra-framework/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 22 Jul 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building a game with HTML5 Canvas]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 39mins</em></p>
<ul>
<li>Introduction</li>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript<ul>
<li>requestAnimationFrame</li>
<li>Variables</li>
<li>Events alias&#39;</li>
<li>Image loading</li>
<li>Clearing the Canvas</li>
<li>Load image onto Canvas</li>
<li>Initialise Game</li>
<li>User interaction</li>
<li>Automatic puzzle piece animation</li>
<li>Drag and Drop interaction</li>
<li>Determining the end of game</li>
</ul>
</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>I&#39;ve been playing around with the <a href="https://developer.mozilla.org/en/HTML/Canvas">Canvas</a> element for a little bit now, using it for more realistic features such as manipulating user uploaded images (using <a href="http://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html">XHR2</a>). For example, within a custom Content Management System where the user controls the images that appear on their website we would normally let the server handle the manipulation of the uploaded image using an external library such as <a href="http://www.imagemagick.org/">ImageMagick</a>, but now we handle this all on the client-side using Canvas.</p>
<p>I&#39;ve also played with the raw pixel data in images to apply filters and effect the colours of an image, which is interesting (although I have no actual use for that sort of manipulation at the present time).</p>
<p>So I thought I would dive a little bit further into the Canvas element and use it for building a game (as that&#39;s what most people are using it for). Nothing fancy, just the classic &quot;sliding image puzzle&quot; game we have all played at some point.  If you&#39;ve never played this game: the idea is to take an image and to split it into pieces. You then jumble up the pieces and remove one piece so there is an empty space. You then have to re-assemble the original image by sliding the pieces around but only able to move one piece at a time via the empty space that is available to you.</p>
<p>The game works on both desktop and mobile devices (e.g. &#39;touch&#39; based devices).</p>
<p>To see an example of the game then go to my <a href="https://github.com/Integralist/HTML5-Image-Slider-Game/">GitHub repository here</a> and run the HTML file in a browser that supports the HTML5 Canvas element.</p>
<p>In this article we&#39;re going to discuss the process I went through to build this game in more detail. The first two sections (HTML, CSS) are brief because the main chunk of work is residing inside the JavaScript so for that section we&#39;re going to step through each section of the code and explain what&#39;s happening.</p>
<h2><a name="html"class="anchor" href="#html"><span class="header-link"></span></a>HTML</h2>
<p>The HTML is pretty straight forward, it consists of a <code>meta</code> tag which tells the device to set the width to be 760px wide (this is so the game fits the full width of the device) and also specifies that the user cannot resize the content - the reason being is we want to ensure the game is always fitting the screen. After this we have a link to our style sheet - note: there are some declarations in our CSS which are included specifically to help with &#39;touch&#39; based devices (e.g. devices such as smart phones which don&#39;t utilise a &#39;mouse&#39; to interact with the content) - along with a single <code>canvas</code> element (which we could have created via JavaScript but I decided I preferred to have the element coded into the HTML). We also have a checkbox on the page which lets the user make the game a little easier by allowing them to move certain &#39;illegal&#39; puzzle pieces, and finally we have the <code>script</code> element which obviously is pointing to our JavaScript file which creates the game… </p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">dir=</span><span class="s">&quot;ltr&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=760, user-scalable=0&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;title&gt;</span>HTML5 Slider Image Game<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;Assets/Styles/base.css&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;game&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;allow&quot;</span><span class="nt">&gt;</span>Make game easier by allowing &#39;drag and drop&#39; of invalid pieces: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">name=</span><span class="s">&quot;allow&quot;</span> <span class="na">id=</span><span class="s">&quot;allow&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;Assets/Scripts/game.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</code></pre>
<h2><a name="css"class="anchor" href="#css"><span class="header-link"></span></a>CSS</h2>
<p>The CSS is also pretty straight forward - with the exception of one part we&#39;ll come to in a moment - the main chunk of this style sheet is simply setting generic styles and normalising certain elements. </p>
<p>You&#39;ll notice though a rule called <code>.drag-canvas</code> which will be applied to another <code>canvas</code> element which you haven&#39;t seen yet as it&#39;s not part of the HTML, it is instead created via JavaScript (I&#39;ll explain what this 2nd <code>canvas</code> is for later when we start discussing the JavaScript side of the project).</p>
<p>The <code>canvas</code> selector sets a rule which has some specific declarations (along with appropriate vendor prefixes) that are applied to any <code>canvas</code> element found in the page. The declaration we&#39;re applying is <a href="https://developer.mozilla.org/en/CSS/-moz-user-select"><code>user-select</code></a> which controls the selection a user makes on the content. You&#39;ll see we&#39;ve set this to <code>none</code>. What this does is it prevents any iOS devices (and potentially other devices - hence the use of the vendor prefixes) from showing an additional option which lets the user carry out an action (e.g. &#39;copy&#39;). The reason I want to prevent this is because in our game we also want users to be able to &#39;drag and drop&#39; puzzle pieces (rather than just letting them &#39;click&#39; or &#39;touch&#39; to move a puzzle piece) and the way we do this (again, we&#39;ll go into this in more detail later) is by checking how long the user holds their &#39;touch&#39; down on the puzzle piece. But if you have ever used an iOS device you&#39;ll know that if you hold your touch down for more than a second you&#39;ll see a context menu pop up asking you to either &#39;Select, Select All, Paste&#39; or &#39;Copy&#39; and it&#39;s these options we want to disable while the user is playing our game.</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nt">body</span> <span class="p">{</span>
    <span class="k">font-family</span><span class="o">:</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span> <span class="c">/* this sets 1em to equal approximately 16px */</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span><span class="o">,</span> <span class="nt">p</span> <span class="p">{</span>
    <span class="k">line-height</span><span class="o">:</span> <span class="m">1.3em</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">1em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">h1</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
    <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.drag-canvas</span> <span class="p">{</span>
    <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
    <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">canvas</span> <span class="p">{</span>
    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="c">/* prevents the &#39;copy&#39; option &gt; http://www.bernskiold.com/2011/02/02/tips-and-tricks-for-ios-web-development/ */</span>
       <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
            <span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.allow</span> <span class="p">{</span>
    <span class="k">margin-top</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
    <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">760px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h2><a name="javascript"class="anchor" href="#javascript"><span class="header-link"></span></a>JavaScript</h2>
<p>Now the JavaScript is where it gets interesting…  </p>
<h3><a name="requestanimationframe"class="anchor" href="#requestanimationframe"><span class="header-link"></span></a>requestAnimationFrame</h3>
<p>The first thing you&#39;ll notice is a polyfill for <a href="https://developer.mozilla.org/en/DOM/window.requestAnimationFrame">requestAnimationFrame</a>. If you don&#39;t know what it is, <code>requestAnimationFrame</code> is a more efficient alternative for <code>setInterval</code>and <code>setTimeout</code>. It&#39;s actually based more on <code>setTimeout</code> than <code>setInterval</code>, and what I mean by this is your specified function to be executed must itself call <code>requestAnimationFrame</code> (unless you want the animation to stop).</p>
<p>The polyfill I&#39;m using I&#39;ve modified slightly so that it creates a property of the global object whose value is a boolean which indicates if it is supported by the user&#39;s browser or not. The reason I store this result is because later in the script when I specify a &#39;step amount&#39; (e.g. how far I want the puzzle piece to move on each iteration) I found that I got better performance setting a higher step amount for browsers that support <code>requestAnimationFrame</code> so I want to change the step amount depending on if I&#39;m using <code>setInterval</code> or not.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Polyfill for requestAnimationFrame which I&#39;ve modified from Paul Irish&#39;s original</span>
<span class="c1">// See: http://paulirish.com/2011/requestanimationframe-for-smart-animating/</span>
<span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">lastTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nx">vendors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ms&#39;</span><span class="p">,</span> <span class="s1">&#39;moz&#39;</span><span class="p">,</span> <span class="s1">&#39;webkit&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">];</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">vendors</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">global</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">;</span> <span class="o">++</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">global</span><span class="p">.</span><span class="nx">requestAnimationFrame</span> <span class="o">=</span> <span class="nx">global</span><span class="p">[</span><span class="nx">vendors</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;RequestAnimationFrame&#39;</span><span class="p">];</span>
        <span class="nx">global</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span> <span class="o">=</span> <span class="nx">global</span><span class="p">[</span><span class="nx">vendors</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;CancelAnimationFrame&#39;</span><span class="p">]</span> <span class="o">||</span> <span class="nx">global</span><span class="p">[</span><span class="nx">vendors</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;CancelRequestAnimationFrame&#39;</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="nx">global</span><span class="p">.</span><span class="nx">nativeRAF</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">global</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">;</span> <span class="c1">// store reference to whether it was natively supported or not (later we need to change increment value depending on if setInterval or requestAnimationFrame is used)</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">global</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">global</span><span class="p">.</span><span class="nx">requestAnimationFrame</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>

            <span class="kd">var</span> <span class="nx">currTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">(),</span>
                <span class="nx">timeToCall</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">16</span> <span class="o">-</span> <span class="p">(</span><span class="nx">currTime</span> <span class="o">-</span> <span class="nx">lastTime</span><span class="p">)),</span>
                <span class="nx">id</span> <span class="o">=</span> <span class="nx">global</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> 
                    <span class="nx">callback</span><span class="p">(</span><span class="nx">currTime</span> <span class="o">+</span> <span class="nx">timeToCall</span><span class="p">);</span>
                <span class="p">},</span> <span class="nx">timeToCall</span><span class="p">);</span>

            <span class="nx">lastTime</span> <span class="o">=</span> <span class="nx">currTime</span> <span class="o">+</span> <span class="nx">timeToCall</span><span class="p">;</span>

            <span class="k">return</span> <span class="nx">id</span><span class="p">;</span>

        <span class="p">};</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">global</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">global</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}(</span><span class="k">this</span><span class="p">));</span>
</pre></div>
</code></pre>
<p>Following this is our main script which we&#39;ve wrapped in an &#39;immediately invoked function expression&#39; (or <a href="benalman.com/news/2010/11/immediately-invoked-function-expression/">IIFE</a> for short). You&#39;ll see that we&#39;re passing in the value <code>this</code> which in this context is the global object (i.e. <code>Window</code>)… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// REST OF OUR CODE</span>
<span class="p">}(</span><span class="k">this</span><span class="p">));</span>
</pre></div>
</code></pre>
<h3><a name="variables"class="anchor" href="#variables"><span class="header-link"></span></a>Variables</h3>
<p>Now, if you look at my <a href="https://github.com/Integralist/Style-Guides/blob/master/JavaScript%20Style%20Guide.md#javascript-style-guide">JavaScript Style Guide</a> you&#39;ll see that I like to set-up the structure of my code as follows… </p>
<ul>
<li>Variables</li>
<li>Supporting functions</li>
<li>Code</li>
</ul>
<p>…and this structure applies to all executing contexts (e.g. sub functions also have the same structure). So looking at our code you can see we&#39;ve got a whole ton of variables specified which are used throughout the program. The reason for this is because of how the JavaScript interpreter handles variables when the program starts, which is to invisibly move variable declarations to the top of their containing scope. So to avoid confusion I try (wherever possible) to keep my variable declarations at the top… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Following variables are related to the creation of the canvas&#39; and specific configuration</span>
    <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">global</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
        <span class="nx">canvas</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;game&quot;</span><span class="p">),</span>
        <span class="nx">context</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span>
        <span class="nx">dragCanvas</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">),</span>
        <span class="nx">dragCanvasContext</span> <span class="o">=</span> <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span>
        <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">(),</span>
        <span class="nx">canvas_height</span><span class="p">,</span>
        <span class="nx">canvas_width</span><span class="p">,</span>
        <span class="nx">canvas_grid</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="c1">// e.g. 4 cols x 4 rows</span>
        <span class="nx">piece_height</span><span class="p">,</span>
        <span class="nx">piece_width</span><span class="p">,</span>
        <span class="nx">opening_message</span> <span class="o">=</span> <span class="s2">&quot;Start Game&quot;</span><span class="p">,</span>
        <span class="nx">text_dimensions</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">measureText</span><span class="p">(</span><span class="nx">opening_message</span><span class="p">),</span>
    <span class="c1">// Following variables are related to the puzzle pieces</span>
        <span class="nx">puzzle_squares</span> <span class="o">=</span> <span class="p">[],</span>
        <span class="nx">puzzle_randomised</span><span class="p">,</span>
        <span class="nx">empty_space</span><span class="p">,</span>
        <span class="nx">current_piece</span><span class="p">,</span>
        <span class="nx">removed_piece</span><span class="p">,</span>
        <span class="nx">random_number</span><span class="p">,</span>
    <span class="c1">// Following variables are related to moving puzzle pieces around</span>
        <span class="nx">drag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">eventObject</span><span class="p">,</span>
        <span class="nx">eventsMap</span>  <span class="o">=</span> <span class="p">{</span>
            <span class="nx">select</span><span class="o">:</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span>
            <span class="nx">down</span><span class="o">:</span> <span class="s2">&quot;mousedown&quot;</span><span class="p">,</span>
            <span class="nx">up</span><span class="o">:</span> <span class="s2">&quot;mouseup&quot;</span><span class="p">,</span>
            <span class="nx">move</span><span class="o">:</span> <span class="s2">&quot;mousemove&quot;</span>
        <span class="p">},</span>
        <span class="nx">touchSupported</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">event_moving</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">upTriggered</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">wasJustDragging</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">allow_input</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;allow&quot;</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>…looking at these variables you can see that we&#39;re not only getting a reference to the <code>canvas</code> element in the page but we&#39;re also creating another <code>canvas</code> element. The purpose of having two <code>canvas</code>&#39;es is that the one found inside the HTML will be used for holding the puzzle pieces. The second <code>canvas</code> (created via JavaScript) is used for handling event listeners and also handling the &#39;drag and drop&#39; of individual puzzle pieces.</p>
<h3><a name="events-alias-"class="anchor" href="#events-alias-"><span class="header-link"></span></a>Events alias&#39;</h3>
<p>You&#39;ll also see that we&#39;ve created an object called <code>eventsMap</code> which we&#39;re using to map our own events (such as &#39;select&#39;, &#39;down&#39;, &#39;up&#39;, &#39;move&#39;) to the relevant mouse events available. This is because it makes it easier for us to swap to using touch events if they are supported by the users browser. So for example, just after setting up these variables we do a check for whether touch events are supported and if they are we swap the mouse specific values for touch specific values… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="s2">&quot;ontouchstart&quot;</span> <span class="k">in</span> <span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">touchSupported</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nx">eventsMap</span>  <span class="o">=</span> <span class="p">{</span>
        <span class="nx">select</span><span class="o">:</span> <span class="s2">&quot;touchstart&quot;</span><span class="p">,</span>
        <span class="nx">down</span><span class="o">:</span> <span class="s2">&quot;touchstart&quot;</span><span class="p">,</span>
        <span class="nx">up</span><span class="o">:</span> <span class="s2">&quot;touchend&quot;</span><span class="p">,</span>
        <span class="nx">move</span><span class="o">:</span> <span class="s2">&quot;touchmove&quot;</span>
    <span class="p">};</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="image-loading"class="anchor" href="#image-loading"><span class="header-link"></span></a>Image loading</h3>
<p>You&#39;ll also see that within the variable declarations we&#39;re creating an <code>Image</code> object and after the variables we now set a <code>src</code> value which points to the image we&#39;re going to use for our game. We then set an <code>onload</code> event listener to be triggered when the image has loaded. </p>
<p>Once the image is loaded we know we can set-up the dimensions of the <code>canvas</code> and the puzzle pieces and also get the &#39;drag&#39; <code>canvas</code> placed on top of the main <code>canvas</code>. You&#39;ll notice that we&#39;ve set the &#39;drag&#39; <code>canvas</code> to have <code>globalAlpha = .9;</code> which basically makes the top <code>canvas</code> slightly opaque/transparent (e.g. if a puzzle piece was drawn on the &#39;drag&#39; <code>canvas</code> then you would be able to see through the puzzle piece to the bottom <code>canvas</code>).</p>
<p>We then finally call <code>loadImageOntoCanvas</code> to load the image on to the main <code>canvas</code>… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;Assets/Images/photo.jpg&quot;</span><span class="p">;</span>    
<span class="nx">img</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">piece_height</span> <span class="o">=</span> <span class="o">~~</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="nx">canvas_grid</span><span class="p">);</span>
    <span class="nx">piece_width</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">/</span> <span class="nx">canvas_grid</span><span class="p">;</span>
    <span class="nx">canvas_height</span> <span class="o">=</span> <span class="nx">piece_height</span> <span class="o">*</span> <span class="nx">canvas_grid</span><span class="p">;</span>
    <span class="nx">canvas_width</span> <span class="o">=</span> <span class="nx">piece_width</span> <span class="o">*</span> <span class="nx">canvas_grid</span><span class="p">;</span>
    <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">canvas_height</span><span class="p">;</span>
    <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">canvas_width</span><span class="p">;</span>

    <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">&quot;drag-canvas&quot;</span><span class="p">;</span>
    <span class="nx">dragCanvasContext</span><span class="p">.</span><span class="nx">globalAlpha</span> <span class="o">=</span> <span class="p">.</span><span class="mi">9</span><span class="p">;</span>
    <span class="nx">doc</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dragCanvas</span><span class="p">);</span>

    <span class="nx">loadImageOntoCanvas</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>…one other small note is the use of the bitwise operator <code>~~</code> which you can see I&#39;ve used inside the <code>onload</code> listener: <code>piece_height = ~~(this.height / canvas_grid);</code>. What this does is functionally equivalent to <code>Math.floor</code> and is a technique I discovered from <a href="http://james.padolsey.com/javascript/double-bitwise-not/">James Padolsey</a>.</p>
<h3><a name="clearing-the-canvas"class="anchor" href="#clearing-the-canvas"><span class="header-link"></span></a>Clearing the Canvas</h3>
<p>Next we see a function called <code>clearCanvas</code>… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">clearCanvas</span> <span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">c</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>This does exactly what you think it does. But instead of using the API method <code>clearRect</code> to clear the <code>canvas</code> it uses a trick where by if you set the width and height of the <code>canvas</code> to the same dimensions as the <code>canvas</code> itself then the <code>canvas</code> will clear. <strong>BUT BE WARNED:</strong> this will also erase all state from the <code>canvas</code>! (for more information on &#39;state&#39; <a href="http://html5.litten.com/understanding-save-and-restore-for-the-canvas-context/">see here</a>)</p>
<h3><a name="load-image-onto-canvas"class="anchor" href="#load-image-onto-canvas"><span class="header-link"></span></a>Load image onto Canvas</h3>
<p>Now we move onto the function <code>loadImageOntoCanvas</code>… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">loadImageOntoCanvas</span><span class="p">(){</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas_width</span><span class="p">,</span> <span class="nx">canvas_height</span><span class="p">);</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>

    <span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s2">&quot;#FFF&quot;</span><span class="p">;</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">shadowColor</span> <span class="o">=</span> <span class="s2">&quot;#000&quot;</span><span class="p">;</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">shadowOffsetX</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">shadowOffsetY</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">shadowBlur</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="s2">&quot;bold 25px Helvetica&quot;</span><span class="p">;</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">opening_message</span><span class="p">,</span> <span class="p">(</span><span class="nx">canvas_width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="nx">text_dimensions</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="p">(</span><span class="nx">canvas_height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>

    <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">select</span><span class="p">,</span> <span class="nx">init</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…which first draws the image onto the <code>canvas</code>, then writes some text onto the <code>canvas</code> which says &quot;Start Game&quot;. We position the text centrally to the <code>canvas</code> by using the API method <code>measureText</code> which gives us the dimensions of the text. Remember up in the variable declarations we had… </p>
<pre><code><div class="highlight"><pre><span class="nx">text_dimensions</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">measureText</span><span class="p">(</span><span class="nx">opening_message</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>…well now we can use that to write the text centrally onto the <code>canvas</code>… </p>
<pre><code><div class="highlight"><pre><span class="nx">context</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">opening_message</span><span class="p">,</span> <span class="p">(</span><span class="nx">canvas_width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="nx">text_dimensions</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="p">(</span><span class="nx">canvas_height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
</pre></div>
</code></pre>
<p>The last part of that function is an event listener for the <code>click</code>/<code>touchstart</code> event (depending on the browser support) which will call the <code>init</code> function when the user clicks on the <code>canvas</code> (to start the game)… </p>
<pre><code><div class="highlight"><pre><span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">select</span><span class="p">,</span> <span class="nx">init</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</pre></div>
</code></pre>
<h3><a name="initialise-game"class="anchor" href="#initialise-game"><span class="header-link"></span></a>Initialise Game</h3>
<p>In short: the <code>init</code> function clears the <code>canvas</code> and splits up the image into individual pieces and then displays them in a jumbled order. From there it sets up further event listeners for &#39;down&#39; and &#39;up&#39; events (which map to <code>mousedown</code>/<code>mouseup</code> and <code>touchstart</code>/<code>touchend</code>).</p>
<p>Lets look at this function in more detail… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">select</span><span class="p">,</span> <span class="nx">init</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="nx">clearCanvas</span><span class="p">(</span><span class="nx">canvas</span><span class="p">);</span>

<span class="c1">// Remove shadow (otherwise all puzzle pieces would get shadow applied to them)</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">shadowOffsetX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">shadowOffsetY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</pre></div>
</code></pre>
<p>…so we first remove the event listener we previously set. We then clear the <code>canvas</code> (don&#39;t worry, the rest of the function executes in a fraction of a second so the user wont see the <code>canvas</code> go white, they&#39;ll just see the end result which is the jumbled up puzzle pieces).</p>
<p>We then set the <code>shadowOffsetX</code> and <code>shadowOffsetY</code> to zero. The reason for doing this is that when I originally wrote the text &quot;Start Game&quot; onto the <code>canvas</code> I had set the shadow properties to help make the text stand out more. But if I don&#39;t reset the values back to zero then all items will have a shadow (so when I was originally building this game I noticed that the puzzle pieces all had a shadow on them which made the game look broken!)</p>
<p>We&#39;ll ignore the variable declarations and the two functions at the beginning of <code>init</code> and move down to the executing code within this function.</p>
<p>So first thing we see is we call the <code>loop</code> function. Now this function is actually called twice within <code>init</code> and the reason for that is because the main chunk of the <code>loop</code> function is (as you would expect) a loop and that loop has to happen twice: once for splitting the image into pieces and the second time is for actually drawing those pieces (after they&#39;ve been jumbled up) back onto the <code>canvas</code>. But some extra things need to happen when the loop runs a second time, so we pass in a parameter so the <code>loop</code> function knows that this time it will need to draw the puzzle pieces onto the <code>canvas</code>…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Build map of co-ordinates</span>
<span class="nx">loop</span><span class="p">();</span>

<span class="c1">// Randomise puzzle pices</span>
<span class="nx">puzzle_randomised</span> <span class="o">=</span> <span class="nx">shuffle</span><span class="p">(</span><span class="nx">puzzle_squares</span><span class="p">);</span>

<span class="c1">// Draw puzzle pieces</span>
<span class="nx">loop</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>…you can see we are using a <code>shuffle</code> function to mix up the puzzle pieces. This function I modified from the <a href="http://documentcloud.github.com/underscore/">Underscore</a> JavaScript library.</p>
<p>From here we randomly select a puzzle piece to remove (remember we need to have one empty space for the other pieces to move into) and then we set the initial empty space values (which we use throughout the rest of the game as a way to tell which part of the <code>canvas</code> is empty and can have a puzzle piece moved into it)… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">random_number</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nx">puzzle_randomised</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">random_number</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">random_number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">random_piece</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">random_number</span><span class="p">];</span>

<span class="nx">removed_piece</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">random_number</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

<span class="nx">context</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nx">random_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span> <span class="nx">random_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>

<span class="nx">empty_space</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">x</span><span class="o">:</span> <span class="nx">random_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span>
    <span class="nx">y</span><span class="o">:</span> <span class="nx">random_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>And the last part of the <code>init</code> function is to set-up the event listeners for the &#39;down&#39;/&#39;up&#39; events (which as we&#39;ve mentioned already are just alias&#39; to the relevant mouse and touch events)… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">down</span><span class="p">,</span> <span class="nx">checkDrag</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">up</span><span class="p">,</span> <span class="nx">toggleDragCheck</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>…these event listeners are going to help us detect when the user wants to move a puzzle piece.</p>
<h3><a name="user-interaction"class="anchor" href="#user-interaction"><span class="header-link"></span></a>User interaction</h3>
<p>So we can see that the &#39;down&#39; event will call the <code>checkDrag</code> function, so lets start from there… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">down</span><span class="p">,</span> <span class="nx">checkDrag</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

<span class="nx">global</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">drag</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">startDrag</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">movePiece</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">},</span> <span class="mi">150</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>You see we&#39;re first removing the event listener for the &#39;down&#39; event. We do this so the user can&#39;t accidentally (or purposely) try to move another puzzle piece while we&#39;re still in the process of moving the previous one.</p>
<p>We then use a short timer which when executed checks to see if the variable <code>drag</code> is true or false. If <code>drag</code> is true then we know the user wants to actually &#39;drag and drop&#39; the puzzle piece rather than have it move automatically for them. If <code>drag</code> is false then we just start animating the selected puzzle piece for them.</p>
<p>The reason we use a timer here is because we only have one &#39;down&#39; event, but that one event needs to do two things. So the timer delays the JavaScript engine just long enough for us to tell whether the user has released their click/touch. Remember we also set an &#39;up&#39; event which calls <code>toggleDragCheck</code> - well that function sets <code>drag</code> to false - so if the user just clicks/taps the puzzle piece then the &#39;up&#39; event will trigger and we&#39;ll set <code>drag</code> to false and so the timer will then know the user wants to have the piece moved for them. If the user keeps their click/touch down then when the timer runs <code>drag</code> will still equal true and so we know they want to &#39;drag and drop&#39; the selected piece.</p>
<p>Now as far as user interaction is concerned, there are a number of different scenarios that can play out during this game (e.g. user presses on illegal piece, user drops piece over non-empty space, the order of functions called changes when the user &#39;drag and drops&#39; and so the value of the variable <code>drag</code> can be changed incorrectly) and so we have to add in extra checks inside the <code>toggleDragCheck</code> function which work around these different scenarios.</p>
<p>For example, I had a problem where if the user did a &#39;drag and drop&#39; movement then the <code>toggleDragCheck</code> function would get called in a different order. So if the user then tried to perform another &#39;drag and drop&#39; movement they couldn&#39;t. So I had to put in checks that determined if the user was just in a &#39;drag and drop&#39; motion or not and reset specific variables to make sure the user could perform the actions they wanted… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">toggleDragCheck</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">upTriggered</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

    <span class="c1">// If the user releases while piece is moving but the piece hasn&#39;t yet been placed then stop the drag</span>
    <span class="c1">// And move the piece back into the empty space it came from</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">upTriggered</span> <span class="o">&amp;&amp;</span> <span class="nx">event_moving</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">upTriggered</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="nx">event_moving</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="nx">stopDrag</span><span class="p">();</span>
        <span class="nx">putPieceBack</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">drag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>UPDATE: I have since realised another way I could have implemented &#39;drag &amp; drop&#39; which is to check the &#39;move&#39; event (remember this is an alias for <code>mousemove</code> and <code>touchmove</code>) while the &#39;down&#39; event was triggered and to set a threshold of let&#39;s say 4px in any direction before triggering the drag and drop mechanism. I don&#39;t know how much this would have simplified things but maybe that could be an exercise for the reader to investigate. </p>
<h3><a name="automatic-puzzle-piece-animation"class="anchor" href="#automatic-puzzle-piece-animation"><span class="header-link"></span></a>Automatic puzzle piece animation</h3>
<p>We have two routes to go down now: <code>startDrag</code> or <code>movePiece</code>.</p>
<p>We&#39;re going to start with <code>movePiece</code> as that&#39;s the simpler of the two routes at the moment.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
    <span class="nx">j</span> <span class="o">=</span> <span class="nx">canvas_grid</span><span class="p">,</span>
    <span class="nx">selected_piece</span><span class="p">,</span>
    <span class="nx">potential_spaces</span><span class="p">,</span>
    <span class="c1">// Firefox only recognised properties pageX/Y</span>
    <span class="nx">eventX</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">offsetX</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span><span class="p">,</span> 
    <span class="nx">eventY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">offsetY</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span><span class="p">,</span>
    <span class="nx">pieceMovedX</span><span class="p">,</span>
    <span class="nx">pieceMovedY</span><span class="p">,</span>
    <span class="nx">moveAmount</span> <span class="o">=</span> <span class="p">(</span><span class="nx">nativeRAF</span><span class="p">)</span> <span class="o">?</span> <span class="mi">20</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="c1">// setInterval worked fine when moving by 10 but rAF could do with up&#39;ing the number of pixels per movement</span>
    <span class="nx">interval</span><span class="p">,</span>
    <span class="nx">coord</span><span class="p">,</span>
    <span class="nx">direction</span><span class="p">,</span> 
    <span class="nx">storeSelectedX</span><span class="p">,</span> 
    <span class="nx">storeSelectedY</span><span class="p">,</span>
    <span class="nx">foundPieceForAnimation</span><span class="p">;</span>
</pre></div>
</code></pre>
<p>OK, so the first thing we find inside of the <code>movePiece</code> function are the variable declarations. We can see that the only variables that are actually defined are <code>i</code>, <code>eventX</code>, <code>eventY</code> and <code>moveAmount</code>. For <code>moveAmount</code> you can see what we were referring to earlier when we were talking about the <code>requestAnimationFrame</code> polyfill…</p>
<p><code>moveAmount = (nativeRAF) ? 20 : 10</code></p>
<p>…we&#39;re checking if <code>requestAnimationFrame</code> is natively supported (rather than just a <code>setInterval</code>) and then we change the amount the puzzle piece should move depending on that result (we find moving by 20 on every iteration is a lot smoother using <code>requestAnimationFrame</code>, whereas moving by 20 using <code>setInterval</code> is just too fast).</p>
<p>Our first requirement from here is to find out which puzzle piece was clicked on. When we find out what piece was selected we can then decide whether we want to continue within the function to actually animate the piece into the empty space or not (I say &quot;<em>we can decide</em>&quot; because at this stage we don&#39;t know if the selected puzzle piece is a valid piece that has been clicked on - e.g. there is no empty space immediately next to it)… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Find the piece that was clicked on</span>
<span class="nx">selected_piece</span> <span class="o">=</span> <span class="nx">findSelectedPuzzlePiece</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">eventX</span><span class="p">,</span> <span class="nx">eventY</span><span class="p">);</span>

<span class="c1">// We&#39;re resetting &#39;wasJustDragging&#39; variable to false as we&#39;re now attempting to move the puzzle piece &#39;automatically&#39;</span>
<span class="c1">// So even if we don&#39;t actual move the puzzle piece, our program knows we haven&#39;t just tried to &#39;drag and drop&#39;</span>
<span class="nx">wasJustDragging</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

<span class="c1">// If no piece found (or user clicked on &#39;empty space&#39;) then don&#39;t continue</span>
<span class="c1">// But we need to reset some settings ready for next user interaction</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">selected_piece</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">resetOptions</span><span class="p">();</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…so the above code is making sense so far (e.g. we need to get the selected puzzle piece and then check if it&#39;s valid). But lets take a closer look at the two functions mentioned in the above snippet: <code>findSelectedPuzzlePiece</code> and <code>resetOptions</code>.</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">findSelectedPuzzlePiece</span> <span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">eventX</span><span class="p">,</span> <span class="nx">eventY</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Make sure we haven&#39;t selected the current empty space</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">eventX</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">eventX</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">piece_width</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">eventY</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">&amp;&amp;</span> <span class="nx">eventY</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">piece_height</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">eventX</span> <span class="o">&gt;=</span> <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasX</span> <span class="o">&amp;&amp;</span> <span class="nx">eventX</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasX</span> <span class="o">+</span> <span class="nx">piece_width</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">eventY</span> <span class="o">&gt;=</span> <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasY</span> <span class="o">&amp;&amp;</span> <span class="nx">eventY</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasY</span> <span class="o">+</span> <span class="nx">piece_height</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>As you can see the <code>findSelectedPuzzlePiece</code> is just a simple loop through the Array (<code>puzzle_randomised</code>) which holds the jumbled up puzzle pieces <code>puzzle_randomised</code> and it checks the current X and Y co-ordinates to see if they match any of the items in the Array (while at the same is also checking if the X and Y co-ordinates have matched the currently empty space in the puzzle).</p>
<p>The <code>resetOptions</code> function is a little bit more complicated in that it needs to delay resetting some values. This is because of how the different functions are used to configure the &#39;drag and drop&#39; settings. For example, if the user clicked too quickly after just &#39;dragging and dropping&#39; their puzzle piece then they wouldn&#39;t be able to move another piece (which was fixed by setting a fraction of a second delay before re-applying the event listeners).</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">resetOptions</span><span class="p">(){</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">wasJustDragging</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">global</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">down</span><span class="p">,</span> <span class="nx">checkDrag</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
            <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">up</span><span class="p">,</span> <span class="nx">toggleDragCheck</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">down</span><span class="p">,</span> <span class="nx">checkDrag</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Make sure drag is reset to true so we can check whether the user wants to &quot;drag &amp; drop&quot;</span>
    <span class="nx">drag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>OK, now we&#39;ve taken a look at those two functions, lets continue on with the next step of the <code>movePiece</code> function which is to create an object with the four potential empty spaces that could be around the selected puzzle piece… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">potential_spaces</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span>
        <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">-</span> <span class="nx">piece_height</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">-</span> <span class="nx">piece_width</span><span class="p">,</span>
        <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">+</span> <span class="nx">piece_width</span><span class="p">,</span>
        <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span>
        <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">+</span> <span class="nx">piece_height</span>
    <span class="p">}</span>
<span class="p">];</span>
</pre></div>
</code></pre>
<p>…now we move onto actually looping through the <code>potential_spaces</code> Array to see if we can find a match of the potential empty spaces and the <em>actual</em> empty space… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Check if we can move the selected piece into the empty space (e.g. can only move selected piece up, down, left and right, not diagonally)</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">potential_spaces</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">potential_spaces</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">y</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// NOW WE NEED TO LOOP THROUGH &#39;puzzle_randomised&#39;          </span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…once we&#39;ve found a match we can start looping through the Array that holds the jumbled puzzle pieces (i.e. <code>puzzle_randomised</code>) and see if we can find a match between the selected puzzle piece and the pieces in the Array… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">while</span> <span class="p">(</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasX</span> <span class="o">===</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">&amp;&amp;</span> 
        <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasY</span> <span class="o">===</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// We&#39;ll keep track of how far the piece has moved</span>
        <span class="nx">pieceMovedX</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">;</span>
        <span class="nx">pieceMovedY</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">;</span>

        <span class="c1">// We&#39;ll also keep track of the original selected piece as we&#39;ll need these co-ordinates for resetting the empty space</span>
        <span class="nx">storeSelectedX</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">;</span>
        <span class="nx">storeSelectedY</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">;</span>

        <span class="c1">// Animate the piece into place</span>
        <span class="nx">foundPieceForAnimation</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="c1">// had to store in var rather than pass as an argument as requestAnimationFrame doesn&#39;t have any way to pass an argument :-(</span>
        <span class="nx">raf</span><span class="p">();</span>

        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>At the end of that loop we put in a quick conditional check that calls the <code>resetOptions</code> function only when no matches from the previous loops were found… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// User must have clicked on an item that couldn&#39;t have been moved</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">resetOptions</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>So the entire chunk of code (two loops and conditional statement) looks like this… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Check if we can move the selected piece into the empty space (e.g. can only move selected piece up, down, left and right, not diagonally)</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">potential_spaces</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">potential_spaces</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">y</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// We then loop through the shuffled puzzle order looking for the piece that was selected by the user</span>
        <span class="k">while</span> <span class="p">(</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasX</span> <span class="o">===</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">&amp;&amp;</span> 
                <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasY</span> <span class="o">===</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">)</span> <span class="p">{</span>

                <span class="c1">// We&#39;ll keep track of how far the piece has moved</span>
                <span class="nx">pieceMovedX</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">;</span>
                <span class="nx">pieceMovedY</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">;</span>

                <span class="c1">// We&#39;ll also keep track of the original selected piece as we&#39;ll need these co-ordinates for resetting the empty space</span>
                <span class="nx">storeSelectedX</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">;</span>
                <span class="nx">storeSelectedY</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">;</span>

                <span class="c1">// Animate the piece into place</span>
                <span class="nx">foundPieceForAnimation</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="c1">// had to store in var rather than pass as an argument as requestAnimationFrame doesn&#39;t have any way to pass an argument :-(</span>
                <span class="nx">raf</span><span class="p">();</span>

                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// User must have clicked on an item that couldn&#39;t have been moved</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">resetOptions</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>Within the second loop (once we&#39;ve made a match) we now need to begin the actual process of animating the selected puzzle piece into the empty space.</p>
<p>We do this by calling the <code>raf</code> function which itself sets-up the <code>requestAnimationFrame</code> and then calls the <code>animate</code> function… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">raf</span><span class="p">(){</span>
    <span class="nx">interval</span> <span class="o">=</span> <span class="nx">global</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">raf</span><span class="p">);</span>
    <span class="nx">animate</span><span class="p">(</span><span class="nx">foundPieceForAnimation</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…when <code>animate</code> is called we pass through the relevant puzzle piece. The <code>animate</code> function first clears the space where the selected piece last was found and then checks to see if we need to update the &#39;x&#39; or &#39;y&#39; co-ordinates… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Clear the space where the selected piece is currently</span>
<span class="nx">context</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nx">pieceMovedX</span><span class="p">,</span> <span class="nx">pieceMovedY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>

<span class="c1">// We don&#39;t want to move the x/y co-ordinates if they&#39;re already the same</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">pieceMovedX</span> <span class="o">!==</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">coord</span> <span class="o">=</span> <span class="s2">&quot;x&quot;</span><span class="p">;</span>
    <span class="c1">// Check which direction the piece needs to move in</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">pieceMovedX</span> <span class="o">&gt;</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nx">pieceMovedX</span> <span class="o">-=</span> <span class="nx">moveAmount</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">direction</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">pieceMovedX</span> <span class="o">+=</span> <span class="nx">moveAmount</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">pieceMovedY</span> <span class="o">!==</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">coord</span> <span class="o">=</span> <span class="s2">&quot;y&quot;</span><span class="p">;</span>
    <span class="c1">// Check which direction the piece needs to move in</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">pieceMovedY</span> <span class="o">&gt;</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">direction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nx">pieceMovedY</span> <span class="o">-=</span> <span class="nx">moveAmount</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">direction</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">pieceMovedY</span> <span class="o">+=</span> <span class="nx">moveAmount</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…once the co-ordinates are updated we then re-draw the puzzle piece into the next position and keep going until we reach the end of the animation. </p>
<p>We check for the end of the animation by looking at the current co-ordinates of the puzzle piece compared to the final co-ordinates and if there is a match we stop the animation by clearing the time out and drawing the image one last time into it&#39;s final position. </p>
<p>We then update the co-ordinates for that now moved puzzle piece so it thinks it was last drawn in the same position as what once was an empty space. We then update the empty space co-ordinates so they point to where the selected puzzle piece just came from (confused yet?!)</p>
<p>Lastly, we call <code>resetOptions</code> and do one final check to see if all the pieces are now in the end position and thus the end of the game…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">direction</span> <span class="o">&amp;&amp;</span> <span class="nx">coord</span> <span class="o">===</span> <span class="s2">&quot;x&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">pieceMovedX</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">||</span> 
    <span class="nx">direction</span> <span class="o">&amp;&amp;</span> <span class="nx">coord</span> <span class="o">===</span> <span class="s2">&quot;y&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">pieceMovedY</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">||</span> 
    <span class="o">!</span><span class="nx">direction</span> <span class="o">&amp;&amp;</span> <span class="nx">coord</span> <span class="o">===</span> <span class="s2">&quot;x&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">pieceMovedX</span> <span class="o">&lt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">||</span> 
    <span class="o">!</span><span class="nx">direction</span> <span class="o">&amp;&amp;</span> <span class="nx">coord</span> <span class="o">===</span> <span class="s2">&quot;y&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">pieceMovedY</span> <span class="o">&lt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>

    <span class="nx">global</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="p">(</span><span class="nx">interval</span><span class="p">);</span>

    <span class="c1">// Draw one last time directly into the empty space</span>
    <span class="c1">// Note: I was finding that because of the loop interation sometimes the y position would be -2 or 2+ but I decided that near enough the position drawing directly into the empty space the user wont even notice</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="nx">piece_to_move</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">piece_to_move</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">,</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>

    <span class="c1">// Also update the drawnOnCanvasX/Y properties so they reflect the last place on the canvas they were drawn</span>
    <span class="nx">piece_to_move</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
    <span class="nx">piece_to_move</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>

    <span class="c1">// Reset the empty space co-ordinates to be where the image we&#39;ve just moved was.</span>
    <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">storeSelectedX</span><span class="p">;</span>
    <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">storeSelectedY</span><span class="p">;</span>

    <span class="nx">resetOptions</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">checkIfGameFinished</span><span class="p">())</span> <span class="p">{</span>
        <span class="nx">drawBackMissingPiece</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// Then redraw it into the empty space</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="nx">piece_to_move</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">piece_to_move</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">,</span> <span class="nx">pieceMovedX</span><span class="p">,</span> <span class="nx">pieceMovedY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="drag-and-drop-interaction"class="anchor" href="#drag-and-drop-interaction"><span class="header-link"></span></a>Drag and Drop interaction</h3>
<p>So now we&#39;ve been through the automatic moving of puzzle pieces lets start looking at how the &#39;drag and drop&#39; route works.</p>
<p>So if you remember we had a conditional that was checking if the variable <code>drag</code> was true or false. But it would check the value after a few milliseconds (which was long enough for our program to change the value of <code>drag</code> to true if the user had kept their click/touch down - signifying they intended to drag the puzzle piece).</p>
<p>If the user intended to drag the piece we would call the appropriately named function <code>startDrag</code>… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">selected_piece</span><span class="p">,</span>
    <span class="nx">i</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
    <span class="nx">j</span> <span class="o">=</span> <span class="nx">canvas_grid</span><span class="p">,</span>
    <span class="nx">potential_spaces</span><span class="p">,</span>
    <span class="nx">eventX</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">offsetX</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span><span class="p">,</span> 
    <span class="nx">eventY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">offsetY</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">setUp</span><span class="p">(){</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>

    <span class="nx">dragCanvasContext</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>

    <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">move</span><span class="p">,</span> <span class="nx">eventObject</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

    <span class="nx">event_moving</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span> <span class="o">=</span> <span class="nx">eventX</span> <span class="o">-</span> <span class="p">(</span><span class="nx">piece_width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span> <span class="o">=</span> <span class="nx">eventY</span> <span class="o">-</span> <span class="p">(</span><span class="nx">piece_height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>

<span class="nx">eventObject</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">handleEvent</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">dragPiece</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">current_piece</span> <span class="o">=</span> <span class="nx">selected_piece</span> <span class="o">=</span> <span class="nx">findSelectedPuzzlePiece</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">eventX</span><span class="p">,</span> <span class="nx">eventY</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">allow_input</span><span class="p">.</span><span class="nx">checked</span><span class="p">)</span> <span class="p">{</span>

    <span class="nx">potential_spaces</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span>
            <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">-</span> <span class="nx">piece_height</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">-</span> <span class="nx">piece_width</span><span class="p">,</span>
            <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">+</span> <span class="nx">piece_width</span><span class="p">,</span>
            <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span>
            <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">+</span> <span class="nx">piece_height</span>
        <span class="p">}</span>
    <span class="p">];</span>

    <span class="nx">outer_loop</span><span class="o">:</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">potential_spaces</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">potential_spaces</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">y</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasX</span> <span class="o">===</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">&amp;&amp;</span> 
                    <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasY</span> <span class="o">===</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">)</span> <span class="p">{</span>

                     <span class="nx">selected_piece</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                     <span class="nx">setUp</span><span class="p">();</span>
                     <span class="k">break</span> <span class="nx">outer_loop</span><span class="p">;</span>

                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">event_moving</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">resetOptions</span><span class="p">();</span>
    <span class="p">}</span>

<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>            
    <span class="nx">setUp</span><span class="p">();</span>            
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…OK so there is a fair bit going on here so lets analyse what&#39;s happening. </p>
<p>First we see the varible declarations, we expect this now and know that they relate to things used throughout this function.</p>
<p>Next we have a function called <code>setUp</code> which we&#39;ll ignore for now as this is what actually starts the &#39;drag and drop&#39;. </p>
<p>The rest of this function is actually a repeat of code from the <code>movePiece</code> function! So although it looks a lot you&#39;ve already seen most of it any way. But before we discuss this further lets quickly look at the code after the <code>setUp</code> function… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span> <span class="o">=</span> <span class="nx">eventX</span> <span class="o">-</span> <span class="p">(</span><span class="nx">piece_width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span> <span class="o">=</span> <span class="nx">eventY</span> <span class="o">-</span> <span class="p">(</span><span class="nx">piece_height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>

<span class="nx">eventObject</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">handleEvent</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">dragPiece</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">current_piece</span> <span class="o">=</span> <span class="nx">selected_piece</span> <span class="o">=</span> <span class="nx">findSelectedPuzzlePiece</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">eventX</span><span class="p">,</span> <span class="nx">eventY</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>…so here we&#39;re setting some global properties (they need to be global because we want to be able to change them from outside of this function) to store the users selected co-ordinates. You&#39;ll notice that I&#39;ve named them quite generically. The reason I did that was because this game works for mouse and touch based devices I didn&#39;t want to call them <code>click_positionX</code> because then on a touch device that wouldn&#39;t have strictly been true (anal I know).</p>
<p>The <code>eventObject</code> is the listener for the &#39;move&#39; event (which as you already know is an alias for either <code>mousemove</code> or <code>touchmove</code> depending on device support). It&#39;s called by the listener within the <code>setUp</code> function. I&#39;ll come back to this later when I start discussing the <code>setUp</code> function.</p>
<p>And finally we store a reference to the currently selected puzzle piece.</p>
<p>OK, now we come to the conditional statement… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">allow_input</span><span class="p">.</span><span class="nx">checked</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// Move piece into available empty space.</span>
    <span class="c1">// There are 4 potential spaces around the selected piece which it can move in (diagonal doesn&#39;t count - as we&#39;re not worrying about the &#39;drag and drop&#39; yet)</span>
    <span class="c1">// So loop through each of them checking to see if any of their co-ordinates match the empty space</span>
    <span class="c1">// If they do match then move the selected piece into that space and set the selected piece to be the new empty space</span>
    <span class="nx">potential_spaces</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span>
            <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">-</span> <span class="nx">piece_height</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">-</span> <span class="nx">piece_width</span><span class="p">,</span>
            <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">+</span> <span class="nx">piece_width</span><span class="p">,</span>
            <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nx">x</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span>
            <span class="nx">y</span><span class="o">:</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">+</span> <span class="nx">piece_height</span>
        <span class="p">}</span>
    <span class="p">];</span>

    <span class="c1">// Check if we can move the selected piece into the empty space (e.g. can only move selected piece up, down, left and right, not diagonally)</span>
    <span class="c1">// We use a labelled statement to break out of the outer loop once a match is found within the inner loop</span>
    <span class="nx">outer_loop</span><span class="o">:</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">potential_spaces</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">potential_spaces</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">y</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// We then loop through the shuffled puzzle order looking for the piece that was selected by the user</span>
            <span class="k">while</span> <span class="p">(</span><span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasX</span> <span class="o">===</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">&amp;&amp;</span> 
                    <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">drawnOnCanvasY</span> <span class="o">===</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">)</span> <span class="p">{</span>

                     <span class="nx">selected_piece</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                     <span class="nx">setUp</span><span class="p">();</span>
                     <span class="k">break</span> <span class="nx">outer_loop</span><span class="p">;</span>

                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// User must have clicked on an item that couldn&#39;t have been moved</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">event_moving</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// this is so when the mouseup/touchend event is triggered we can catch this error out inside toggleDragCheck() which otherwise would reset drag=false and cause problems with the user&#39;s next interaction</span>
        <span class="nx">resetOptions</span><span class="p">();</span>
    <span class="p">}</span>

<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>            
    <span class="nx">setUp</span><span class="p">();</span>            
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…the purpose of this is to see if we&#39;re allowed to move &#39;illegal&#39; puzzle pieces. If we aren&#39;t allowed to move them then we have a whole load of code which is repeated from the <code>movePiece</code> function and as you now already know it just works out if the puzzle piece selected is illegal or not. Now the reason I didn&#39;t just abstract this code into a separate function is because it has some slight tweaks to it (but mainly the code is the same). The tweaks are things like providing a &#39;labelled statement&#39; for the outer while loop <code>outer_loop: while (j--)</code> (which makes it easer for us to break out of both loops, otherwise we&#39;d have to set a variable in the inner loop for the outer loop to check against to see if it needed to break).</p>
<p>The <code>else</code> statement just calls the <code>setUp</code> function as it doesn&#39;t have to worry about checking if the puzzle piece is legal or not, it knows whatever was selected can be moved.</p>
<p>Now we get to the <code>setUp</code> function itself… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">setUp</span><span class="p">(){</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>

    <span class="nx">dragCanvasContext</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>

    <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">move</span><span class="p">,</span> <span class="nx">eventObject</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

    <span class="nx">event_moving</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…so the first line removes the puzzle piece from the canvas now we know which piece it is.</p>
<p>Next we draw the puzzle piece onto the top canvas which handles the user interaction.</p>
<p>Then we set-up the event listener so that we call the <code>dragPiece</code> function (which is specified within the <code>eventObject</code>) every time the user moves either their mouse cursor or their finger.</p>
<p>Lastly we set <code>event_moving</code> to true which is useful for doing some checks later on to make sure the user&#39;s next interaction isn&#39;t broken.</p>
<p>But lets just quickly review the <code>eventObject</code>. Most people don&#39;t realise that with <code>addEventListener</code> you don&#39;t have to specify a function to be the listener and that you can specify an object, but that object must have a <code>handler</code> property with a function assigned to it which acts as the listener. The reason I&#39;ve used an object rather than a straight function is because I wanted to pass some additional parameters but couldn&#39;t of done that otherwise without using an anonymous function and if you don&#39;t know: it&#39;s best to avoid using anonymous functions for an event listener because if you do then you wont be able to remove the event listener (without maybe building your own abstraction of the events API to workaround the issue - I wont go into the details of why you can&#39;t remove an anonymous function referenced event listener as that&#39;s outside the scope of this post, but suffice to say it&#39;s similar to checking if <code>{} == {}</code>).</p>
<p>We&#39;ve now reached the <code>dragPiece</code> function… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">eventX</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">offsetX</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span><span class="p">,</span> 
    <span class="nx">eventY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">offsetY</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span><span class="p">,</span>
    <span class="nx">storeSelectedX</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span><span class="p">,</span>
    <span class="nx">storeSelectedY</span> <span class="o">=</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span><span class="p">,</span>
    <span class="nx">halfWidth</span> <span class="o">=</span> <span class="nx">piece_width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nx">halfHeight</span> <span class="o">=</span> <span class="nx">piece_height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

<span class="nx">dragCanvasContext</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>

<span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span> <span class="o">=</span> <span class="nx">eventX</span> <span class="o">-</span> <span class="nx">halfWidth</span><span class="p">;</span>
<span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span> <span class="o">=</span> <span class="nx">eventY</span> <span class="o">-</span> <span class="nx">halfHeight</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span> <span class="o">&lt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="p">(</span><span class="nx">piece_width</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;&amp;</span> 
    <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span> <span class="o">&lt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="p">(</span><span class="nx">piece_height</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;&amp;</span> 
    <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span> <span class="o">+</span> <span class="nx">piece_height</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="mi">20</span> <span class="o">&amp;&amp;</span> 
    <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span> <span class="o">+</span> <span class="nx">piece_width</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">highlightEmptySpace</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Check if mouse is over the empty space or not</span>
<span class="k">if</span> <span class="p">((</span><span class="nx">eventX</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">eventX</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">piece_width</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">eventY</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">&amp;&amp;</span> <span class="nx">eventY</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">piece_height</span><span class="p">)))</span> <span class="p">{</span>
    <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">move</span><span class="p">,</span> <span class="nx">eventObject</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
    <span class="nx">event_moving</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">,</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>
    <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
    <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
    <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">storeSelectedX</span><span class="p">;</span>
    <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">storeSelectedY</span><span class="p">;</span>
    <span class="nx">stopDrag</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    
    <span class="nx">dragCanvasContext</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…so again lets look through what&#39;s happening.</p>
<p>The <code>halfWidth</code> and <code>halfHeight</code> variables are there because when we draw the puzzle piece onto the top canvas we want the puzzle piece to be centered to the mouse cursor/user&#39;s touch.</p>
<p>The line:</p>
<p><code>dragCanvasContext.clearRect(global.user_positionX, global.user_positionY, piece_width, piece_height);</code></p>
<p>…clears where the puzzle piece was last drawn. We then update the co-ordinates for mouse/touch position…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span> <span class="o">=</span> <span class="nx">eventX</span> <span class="o">-</span> <span class="nx">halfWidth</span><span class="p">;</span>
<span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span> <span class="o">=</span> <span class="nx">eventY</span> <span class="o">-</span> <span class="nx">halfHeight</span><span class="p">;</span>
</pre></div>
</code></pre>
<p>…the next step is to see if the user has moved the puzzle piece &#39;near&#39; the empty space. The way we do this is we highlight the empty space so it has a red background whenever the user moves 20px within it. This is so they are aware that at any point soon the puzzle piece will be dropped into this empty space… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span> <span class="o">&lt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="p">(</span><span class="nx">piece_width</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;&amp;</span> 
    <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span> <span class="o">&lt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="p">(</span><span class="nx">piece_height</span> <span class="o">-</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;&amp;</span> 
    <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span> <span class="o">+</span> <span class="nx">piece_height</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="mi">20</span> <span class="o">&amp;&amp;</span> 
    <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span> <span class="o">+</span> <span class="nx">piece_width</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">highlightEmptySpace</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…the <code>else</code> statement is there for when the user moves the puzzle piece to a position that is again outside of the puzzle piece (e.g. we remove the red background).</p>
<p>Now we just have one more conditional statement before we reach the end of the function… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">((</span><span class="nx">eventX</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">eventX</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">piece_width</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">eventY</span> <span class="o">&gt;=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">&amp;&amp;</span> <span class="nx">eventY</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">piece_height</span><span class="p">)))</span> <span class="p">{</span>
    <span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">move</span><span class="p">,</span> <span class="nx">eventObject</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
    <span class="nx">event_moving</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">,</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>
    <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
    <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">=</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
    <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">storeSelectedX</span><span class="p">;</span>
    <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">storeSelectedY</span><span class="p">;</span>
    <span class="nx">stopDrag</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    
    <span class="nx">dragCanvasContext</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">selected_piece</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionX</span><span class="p">,</span> <span class="nx">global</span><span class="p">.</span><span class="nx">user_positionY</span><span class="p">,</span> <span class="nx">piece_width</span><span class="p">,</span> <span class="nx">piece_height</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…here we check to see if the mouse/touch is over the empty space and if it is we then remove the <code>move</code> event (as there is no point calling it again now we&#39;ve placed the puzzle piece in the empty space). After that we update some of the properties such as <code>event_moving</code>, <code>empty_space</code> object and the <code>drawnOnCanvas</code> properties and then we call the <code>stopDrag</code> function which we&#39;ll get to in a few moments.</p>
<p>If the user isn&#39;t over the empty space then the <code>else</code> statement kicks in and we simply draw the puzzle piece onto the canvas in the current mouse/touch position.</p>
<p>So now lets look at the contents of the <code>stopDrag</code> function… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">move</span><span class="p">,</span> <span class="nx">eventObject</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="nx">dragCanvas</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventsMap</span><span class="p">.</span><span class="nx">up</span><span class="p">,</span> <span class="nx">toggleDragCheck</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="nx">wasJustDragging</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="nx">resetOptions</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">checkIfGameFinished</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">drawBackMissingPiece</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…the first thing we do is remove the &#39;move&#39; event - <em>now to be honest, as I&#39;m writing this post a few weeks after completing the game, I&#39;m not sure why I&#39;m removing the event again in that section as it should have already been removed? I&#39;ll leave this in for now and re-evaluate the code at a later date to see if it is indeed as redundant as it appears to be now</em> - then we update <code>wasJustDragging</code> so we know that we just completed a drag and drop motion. Then we call the <code>resetOptions</code> function (which we went over earlier) and finally we call the function <code>checkIfGameFinished</code> which nicely leads us into our final section… </p>
<h3><a name="determining-the-end-of-game"class="anchor" href="#determining-the-end-of-game"><span class="header-link"></span></a>Determining the end of game</h3>
<p>The <code>checkIfGameFinished</code> function simply loops through all puzzle pieces to see if they match the correct order… </p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">checkIfGameFinished</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">copied_puzzle_randomised</span> <span class="o">=</span> <span class="nx">puzzle_randomised</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="nx">copied_puzzle_randomised</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">random_number</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">removed_piece</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="nx">complete</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

    <span class="nx">complete</span> <span class="o">=</span> <span class="nx">copied_puzzle_randomised</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">drawnOnCanvasX</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">drawnOnCanvasY</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span> 
        <span class="c1">// The final piece is actually the missing piece so we check the x/y against the empty_space x/y</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">y</span> <span class="o">===</span> <span class="nx">empty_space</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">complete</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…some other things to note about the <code>checkIfGameFinished</code> function is that we copy the <code>puzzle_randomised</code> Array and add back in the missing piece before we then check all the co-ordinates are correct and match (you&#39;ll see we&#39;re setting the variable <code>complete</code> to be the return value of the Array method <code>every</code> and then the function returns <code>complete</code> which will be either true or false (see: <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every"><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every</a></a> for details).</p>
<p>Quickly now we&#39;ll jump back to the <code>stopDrag</code> function where we&#39;ll see that if <code>checkIfGameFinished</code> returns true then we&#39;ll call <code>drawBackMissingPiece</code> which (as you would expect by the name of the function) draws the missing puzzle piece back onto the canvas as we know the game is complete and then displays an <code>alert</code> which tells the user the game is complete (this part you can change to suit your needs).</p>
<p>And now! finally! we have reached the end of this post :-)</p>
<p>Hopefully this has made <em>some</em> sense? I would say &quot;go through the code and see how everything works&quot; - and you can do that obviously - but with things of this nature they can get quite complex and there are problems the developer goes through and works around which might not be clear in the code itself (I&#39;ve tried to document the reasoning behind most of the code so hopefully that will help).</p>
<p>But any questions then just let me know.</p>
]]></description><link>http://www.integralist.co.uk/posts/building-a-game-with-html5-canvas/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/building-a-game-with-html5-canvas/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Mon, 18 Jun 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction to Ruby]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 27mins</em></p>
<ul>
<li>Introduction</li>
<li>Installing Ruby</li>
<li>The Interactive Ruby Console</li>
<li>How to execute Ruby scripts</li>
<li>Comments</li>
<li>Variables</li>
<li>Magic Variables</li>
<li>Constants</li>
<li>Symbols</li>
<li>Functions/Methods</li>
<li>Blocks</li>
<li>Lambdas/Procs</li>
<li>Classes</li>
<li>Loops</li>
<li>Conditionals</li>
<li>Strings</li>
<li>Arrays</li>
<li>Hashes</li>
<li>Numbers (and how &#39;everything is an object&#39; - similar to JavaScript)</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>I&#39;ve not had much experience with the Ruby programming language, but with the arrival of JavaScript pre-processors such as CoffeeScript and the new features being added to ES5 (even more so in ES6), these new additions are pushing the JavaScript language to be more &#39;functional&#39; and thus similar in syntax to Ruby. </p>
<p>Looking at CoffeeScript I wasn&#39;t convinced. I like the JavaScript syntax, I think it&#39;s actually quite a beautiful language (when written correctly). But I decided that the future is just around the corner so why wait to see what all the fuss is about. In my mind, the best way to get involved with the new JavaScript/CoffeeScript style syntax is to investigate some of its inspirations which (seem to) stem from Ruby.</p>
<p>What I found though was that Ruby is itself an amazingly flexible and beautiful language. Very expressive and a joy to write and use (and to look at). </p>
<p>Warning: this introduction assumes you have prior programming knowledge (doesn&#39;t matter really whether it&#39;s JavaScript or C# as long as you&#39;ve had some programming experience). I&#39;m not going to be explaining the basics of what are &#39;expressions&#39;, &#39;block statements&#39;, &#39;variables&#39;, &#39;arrays&#39;, &#39;functions/methods&#39; etc.</p>
<p>So without further ado, here we go…</p>
<p><em>Ps, <a href="http://rubymonk.com/"><a href="http://rubymonk.com/toc">http://rubymonk.com/toc</a></a> looks like a pretty good learning resource - I&#39;ve only taken a quick peek at it so far but it looks interesting</em></p>
<h2><a name="installing-ruby"class="anchor" href="#installing-ruby"><span class="header-link"></span></a>Installing Ruby</h2>
<p>UPDATE: I&#39;ve found a super sweet way to get multiple versions of Ruby installed onto your Mac (notice I said Mac, not PC - so if you&#39;re on Windows then I&#39;m afraid I can&#39;t help you).</p>
<p>First install <a href="https://github.com/sstephenson/ruby-build">Ruby-Build</a> - preferable via the Mac package manager <a href="http://mxcl.github.com/homebrew/">Homebrew</a> using the command <code>brew install ruby-build</code>.</p>
<p>Then install the Ruby switcher <a href="https://github.com/hmans/rbfu">rbfu</a> using the command <code>brew install http://git.io/rbfu.rb</code> - make sure you update your shell startup script (<code>~/.zshrc</code> if your&#39;re using Zsh or <code>~/.bashrc</code>/<code>~/.bash_profile</code> etc if you&#39;re using Bash) to include the line <code>eval &quot;$(rbfu --init --auto)&quot;</code> (this information is documented on the rbfu github README so go there for more info, if you need it).</p>
<p>Then once those two items are installed you can start installing different Ruby versions using ruby-build and switching Ruby versions using rbfu.</p>
<p>To install a new Ruby version, first check which ones are available by running the command: <code>ruby-build --definitions</code> - this will list all Ruby versions available to install.</p>
<p>Pick a version (for example <code>2.0.0-preview2</code>) and run the command:  </p>
<p><code>ruby-build 2.0.0-preview2 $HOME/.rbfu/rubies/2.0.0-preview2</code></p>
<p>That takes care of installing that particular version of Ruby, but now for you to switch to using that version you need to create a <code>.ruby-version</code> file and place it inside the directory of your Ruby application. The content of that file should be <code>2.0.0-preview2</code> or whatever version of Ruby you have installed (via Ruby Build) that you want to run for that application.</p>
<p>Now when you <code>cd</code> into that directory where your <code>.ruby-version</code> file is located you&#39;ll noticed the Terminal will state that it has activated the specific Ruby version requested.</p>
<p>If for some reason you create a <code>.ruby-version</code> file but forget to run the Ruby Build install for the requested version then the Terminal will display a message to let you know that you need to install the requested version of Ruby.</p>
<p>Below are my original notes, but you can ignore these now.</p>
<hr>
<p><del>~OK, this was an absolute bitch to get set-up. Luckily for you, I&#39;ve suffered so you don&#39;t have to (hopefully).</del>~</p>
<p><del>~I&#39;m running Mac OSX so your mileage may vary.</del>~</p>
<p><del>~If you can get away with it, use the package manager homebrew to install: <code>brew install ruby</code>.</del>~</p>
<p><del>~But homebrew didn&#39;t work for me. It said it installed, but I couldn&#39;t get it to switch from the default Ruby 1.8 the Mac has pre-installed. So the next step was to install what is called &#39;rvm&#39; which lets you install and manage multiple versions of Ruby.</del>~</p>
<p><del>~The process is as follows (open the Terminal and start typing):</del>~</p>
<p><del>~1. <code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)</code>. After rvm is installed you&#39;ll see a message asking you to to run the following...</del>~</p>
<p><del>~2. <code>source /Users/&lt;username&gt;/.rvm/scripts/rvm</code>. Remember to replace <code>&lt;username&gt;</code> with the name of your computer.</del>~</p>
<p><del>~3. <code>rvm install 1.9.3 --with-gcc=clang</code>. The <code>--with-gcc=clang</code> was suggested on Stack Overflow to fix issues Mac OSX Lion users were having trying to upgrade to the latest Ruby version 1.9.3. This worked fine at home, but at work it failed so instead I executed… <code>rvm install ruby-1.9.3-p125</code></del>~</p>
<p><del>~4. <code>rvm use 1.9.3 --default</code>. We&#39;re now telling rvm to use version 1.9.3 as the default version of Ruby</del>~</p>
<p><del>~5. <code>ruby -v</code> - just check the version quickly to be sure</del>~</p>
<h2><a name="the-interactive-ruby-console"class="anchor" href="#the-interactive-ruby-console"><span class="header-link"></span></a>The Interactive Ruby Console</h2>
<p>Beginners are advised to use the interactive Ruby console to get to know the language. So to start it up, in your Terminal type: <code>irb</code> (and if you want to quit use: <code>Ctrl+D</code>).</p>
<p>From irb you can start typing out code and seeing what the results are.</p>
<p>For example to display something you would use <code>puts</code> (this is similar to <code>Reponse.Write</code> in ASP or <code>echo</code> in PHP, or even <code>document.write</code> - <em>never use that!</em> - in JavaScript) like so <code>puts &quot;Hello World&quot;</code>. There is also <code>print</code> but be warned that although it looks similar it&#39;s not the same as <code>puts</code>.</p>
<p>Take the following example…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
    <span class="nb">print</span> <span class="s2">&quot;This gets written five times&quot;</span>
    <span class="nb">sleep</span> <span class="mi">2</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…which every two seconds displays the sentence &quot;This gets written five times&quot;…</p>
<p><code>This gets written five timesThis gets written five timesThis gets written five timesThis gets written five timesThis gets written five times</code></p>
<p>…and returns <code>=&gt; 5</code>. Notice the sentence is printed on one line. If you were to change <code>print</code> to <code>puts</code> it would automatically generate a newline for you making it easier to read. </p>
<p>As far as I understand it, the other more subtle difference is that <code>print</code> buffers the output, so rather than displaying the sentence every two seconds it waits until ten seconds (2 seconds * 5 times) before printing the sentence five times. Now, I tried this myself both via <code>irb</code> and via a standard Ruby script but <code>print</code> definitely was executing every two seconds, so this may only occur under certain environments - but it&#39;s still worth being aware of. See <a href="http://mattberther.com/2009/02/11/puts-vs-print-in-ruby">this article</a> which is where I first heard about this subtle difference.</p>
<h2><a name="how-to-execute-ruby-scripts"class="anchor" href="#how-to-execute-ruby-scripts"><span class="header-link"></span></a>How to execute Ruby scripts</h2>
<p>Simply create a file with an extension of <code>.rb</code> and at the top of that file include the following line… </p>
<p><code>#!/usr/bin/env ruby</code></p>
<p>…this tells the operating system how to handle the file (e.g. tell it to use the Ruby parser to execute the file).</p>
<p>Then within the Terminal application, <code>cd</code> to the directory where that file is located and execute the command <code>ruby name_of_file.rb</code></p>
<h2><a name="comments"class="anchor" href="#comments"><span class="header-link"></span></a>Comments</h2>
<p>In Ruby you have single line comments <code># this is a comment</code> and multi-line comments:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="cm">=begin</span>
<span class="cm">    Lots and lots of</span>
<span class="cm">    code that I want</span>
<span class="cm">    to comment out all at once</span>
<span class="cm">=end</span>
</pre></div>
</code></pre>
<p>With multi-line comments there must be no whitespace before the <code>=begin</code> and <code>=end</code> statements otherwise your script will throw an error.</p>
<h2><a name="variables"class="anchor" href="#variables"><span class="header-link"></span></a>Variables</h2>
<p>Variables do not have to be declared. So you can literally write <code>a = 123</code>.</p>
<p>You can assign multiple variables at once like so…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>     <span class="c1"># which is effectively the same as x = 1, y = 2</span>
<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span>     <span class="c1"># which switches the values of each variable</span>
<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="c1"># assign each array item value to a variable, so x = 1, y = 2, z = 3</span>
</pre></div>
</code></pre>
<p>Variables in JavaScript typically come in two flavours: Global and Local. In JavaScript if you declare a variable with the <code>var</code> syntax then the variable is added as a property to the global object (which depending on the environment JavaScript is running in) most of the time will be the <code>window</code> object. If you declare a variable inside of a function in JavaScript using the <code>var</code> syntax then that variable is only available within that function (unless it&#39;s accessible via some priviledged object).</p>
<p>In Ruby, if you declare a variable inside a function with no prefix then it is only available within that function. If you prefix it with a dollar sign (e.g. <code>$my_var = 123</code>) then that declares it as a global variable and is accessible from any where in the program.</p>
<p>When using Classes, if you declare a variable within the class using an <code>@</code> prefix (e.g. <code>@my_var = 123</code>) then that variable is available to the object created by that class only (also known as an &#39;instance variable&#39;). Where as a double <code>@@</code> (e.g. <code>@@my_var = 123</code>) is known as a &#39;class variable&#39; which means it is available to all objects created by that particular class and any changes to this class variable is reflected in all objects created from that class. </p>
<p>So for example, if I have a class called &quot;MyClass&quot; and inside of it I set <code>@@my_var</code> to equal 456 instead of 123 then every object created from &quot;MyClass&quot; will have <code>my_var</code> set to 456. Whereas if &quot;MyClass&quot; had <code>@my_var</code> set to 123 and I create a new object from that class and set <code>@my_var</code> to 456 - an &#39;instance variable&#39; - then only that object would see the value of <code>@my_var</code> as 456, all other objects created from the class would still see the value as 123. It sounds tricky but it&#39;s not that bad really. Here is an example of what the above was trying to explain… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="c1"># Following classes &#39;MyClass&#39; and &#39;MyClass2&#39; demonstrate difference between &#39;class variable&#39; and &#39;instance variable&#39;</span>
<span class="k">class</span> <span class="nc">MyClass</span>
    <span class="k">def</span> <span class="nf">initialize</span>
        <span class="vc">@@class_var</span> <span class="o">=</span> <span class="mi">123</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">showValue</span>
        <span class="nb">puts</span> <span class="vc">@@class_var</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">setValue</span>
        <span class="vc">@@class_var</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">MyClass2</span>
    <span class="k">def</span> <span class="nf">initialize</span>
        <span class="vi">@class_var</span> <span class="o">=</span> <span class="mi">123</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">showValue</span>
        <span class="nb">puts</span> <span class="vi">@class_var</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">setValue</span>
        <span class="vi">@class_var</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="c1">#############################</span>

<span class="c1"># This is the &#39;class variable&#39;</span>

<span class="n">objA</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<span class="n">objB</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>

<span class="n">objA</span><span class="o">.</span><span class="n">showValue</span> <span class="c1"># =&gt; 123</span>
<span class="n">objB</span><span class="o">.</span><span class="n">showValue</span> <span class="c1"># =&gt; 123</span>

<span class="n">objA</span><span class="o">.</span><span class="n">setValue</span>

<span class="n">objA</span><span class="o">.</span><span class="n">showValue</span> <span class="c1"># =&gt; 456</span>
<span class="n">objB</span><span class="o">.</span><span class="n">showValue</span> <span class="c1"># =&gt; 456</span>

<span class="c1">#############################</span>

<span class="c1"># This is the &#39;instance variable&#39;</span>

<span class="n">objC</span> <span class="o">=</span> <span class="no">MyClass2</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<span class="n">objD</span> <span class="o">=</span> <span class="no">MyClass2</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>

<span class="n">objC</span><span class="o">.</span><span class="n">showValue</span> <span class="c1"># =&gt; 123</span>
<span class="n">objD</span><span class="o">.</span><span class="n">showValue</span> <span class="c1"># =&gt; 123</span>

<span class="n">objC</span><span class="o">.</span><span class="n">setValue</span>

<span class="n">objC</span><span class="o">.</span><span class="n">showValue</span> <span class="c1"># =&gt; 456</span>
<span class="n">objD</span><span class="o">.</span><span class="n">showValue</span> <span class="c1"># =&gt; 123</span>
</pre></div>
</code></pre>
<h2><a name="magic-variables"class="anchor" href="#magic-variables"><span class="header-link"></span></a>Magic Variables</h2>
<p>There are &#39;magic&#39; variables (like predefined variables in PHP).</p>
<p>For example you have <code>__FILE__</code> which refers to the current file being executed and there is also <code>$0</code> which refers to the file used to start the program. I mention these two specifically because these are used in the getting started examples on the <a href="http://www.ruby-lang.org/">Ruby website</a>.</p>
<h2><a name="constants"class="anchor" href="#constants"><span class="header-link"></span></a>Constants</h2>
<p>Constants are variables that cannot be changed once they are set. Any variable that is capitalised (e.g. <code>Myconstant</code>) is made into a constant. </p>
<p>In other languages a constant is normally either prefixed with the keyword <code>constant Myconstant</code> or is all caps <code>MYCONSTANT</code>.</p>
<p>If you try to overwrite a constant you&#39;ll get the following message: <code>warning: already initialized constant</code> - although as far as I can tell by testing this in irb it seems to change the constant and only warns you rather than actually preventing you from changing the value? <strong><em>Maybe a Rubyist reading this can clarify if this is expected behaviour.</em></strong> </p>
<h2><a name="symbols"class="anchor" href="#symbols"><span class="header-link"></span></a>Symbols</h2>
<p>Symbols are like static variables (or constants). They are used as identifiers, as a way to keep code cleaner.</p>
<p>If you had lots of hashes (which we&#39;ll come to later) and you have a key/property called &quot;name&quot; then you could write your hash like so…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">hash1</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Mark&quot;</span> <span class="p">}</span>
<span class="n">hash2</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Brad&quot;</span> <span class="p">}</span>
<span class="n">hash3</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ash&quot;</span> <span class="p">}</span>
<span class="n">hash4</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Neil&quot;</span> <span class="p">}</span>
</pre></div>
</code></pre>
<p>…but <code>&quot;name&quot;</code> is being re-created in memory every time it&#39;s referenced. It&#39;s much more energy efficient to use a Symbol which looks like a variable but is prefixed with a colon <code>:name</code>…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">hash1</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Mark&quot;</span> <span class="p">}</span>
<span class="n">hash2</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Brad&quot;</span> <span class="p">}</span>
<span class="n">hash3</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ash&quot;</span> <span class="p">}</span>
<span class="n">hash4</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Neil&quot;</span> <span class="p">}</span>
</pre></div>
</code></pre>
<p>…as you can see, Symbols don&#39;t have values like variables, they are literally just used as efficient identifiers.</p>
<h2><a name="functions-methods"class="anchor" href="#functions-methods"><span class="header-link"></span></a>Functions/Methods</h2>
<p>In Ruby everything is an Object (even Strings and Integers) so when you&#39;re defining a function you&#39;re really defining a method (methods are the same as functions but you normally call a function a method when it&#39;s attached to an object).</p>
<p>To define a method the syntax is:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">method_name</span> <span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
    <span class="sr">//</span> <span class="n">function</span> <span class="n">code</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>In JavaScript, if a method doesn&#39;t explicitly specify a return value then it returns <code>undefined</code>. In Ruby a method will return the last expression evaluated in its body, and if there isn&#39;t one then it will return <code>nil</code> (<code>nil</code> is equivalent to <code>null</code> in PHP).</p>
<p>As was noted in the above &#39;Variables&#39; section about variables being able to assigned multiple values, this can come in handy with method returning multiple values as well (which is quite interesting as I&#39;m only used to functions in JavaScript returning a single value)… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">myMethod</span> 
    <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span> <span class="c1"># this being the last expression, this is what&#39;s returned</span>
<span class="k">end</span>

<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">myMethod</span><span class="p">;</span> <span class="c1"># =&gt; a = 1, b = 2</span>
</pre></div>
</code></pre>
<p>You can call a method without parenthesis, e.g. <code>myMethod</code> apposed to <code>myMethod()</code>. The choice is yours whether you use parenthesis or not - personally there are times where I can see myself not needing them and other times using them so it&#39;s crystal clear that what I&#39;m doing is calling a method (time will tell - but I understand a good practice is to use parenthesis whenever a method expects arguments to be passed otherwise there is no point in using them).</p>
<p>But note that with multiple arguments the caller must not have a space between the parenthesis and the function name.</p>
<p>So for example, these work…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">welcome</span><span class="p">(</span><span class="s2">&quot;Mark&quot;</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="n">welcome</span><span class="s2">&quot;Mark&quot;</span><span class="p">,</span> <span class="mi">30</span>
<span class="n">welcome</span> <span class="s2">&quot;Mark&quot;</span><span class="p">,</span> <span class="mi">30</span>
</pre></div>
</code></pre>
<p>…but this doesn&#39;t <code>welcome (&quot;Mark&quot;, 30)</code>.</p>
<p>And calling a method which takes no arguments will also cause an error when called using a space between the method name and the parenthesis.</p>
<p>e.g. <code>Person.speak ()</code> =&gt; error but <code>Person.speak()</code> or <code>Person.speak</code> is fine.</p>
<p>You can specify default values for arguments…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">welcome</span> <span class="p">(</span><span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;World&quot;</span><span class="p">,</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!, I see you&#39;re </span><span class="si">#{</span><span class="n">age</span><span class="si">}</span><span class="s2"> years old.&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…which can be used as follows…</p>
<p><code>welcome</code> =&gt; Hello World! Looks like you&#39;re 1 today<br><code>welcome &quot;Mark&quot;</code> =&gt; Hello Mark! Looks like you&#39;re 1 today<br><code>welcome &quot;Mark&quot;, 30</code> =&gt; Hello Mark! Looks like you&#39;re 30 today</p>
<p>You can also add new methods to an existing object just by prefixing the name of the method with the relevant object… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nc">Math</span><span class="o">.</span><span class="nf">someNewThing</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> 
    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2"> was here&quot;</span>
<span class="k">end</span>

<span class="no">Math</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="s2">&quot;someNewThing&quot;</span><span class="p">)</span> <span class="c1"># =&gt; true</span>

<span class="no">Math</span><span class="o">.</span><span class="n">someNewThing</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span> <span class="c1"># =&gt; 123 was here</span>
<span class="no">Math</span><span class="o">.</span><span class="n">someNewThing</span><span class="p">(</span><span class="s2">&quot;abc&quot;</span><span class="p">)</span> <span class="c1"># =&gt; abc was here</span>
</pre></div>
</code></pre>
<p>…in Ruby these types of method declarations are referred to as &#39;class methods&#39; (or &#39;singleton methods&#39;)</p>
<p>In a similar example of extending already defined Classes:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Fixnum</span>
    <span class="k">def</span> <span class="nf">seconds</span>
        <span class="nb">self</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">minutes</span>
        <span class="nb">self</span> <span class="o">*</span> <span class="mi">60</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">hours</span>
        <span class="nb">self</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">days</span>
        <span class="nb">self</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span>
    <span class="k">end</span> 
<span class="k">end</span>

<span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
<span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="mi">10</span><span class="o">.</span><span class="n">minutes</span>
<span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="mi">16</span><span class="o">.</span><span class="n">hours</span>
<span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span>
</pre></div>
</code></pre>
<p>Note: you might see methods that are called using a ? at the end, these indicate that the method will return a Boolean value (e.g. <code>respond_to?</code> which you&#39;ll see below in the &#39;Classes&#39; section)… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">x</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">x</span><span class="o">.</span><span class="n">empty?</span> <span class="c1"># =&gt; true (…or x.empty?() if you prefer the use of parenthesis)</span>

<span class="n">x</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">x</span><span class="o">.</span><span class="n">empty?</span> <span class="c1"># =&gt; false</span>
</pre></div>
</code></pre>
<p>If you want to know what methods are available to an object/class then look at the <code>class</code> of the object and then inspect the methods available… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">my_hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Mark&quot;</span> <span class="p">}</span>
<span class="n">my_hash</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Hash</span>
<span class="no">Hash</span><span class="o">.</span><span class="n">instance_methods</span> <span class="c1"># =&gt; [:rehash, :to_hash, :to_a, :inspect, :to_s, :==, :[], :hash, :eql?, :fetch, :[]=, :store, :default, :default=, :default_proc, :default_proc=, :key, :index, :size, :length, :empty?, :each_value, :each_key, :each_pair, :each, :keys, :values, :values_at, :shift, :delete, :delete_if, :keep_if, :select, :select!, :reject, :reject!, :clear, :invert, :update, :replace, :merge!, :merge, :assoc, :rassoc, :flatten, :include?, :member?, :has_key?, :has_value?, :key?, :value?, :compare_by_identity, :compare_by_identity?, :entries, :sort, :sort_by, :grep, :count, :find, :detect, :find_index, :find_all, :collect, :map, :flat_map, :collect_concat, :inject, :reduce, :partition, :group_by, :first, :all?, :any?, :one?, :none?, :min, :max, :minmax, :min_by, :max_by, :minmax_by, :each_with_index, :reverse_each, :each_entry, :each_slice, :each_cons, :each_with_object, :zip, :take, :take_while, :drop, :drop_while, :cycle, :chunk, :slice_before, :nil?, :===, :=~, :!~, :&lt;=&gt;, :class, :singleton_class, :clone, :dup, :initialize_dup, :initialize_clone, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze, :frozen?, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :instance_of?, :kind_of?, :is_a?, :tap, :send, :public_send, :respond_to?, :respond_to_missing?, :extend, :display, :method, :public_method, :define_singleton_method, :object_id, :to_enum, :enum_for, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]</span>
</pre></div>
</code></pre>
<h2><a name="blocks"class="anchor" href="#blocks"><span class="header-link"></span></a>Blocks</h2>
<p>In Ruby a <code>code block</code> is any piece of code within either <code>do..end</code> or curly brackets <code>{}</code>. </p>
<p>When creating a method, if you want to pass a code block in as an argument, you need to prefix the argument name with an ampersand <code>&amp;</code> like so…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">myfn</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">code_block</span><span class="p">)</span>
    <span class="sx">%w(a e I o u)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">vowel</span><span class="o">|</span>
        <span class="n">code_block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">vowel</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">myfn</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>
</pre></div>
</code></pre>
<p>…what the above code does is create an Array and then iterates over it. Every item in the Array is passed to the code block (the code block which is passed in as an argument to the method).</p>
<p>But the above can be simplified...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">myfn</span>
    <span class="sx">%w(a e I o u)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">vowel</span><span class="o">|</span>
        <span class="k">yield</span> <span class="n">vowel</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">myfn</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>
</pre></div>
</code></pre>
<p>...this isn&#39;t as obvious but is less verbose (the <code>yield</code> keyword automatically detects the code block and passes control to it rather than us having to pass through the code block and executing the <code>call</code> method on the code block).</p>
<h2><a name="lambdas-procs"class="anchor" href="#lambdas-procs"><span class="header-link"></span></a>Lambdas/Procs</h2>
<p>Ruby also has Lambdas and Proc objects. These are similar to Blocks but have some differences worth mentioning.</p>
<h3><a name="procs"class="anchor" href="#procs"><span class="header-link"></span></a>Procs</h3>
<p>Procs are the same as blocks but can be saved into a variable so they are easily reusable. A block on the other hand can&#39;t be reused. It can only be retyped for every method that you want to use it on. </p>
<p>The following is an example of how to use a Proc object instead of Block...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">my_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>

<span class="k">def</span> <span class="nf">myfn</span> <span class="n">proc_obj</span>
    <span class="sx">%w(a e I o u)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">vowel</span><span class="o">|</span>
        <span class="n">proc_obj</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">vowel</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">myfn</span> <span class="n">my_proc</span>
</pre></div>
</code></pre>
<p>Notice we use a <code>call</code> method on the Proc object rather than the <code>yield</code> keyword which we use for a Block.</p>
<p>So if you have a one time piece of code you want to pass to a method then a block would make sense, but if you have a piece of code that you want to reuse across multiple methods then best to make it into a Proc object.</p>
<h3><a name="lambdas"class="anchor" href="#lambdas"><span class="header-link"></span></a>Lambdas</h3>
<p>Lambdas are the same as Proc objects but with two slight differences.</p>
<ol>
<li>If you pass in the wrong number of arguments then the lambda will throw <code>ArgumentError</code></li>
<li>If they have a <code>return</code> statement then the whole method wont suddenly return from that point (Proc objects cause the rest of the method to halt)</li>
</ol>
<p>The following is an example of how to use a Proc object instead of Block...</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">my_lambda</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>

<span class="k">def</span> <span class="nf">myfn</span> <span class="n">lambda_obj</span>
    <span class="sx">%w(a e I o u)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">vowel</span><span class="o">|</span>
        <span class="n">lambda_obj</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">vowel</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">myfn</span> <span class="n">my_lambda</span>
</pre></div>
</code></pre>
<p>Lambdas are very popular in other languages hence it&#39;s inclusion in Ruby (it&#39;s just a nice way to pass around code blocks). </p>
<p>The following example is modified from a test on RubyMonk but is a good example of using lambdas…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">with_names</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
  <span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="o">[</span> <span class="o">[</span><span class="s2">&quot;Christopher&quot;</span><span class="p">,</span> <span class="s2">&quot;Alexander&quot;</span><span class="o">]</span><span class="p">,</span>
    <span class="o">[</span><span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="s2">&quot;McCarthy&quot;</span><span class="o">]</span><span class="p">,</span>
    <span class="o">[</span><span class="s2">&quot;Joshua&quot;</span><span class="p">,</span> <span class="s2">&quot;Norton&quot;</span><span class="o">]</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pair</span><span class="o">|</span>
      <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">fn</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">pair</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">pair</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">result</span>
<span class="k">end</span>

<span class="n">l</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">name1</span><span class="p">,</span> <span class="n">name2</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">name1</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">name2</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span> 

<span class="n">with_names</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</pre></div>
</code></pre>
<h2><a name="classes"class="anchor" href="#classes"><span class="header-link"></span></a>Classes</h2>
<p>The Classes syntax is as follows…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ClassName</span>
    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">()</span>
        <span class="sr">//</span> <span class="n">code</span>
    <span class="k">end</span>
    <span class="sr">//</span> <span class="n">code</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Instance variables for classes are defined using <code>@variable_name</code> and are available to all methods of the class.</p>
<p>For example…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Person</span>
    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">(</span><span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;Bob&quot;</span><span class="p">)</span>
        <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">speak</span>
        <span class="nb">puts</span> <span class="s2">&quot;Hello, my name is </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">employee</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Mark&quot;</span><span class="p">)</span>
</pre></div>
</code></pre>
<p>…executing this via irb returns <code>#&lt;Person:0x007feb988ce048 @name=&quot;Mark&quot;&gt;</code></p>
<p>Now executing <code>employee.speak</code> returns &quot;Hi, my name is Mark&quot;.</p>
<p>To check what methods exist for an object/class we can use <code>instance_methods</code> (e.g. using above example Class: <code>Person.instance_methods</code>) which shows ALL methods, even those you&#39;ve not defined yourself.</p>
<p>We can ignore ancestor methods by setting the <code>instance_methods</code> argument to false: <code>Person.instance_methods(false)</code> which then just shows us the one method we defined (you could use no parenthesis <code>Person.instance_methods false</code> but I don&#39;t think that is as clear in this instance).</p>
<p>A quick note about the use of parenthesis: I think there is no right or wrong choice but rather it depends on the tastes of the invidual user. I personally find no-parenthesis cleaner, but in some places it is just too confusing without them, so I like to mix and match wherever I feel it&#39;s appropriate.</p>
<p>We can do a check to see if our object/class has a certain method available by checking if it <code>responds</code> to it…</p>
<p><code>employee.respond_to?(&quot;speak&quot;)</code> =&gt; true<br><code>employee.respond_to? &quot;speak&quot;</code> =&gt; true</p>
<p>To create privileged methods, within the class we need to specify <code>attr_accessor :variable_name</code> (where by <code>variable_name</code> is replaced with the appropriate value). This then defines two additional methods onto the class which provides access to the specified variable. The two methods added are <code>variable_name</code> (which &#39;gets&#39; the value) and <code>variable_name=</code> (which &#39;sets&#39; the value).</p>
<p>For example…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Test</span>
    <span class="kp">attr_accessor</span> <span class="ss">:user_name</span>
    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">(</span><span class="nb">name</span><span class="p">)</span>
        <span class="vi">@user_name</span> <span class="o">=</span> <span class="nb">name</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">speak</span>
        <span class="nb">puts</span> <span class="s2">&quot;hello </span><span class="si">#{</span><span class="vi">@user_name</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">tester</span> <span class="o">=</span> <span class="no">Test</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Mark&quot;</span><span class="p">)</span>
</pre></div>
</code></pre>
<p><code>tester.speak</code> =&gt; hello Mark<br><code>tester.user_name</code> =&gt; &quot;Mark&quot;<br><code>tester.user_name= &quot;Bob&quot;</code> =&gt; &quot;Bob&quot;<br><code>tester.user_name</code> =&gt; &quot;Bob&quot;</p>
<p>Note: as well as <code>:attr_accessor</code> which creates getter and setter methods, there is <code>:attr_reader</code> which only creates a getter method, and <code>:attr_writer</code> which only creates a setter method.</p>
<h2><a name="loops"class="anchor" href="#loops"><span class="header-link"></span></a>Loops</h2>
<p>Loops in Ruby are straight forward…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">list</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>

<span class="n">list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="n">item</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>The <code>each</code> method executes a block of code for each item in the Array. The <code>do…end</code> section is such a block. The pipes <code>||</code> denotes the parameter <code>|name|</code> and that parameter is bound to each list item.</p>
<p>One thing to be aware of (and you&#39;ll see this later under the &#39;Numbers&#39; section), you can swap out <code>do…end</code> for normal curly brackets… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">list</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>

<span class="n">list</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="n">item</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…but for an <code>each</code> loop it doesn&#39;t look as nice as <code>do…end</code> so I keep with that style instead. But as you&#39;ll see I still like using curly brackets for other types of loops that don&#39;t have parameters.</p>
<p>There is a standard <code>while</code> loop as well within Ruby… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">10</span>
    <span class="nb">puts</span> <span class="s2">&quot;count = </span><span class="si">#{</span><span class="n">count</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1"># Ruby has neither ++ or -- to increment/decrement a value</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>Also with a <code>while</code> loop (if you&#39;re using a &#39;switch..case&#39; style statement - like you would see in JavaScript) you can explicitly return a value… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">myFunction</span>
    <span class="n">xyz</span> <span class="o">=</span> <span class="s2">&quot;def&quot;</span>
    <span class="k">while</span> <span class="kp">true</span>
        <span class="k">case</span> <span class="n">xyz</span>
            <span class="k">when</span> <span class="s2">&quot;abc&quot;</span>
                <span class="k">return</span> <span class="kp">true</span>
            <span class="k">when</span> <span class="s2">&quot;def&quot;</span>
                <span class="k">return</span> <span class="kp">false</span>
            <span class="k">else</span>
                <span class="k">return</span> <span class="kp">nil</span> <span class="c1"># in case xyz doesn&#39;t equal what we expect</span>
        <span class="k">end</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>There are other types of iterator methods such as <code>map</code>… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">myArray</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
<span class="n">newArray</span> <span class="o">=</span> <span class="n">myArray</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
    <span class="n">x</span><span class="o">*</span><span class="n">x</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>…which returns <code>[1, 4, 9, 16]</code></p>
<h2><a name="conditionals"class="anchor" href="#conditionals"><span class="header-link"></span></a>Conditionals</h2>
<p>Ruby is slightly different to other programming languages in that even its syntax is very expression-oriented. So where a control structure like <code>if</code> would be called a &#39;statement&#39; in other languages, in Ruby it is actually an expression which means it can be assigned to a variable like so…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">result</span> <span class="o">=</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="k">then</span> 
    <span class="n">x</span>
<span class="k">else</span> 
    <span class="n">y</span>
<span class="k">end</span>

<span class="c1"># depending on how complicated your condition is you could put it all on one line like so… </span>
<span class="n">result</span> <span class="o">=</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="k">then</span> <span class="n">x</span> <span class="k">else</span> <span class="n">y</span> <span class="k">end</span>
</pre></div>
</code></pre>
<p>…and so, as we&#39;ve mentioned before with <code>functions</code>, these types of blocks return the last expression evalutated inside the block, so in the above example the last expression is returned and stored in the <code>result</code> variable.</p>
<h2><a name="strings"class="anchor" href="#strings"><span class="header-link"></span></a>Strings</h2>
<p>Building up string values can be a bit of a nightmare in other languages. I know in PHP and JavaScript it&#39;s a real pain without including some kind of templating rendering (such as <code>Mustache</code>). But in Ruby they provide a technique called Interpolation which is where method arguments and variables can be inserted into a string (must be a double quoted string, not single quotes) using: <code>#{variable_name}</code>. </p>
<p>For example… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">welcome</span> <span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span>
<span class="k">end</span>

<span class="n">welcome</span><span class="p">(</span><span class="s2">&quot;Mark&quot;</span><span class="p">)</span>
</pre></div>
</code></pre>
<p>Multiple arguments work the same way…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="k">def</span> <span class="nf">welcome</span> <span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!, I see you&#39;re </span><span class="si">#{</span><span class="n">age</span><span class="si">}</span><span class="s2"> years old.&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>You could do the same with simple string concatenation… </p>
<pre><code><div class="highlight"><pre><span class="nx">puts</span> <span class="s2">&quot;Hello&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;!, I see you&#39;re &quot;</span> <span class="o">+</span> <span class="nx">age</span> <span class="o">+</span> <span class="s2">&quot; years old.&quot;</span>
</pre></div>
</code></pre>
<p>…but as you can see it&#39;s not as nice to look at or easy to read and definitely isn&#39;t as maintainable.</p>
<p>As mentioned earlier, as everything in Ruby is an object (even Strings) there are methods available to strings such as:</p>
<ul>
<li><code>sub</code> (basic find/replace)</li>
<li><code>gsub</code> (basic &#39;global&#39; find/replace)</li>
<li><code>scan</code> (regex based search which executes code block for each match)</li>
<li><code>match</code> (regex based search with Array of results returned)</li>
</ul>
<p>For example…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="s2">&quot;foobarfoobar&quot;</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span>
<span class="c1"># =&gt; foofoofoobar</span>

<span class="s2">&quot;foobarfoobar&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span>
<span class="c1"># =&gt; foofoofoofoo</span>

<span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;This is a test&quot;</span>
<span class="n">x</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sr">/^[a-zA-Z]{4}/</span><span class="p">,</span> <span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
<span class="c1"># =&gt; &quot;Hello is a test&quot;</span>

<span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;The car cost £2000 in 2012&quot;</span>
<span class="n">x</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\d+/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">match</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">match</span> <span class="p">}</span>
<span class="c1"># =&gt; 2000</span>
<span class="c1"># =&gt; 2012</span>
<span class="c1"># scan() without the code block returns an array of matches</span>

<span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;This is a test&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(\w+) (\w+)/</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># =&gt; This is</span>
<span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># =&gt; This</span>
<span class="nb">puts</span> <span class="n">x</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># =&gt; is</span>
</pre></div>
</code></pre>
<h2><a name="arrays"class="anchor" href="#arrays"><span class="header-link"></span></a>Arrays</h2>
<p>We&#39;ve seen Arrays used quite a bit already, but lets look at some additional methods and operators available… </p>
<p>The bitwise operator <code>&lt;&lt;</code> is used to add a new item to an array:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">x</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;abc&quot;</span>
</pre></div>
</code></pre>
<p>…which is equivalent to <code>x.push(&quot;abc&quot;)</code></p>
<p>Note: Strings also use the <code>&lt;&lt;</code> operator to add content to them:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">testString</span> <span class="o">=</span> <span class="s2">&quot;this is my string&quot;</span>
<span class="n">testString</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot; that has extra stuff added to it&quot;</span>
<span class="n">testString</span> <span class="c1"># =&gt; &quot;this is my string that has extra stuff added to it&quot;</span>
</pre></div>
</code></pre>
<p>There are methods for removing the last item in the Array <code>x.pop()</code> as well as joining an array items into a string using the specified character(s) as a separator <code>x.join(&quot;, &quot;)</code>.</p>
<p>With Strings you can use the <code>split</code> method to convert a string into an Array: <code>&quot;this is my string&quot;.split(&quot; &quot;)</code> which returns <code>=&gt; [&quot;this&quot;, &quot;is&quot;, &quot;my&quot;, &quot;string&quot;]</code>.</p>
<p>If you need to concatenate two Arrays you can use the <code>concat</code> method… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>
<span class="n">arr</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="o">]</span><span class="p">)</span>
<span class="n">arr</span> <span class="c1"># =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>
</pre></div>
</code></pre>
<p>…there is also more basic concatenation using the <code>+</code> operator <code>arr + [&quot;d&quot;, &quot;e&quot;]</code> which returns <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</code> but one caveat is that you must remember to set the array to be overwritten. For example, the previous code will return an Array which is a combination of <code>arr</code> and <code>[&quot;d&quot;, &quot;e&quot;]</code> but it doesn&#39;t actually overwrite the original Array (<code>arr</code> will still return <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code>). If you were expecting <code>arr</code> to be changed to <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</code> then you would need to explicitly overwrite <code>arr</code> using: <code>arr += [&quot;d&quot;, &quot;e&quot;]</code> instead.</p>
<p>There are two other useful Array methods <code>arr.first</code> and <code>arr.last</code>. Can you guess what they do? That&#39;s right, they return the first and last items in the Array.</p>
<p>Some other interesting features of Ruby is the ability to write Arrays more quickly using the <code>%w()</code> method. So instead of writing <code>[&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;]</code> you would write <code>%w(a e i o u)</code> which generates the same Array.</p>
<p>There are many Array methods for inserting new items into an Array, but you can also use Ranges (which normally work like <code>(&#39;A&#39;..&#39;Z&#39;)</code>):</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span>
<span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>
<span class="n">arr</span> <span class="c1"># =&gt; [0, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 4, 5, 6]</span>
</pre></div>
</code></pre>
<h2><a name="hashes"class="anchor" href="#hashes"><span class="header-link"></span></a>Hashes</h2>
<p>Hashes are like &#39;objects&#39; in JavaScript and &#39;associative arrays&#39; in other languages. Like Arrays they have an iterator method called <code>each</code> which works the same way, the only difference being is that is doesn&#39;t just pass the value through but the &#39;key&#39; as well.</p>
<p>So for example to create a hash you would use… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> 
    <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…then you can access the relevant key/values (and add new key/values) like so… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">h</span><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="o">]</span>     <span class="c1"># =&gt; 1</span>
<span class="n">h</span><span class="o">[</span><span class="s2">&quot;b&quot;</span><span class="o">]</span>     <span class="c1"># =&gt; 2</span>
<span class="n">h</span><span class="o">[</span><span class="s2">&quot;c&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">3</span> <span class="c1"># create a new key/value</span>
<span class="n">h</span><span class="o">[</span><span class="s2">&quot;c&quot;</span><span class="o">]</span>     <span class="c1"># =&gt; 3</span>
</pre></div>
</code></pre>
<p>…and finally you can loop through the hash…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="n">h</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="s2">&quot;The value: </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2"> belongs to the key </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>You don&#39;t have to use a String as a hash <code>key</code>. You can use any object or Symbol.</p>
<p>In Ruby 1.9 the keys of a hash are returned in the order they were added when looping properties (unlike JavaScript where the order are not guaranteed).</p>
<p>To see what keys are available in an object use the <code>keys</code> property:</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Mark&quot;</span><span class="p">,</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="mi">30</span> <span class="p">}</span>
<span class="nb">hash</span><span class="o">.</span><span class="n">keys</span> <span class="c1"># =&gt; [:name, :age]</span>
</pre></div>
</code></pre>
<p>You can delete a key/value from the hash using <code>hash.delete(key)</code></p>
<p>Hashes also have shortcut for deleting properties depending on their value: <code>hash.delete_if { |key, value| value &lt;= 30 }</code></p>
<h2><a name="numbers-and-how-everything-is-an-object-similar-to-javascript-"class="anchor" href="#numbers-and-how-everything-is-an-object-similar-to-javascript-"><span class="header-link"></span></a>Numbers (and how &#39;everything is an object&#39; - similar to JavaScript)</h2>
<p>In Ruby, all values are objects. This includes even simple things like numeric literals. So for example you can use a number to help carry out a certain action &#39;x&#39; amount of times…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
    <span class="nb">puts</span> <span class="s2">&quot;This gets written three times&quot;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>And as explained earlier you can swap curly brackets for <code>do…end</code>…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;This gets written three times&quot;</span>
<span class="k">end</span>
</pre></div>
</code></pre>
<p>But you can also do…</p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span> <span class="p">{</span> 
    <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> 
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…which can be interchanged with… </p>
<pre><code class="lang-ruby"><div class="highlight"><pre><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> 
    <span class="nb">puts</span> <span class="n">x</span> 
<span class="k">end</span>
</pre></div>
</code></pre>
<p>I normally find anything that takes parameters <code>|x|</code> looks better with <code>do…end</code> style syntax.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>Well, this is just an &#39;introduction&#39; so as you can see although we&#39;ve covered a lot of ground already we&#39;re still literally just scratching the surface. As I start learning more about Ruby I&#39;ll create new blog posts to follow on from here.</p>
]]></description><link>http://www.integralist.co.uk/posts/introduction-to-ruby/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/introduction-to-ruby/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Mon, 18 Jun 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Host Methods vs Native Methods]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 6mins</em></p>
<ul>
<li>Introduction</li>
<li>What they are?</li>
<li>How to detect them?</li>
<li>When is it OK to modify them?</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>This was intended as a short and overly simplified post about Host methods and Native methods.</p>
<h2><a name="what-they-are-"class="anchor" href="#what-they-are-"><span class="header-link"></span></a>What they are?</h2>
<p>Native methods are built-in functions provided by the ECMAScript core specification. So things like Object methods (e.g. <code>Object.create</code>), Array methods (e.g. <code>Array#forEach</code>) etc.</p>
<p>Host methods are functions provided by the host environment (most of the time when working in web development the host environment will be the user’s web browser). So things like the DOM API and the Events object are host objects/methods (e.g. <code>attachEvent</code> is a host method and <code>addEventListener</code> is a host method)</p>
<h2><a name="how-to-detect-them-"class="anchor" href="#how-to-detect-them-"><span class="header-link"></span></a>How to detect them?</h2>
<p>Detecting Native methods is relatively straight forward. The real problem comes when you need to determine whether the object/method you’re detecting actually works the way the specification dictates it should work. So just checking it is available to use isn’t good enough.</p>
<p>Detecting host methods is similar but a lot more problematic, because the ECMAScript specification states that the host environment can implement certain methods however they like and so there is no guarantee that your checks for certain host methods (which may work today) will work in future.</p>
<p>We’ll give an example of each so you can get an idea of what I mean…</p>
<p>To detect a Native method such as Array#forEach you should be able to do the following:</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="p">)</span> <span class="p">{</span> 
    <span class="cm">/* polyfill for missing forEach method */</span> 
<span class="p">}</span>
</pre></div>
</code></pre>
<p>Note: polyfill is a term that Remy Sharp coined which means ‘a shim that mimics a future API’ (see: <a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/"><a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/">http://remysharp.com/2010/10/08/what-is-a-polyfill/</a></a>)</p>
<p>But the issue you could encounter in this example is if you’re inheriting a project from another developer and they have already extended the Native Array object with a forEach method and their polyfill version of the missing forEach function doesn’t work how the specification has dictated it should then you could find your code errors at hard to debug stages because of the difference in implementation where you’re passing parameters into a polyfill’ed method and that method hasn’t been implemented properly so the extra parameters either throw an error or (potentially worse) silently fail.</p>
<p>This is where you either ‘suck it and see’ (which is a bad idea, but not always unavoidable), or you attempt genuine ‘feature detection’ which means (in this example) you create a test Array and test the forEach method works how you expect it to.</p>
<p>The downsides to this approach (although it is the most robust and future-proof way of writing your code) is that all these checks are a performance penalty. If you’re sure the method you’re checking for is going to work how you expect it to then should you waste time/effort writing additional checks/tests to ensure the method works how the specification dictates? What happens if you do the full feature detection and discover the method doesn’t work how you expect it? You’ll still then need to implement some kind of fallback or lose the functionality that relies on that method.</p>
<p>These are important decisions that need to be made and ones that are outside the realms of this post I’m afraid (simply because there are no easy answers).</p>
<p>Now, detecting Host methods is actually worse because they can be implemented in any fashion the host environment chooses.</p>
<p>So far it has been <em>noted</em> that checking the <code>typeof</code> result for a Host method will normally result in either function, object or unknown, so if you get one of these back as a result then it’s a good chance the host object you’re checking for is available to use, but as you should be able to tell by now, this is a flawed process… fun heh!</p>
<p>Again, this isn’t a reliable assumption to make, because in a future/new host environment they might have a <code>typeof</code> result that is none of the above. Literally you could check the <code>typeof</code> for a method and its result could be <em>spacecraft</em> - there are no rules as far as the Host environment is concerned!</p>
<p>But for testing a host method exists, the following function has become the de-facto standard:</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/*</span>
<span class="cm"> * Feature Testing a Host Method</span>
<span class="cm"> * Because a callable host object can legitimately have any typeof result then it can&#39;t be relied upon.</span>
<span class="cm"> *</span>
<span class="cm"> * @notes:</span>
<span class="cm"> * The reason for the &amp;&amp; !!object[property] is because in ECMAScript version 3, </span>
<span class="cm"> * a null object has typeof result &#39;object&#39; (which is considered a bug).</span>
<span class="cm"> * In future versions (ECMAScript 6+) the typeof result will be &#39;null&#39; (as it should be).</span>
<span class="cm"> * </span>
<span class="cm"> * @reference: http://michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting</span>
<span class="cm"> */</span>

<span class="kd">function</span> <span class="nx">isHostMethod</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="nx">property</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">object</span><span class="p">[</span><span class="nx">property</span><span class="p">];</span>

    <span class="k">return</span> <span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;function&#39;</span> <span class="o">||</span> <span class="c1">// This is the result we&#39;re expecting (as the test is for a method)</span>
           <span class="p">(</span><span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nx">object</span><span class="p">[</span><span class="nx">property</span><span class="p">])</span> <span class="o">||</span> <span class="c1">// Protect against ES3 &#39;null&#39; typeof result being &#39;object&#39;</span>
           <span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;unknown&#39;</span><span class="p">;</span> <span class="c1">// For IE &lt; 9 when Microsoft used ActiveX objects for Native Functions (we&#39;re checking property of ActiveX object)</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>So lets take a quick re-cap of what’s going on here:</p>
<ul>
<li><p><code>function</code>:<br>  For most browsers the <code>typeof</code> operator will result with <code>function</code> when passed a callable host object</p>
</li>
<li><p><code>&#39;object’ &amp;&amp; !!object[property]</code>:<br>  Because we&#39;re dealing with host objects we can&#39;t expect <code>function</code> to be returned, and in most cases (as far as ECMAScript 3 [ES3] implementations are concerned) the result will normally be <code>object</code> which is incorrect but allowed as far as the ES3 spec is concerned.</p>
<p>  So first of all we check for <code>object</code>.</p>
<p>  If that matches we then check to make sure the property coerces to true. The reason for this is that ES3 allows the host to return whatever they like, so if the property you&#39;re checking for is actually <code>null</code> the ES3 <code>typeof</code> result (for most browsers) will still be <code>object</code> even though the result is <code>null</code>! So to work around this issue we coerce the result into a boolean (so if <code>null</code> is the result it will coerce to false and thus this whole expression will return false, otherwise it&#39;ll return true).</p>
</li>
<li><p><code>unknown</code>:<br>  In older versions of IE (less than 9) it implements some of its host objects not as Native functions but as ActiveX objects (admittedly this is deep browser implementation talk and normally you don’t need to know this stuff, but in this instance it’s important to understand what the heck is going on with IE). </p>
<p>  So, in IE calling the <code>typeof</code> operator with properties of an ActiveX Object will result in <code>unknown</code>.</p>
</li>
</ul>
<h2><a name="when-is-it-ok-to-modify-them-"class="anchor" href="#when-is-it-ok-to-modify-them-"><span class="header-link"></span></a>When is it OK to modify them?</h2>
<p>Modifying built-in Native objects isn’t as dangerous as host objects (as already noted by Kangax <a href="http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/"><a href="http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/">http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/</a></a>) but care needs to be taken to ensure the augmented object works as the spec dictates (something that isn’t possible all the time, for example like with <code>Object.create</code>).</p>
<p>As far as host objects are concerned, never ever ever ever modify or augment them, just too dangerous.</p>
]]></description><link>http://www.integralist.co.uk/posts/host-methods-vs-native-methods/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/host-methods-vs-native-methods/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 22 Apr 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Thoughts on current web development practices]]></title><description><![CDATA[<p>Be warned, this is a &#39;long one&#39;, so go grab a cup of coffee… </p>
<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 53mins</em></p>
<ul>
<li>Introduction</li>
<li>HTML: the foundation<ul>
<li>Example HTML</li>
<li>Semantic Elements</li>
<li>Brief Example of Media Queries</li>
<li>Better practice Media Queries</li>
<li>Mobile First Approach</li>
</ul>
</li>
<li>CSS: the styling<ul>
<li>OOCSS &amp; Sass</li>
<li>Modular Structure</li>
<li>Sass Example</li>
<li>Avoiding pre-processor pitfalls</li>
<li>How I write OOCSS</li>
<li>Selectors</li>
<li>Sprites</li>
<li>Responsive Design</li>
<li>Mobile Design: users on the move</li>
<li>Mobile First </li>
<li>Tools</li>
<li>Linting via the Command Line</li>
</ul>
</li>
<li>JavaScript: the behaviour<ul>
<li>AMD</li>
<li>Linting</li>
<li>Code Structure</li>
<li>Pure Functions</li>
</ul>
</li>
<li>Style Guides: keeping things consistent</li>
<li>Testing: making sure stuff works</li>
<li>Performance: running fast</li>
<li>Version Control: keeping track of things</li>
<li>Automation: making life easier</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>I wanted to get down in writing my process for building websites using the <em>current</em> techology available to us (July 2012). It seemed like a good idea to share how I approach web development and to discuss the tools I use to help make my life easier. I&#39;ve had a (un)fortunate history of being able to work on a few large scale applications that have turned out fine but have become a nightmare to maintain or scale - what this means is: I know what techniques just don&#39;t work <em>for me</em> and I&#39;d like to share some insights as to what techniques and tools I think <strong>do</strong> work for getting your project off to the best start possible.</p>
<p>The beauty (or curse, depending on your perspective) of the web is that by the time you read this there may be better ways (again) of doing things. It wasn&#39;t long ago that some of the principles I&#39;ll be discussing today changed from how I used to do things (really they have only been progressively refactored to be more efficient, but some of the stuff I&#39;ll be talking about here have still only come onto my radar in the last year or so).</p>
<p>Ideally where you want to constantly be - doesn&#39;t matter how good you are (or think you are) - is at a stage where you&#39;re eager to improve your skill set. If you are passionate about what you do then this urge to learn should come easily.</p>
<p>For those of you who are on twitter/Google+ all day long and/or are at the cutting edge of all things web development (and even some of you who aren&#39;t) will probably yawn over a lot of what I&#39;m going to be talking about (for example, talking about HTML and laying out a page can seem like a pretty bland subject I know).</p>
<p>This also isn&#39;t a &#39;beginners guide&#39; or &#39;introduction to&#39; style article, I wont be discussing how to write code in the languages that are mentioned, but if you do know everything there is to know about a particular section I&#39;ve gone into then well, that&#39;s all good for you :-)</p>
<p>Now, some of the techniques and tools I&#39;ll be talking about just wont fit right for you and that&#39;s OK! You need to keep trying different things to see if they work <em>for you</em>. Just because everyone is using &quot;Hot Sauce XYZ&quot; software doesn&#39;t mean <em>you</em> have to. Just because &quot;Hot Sauce XYZ&quot; is the talk of the community and is heralded as a modern marvel doesn&#39;t mean <em>you</em> feel the same way about it. Just because I found &quot;Hot Sauce XYZ&quot; to be a life/time saver and I think it&#39;s the future of the web… doesn&#39;t mean <em>you</em> will agree or feel the same. That&#39;s OK! </p>
<p>Take what you need and move on. Shall we begin?</p>
<h2><a name="html-the-foundation-"class="anchor" href="#html-the-foundation-"><span class="header-link"></span></a>HTML: <em>the foundation</em></h2>
<blockquote>
<p>&quot;Hamburgers! The cornerstone to any nutritious breakfast&quot;</p>
</blockquote>
<p>Well, the beginning of any web site (web page/app whatever you happening to be working on) is HTML.</p>
<p>Things have a come a loooong way since the good &#39;ole days of web development. Our HTML mark-up has become streamlined and easier to remember. Hell, I can now remember how to write my <code>doctype</code> without using a template file or Googling for the answer.</p>
<h3><a name="example-html"class="anchor" href="#example-html"><span class="header-link"></span></a>Example HTML</h3>
<p>Below is an example of a web page HTML structure…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="c">&lt;!--[if IE 8]&gt;&lt;html class=&quot;ie8&quot; dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;![endif]--&gt;</span>
<span class="c">&lt;!--[if IE 9]&gt;&lt;html class=&quot;ie9&quot; dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;![endif]--&gt;</span>
<span class="c">&lt;!--[if gt IE 9]&gt;&lt;!--&gt;</span> <span class="nt">&lt;html</span> <span class="na">dir=</span><span class="s">&quot;ltr&quot;</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!--&lt;![endif]--&gt;</span>

    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;Mark McDonnell&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;title&gt;</span>My thoughts on current web development practices<span class="nt">&lt;/title&gt;</span>
        <span class="c">&lt;!--[if lt IE 9]&gt;</span>
<span class="c">        &lt;script src=&quot;/Assets/Scripts/Utils/Elements/html5.js&quot;&gt;&lt;/script&gt;</span>
<span class="c">        &lt;![endif]--&gt;</span>
        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;author&quot;</span> <span class="na">href=</span><span class="s">&quot;/humans.txt&quot;</span> <span class="na">type=</span><span class="s">&quot;text/plain&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;Assets/Styles/mobile.css&quot;</span>  <span class="na">media=</span><span class="s">&quot;only screen and (min-width: 320px)&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;Assets/Styles/tablet.css&quot;</span>  <span class="na">media=</span><span class="s">&quot;only screen and (min-width: 600px) and (max-width: 959px)&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;Assets/Styles/desktop.css&quot;</span> <span class="na">media=</span><span class="s">&quot;only screen and (min-width: 960px)&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!--[if (lt IE 9) &amp; (!IEMobile)]&gt;</span>
<span class="c">        &lt;link rel=&quot;stylesheet&quot; href=&quot;/Assets/Styles/desktop.css&quot;&gt;</span>
<span class="c">        &lt;![endif]--&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        Content
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</code></pre>
<p>This breaks down into the following basic structure…</p>
<ul>
<li>Document Type</li>
<li>Head</li>
<li>Body</li>
</ul>
<p>...we&#39;ll now discuss this a little more in depth, so we&#39;ll dip in and out of subjects (such as mobile and media queries etc) but effectively we&#39;re just taking a top level look around at what our HTML is doing and why.</p>
<p>The <code>doctype</code> lets the browser know how to render our content. We&#39;ve all seen/written the hideously long doctypes, but this has been simplified in HTML5 to just <code>&lt;!doctype html&gt;</code> which makes it a lot easier to write (and to remember!).</p>
<p>We have some <code>meta</code> tags for…</p>
<ul>
<li>ensuring the browser renders the content with UTF-8 encoding:<br><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></li>
<li>set&#39;s the appropriate scale of the viewport on a mobile device:<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></li>
<li>confirms who the author of the page is/was:<br><code>&lt;meta name=&quot;author&quot; content=&quot;Mark McDonnell&quot; /&gt;</code></li>
</ul>
<p>We then have a Microsoft &#39;conditional comment&#39; which says if the browser is less than Internet Explorer version 9 then load a JavaScript file that helps those browsers understand the rendering of HTML5 tags. This can be omitted if you aren&#39;t going to use the newer HTML5 tags (such as: <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;aside&gt;</code> etc).</p>
<p>Next we have a line of code which lets the host know there is a <code>humans.txt</code> file available. The point of this file is to inform the user who built the site (similar to how a <code>robot.txt</code> file informs a Search Engine robot what can/can&#39;t be indexed). There are no strict rules on how the content of this file should be laid out, but I generally use:</p>
<pre><code><div class="highlight"><pre><span class="cm">/* the humans responsible &amp; colophon */</span>
<span class="cm">/* humanstxt.org */</span>

<span class="cm">/* TEAM */</span>
<span class="nx">Company</span> <span class="nx">Name</span><span class="o">:</span> <span class="nx">Developer</span> <span class="nx">A</span><span class="p">,</span> <span class="nx">Developer</span> <span class="nx">B</span><span class="p">,</span> <span class="nx">Developer</span> <span class="nx">C</span>
<span class="nx">Site</span><span class="o">:</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//www.domain.tld/</span>
<span class="nx">Twitter</span><span class="o">:</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//twitter.com/username</span>
<span class="nx">Location</span><span class="o">:</span> <span class="nx">Address</span>
</pre></div>
</code></pre>
<h3><a name="brief-example-of-media-queries"class="anchor" href="#brief-example-of-media-queries"><span class="header-link"></span></a>Brief Example of Media Queries</h3>
<p>After this we link to some CSS files. These stylesheets apply styles based on certain &#39;conditions&#39; (known as &#39;Media Queries&#39;) such as the width of the user&#39;s device. </p>
<p>So for example, if the user&#39;s device is 960px wide then we make the assumption that they must be on a desktop computer (or potentially a large tablet device) and thus load styles specific to the device so the website can look its best on that device. </p>
<p>Yes this &#39;assumption&#39; about the users device screen can be problematic as it relies on the assumption that devices are of a known width - and obviously if history has taught us anything - these assumptions will fail at some point in the future. </p>
<h3><a name="better-practice-media-queries"class="anchor" href="#better-practice-media-queries"><span class="header-link"></span></a>Better practice Media Queries</h3>
<p>While we&#39;re here I wanted to suggest a better practice for writing Media Queries which is to not have stylesheets load based on the dimensions of current devices, but instead to set-up &#39;break points&#39; for where your site starts to naturally break down. </p>
<p>So for example, rather than trying to target an iPhone (which you know has a dimension of xyz), instead look at your site and think &quot;hmm, my site looks a bit crap when smaller than x width - I&#39;ll set a break point for that dimension&quot;. </p>
<p>This is still a bit &#39;hit and miss&#39;, as you might decide your site doesn&#39;t look good at x pixels wide but that means certain devices either jump up/down a stylesheet when you didn&#39;t expect them to. But as long as you&#39;re using an &#39;adaptive&#39; approach to loading your CSS then that can ultimately only be a good thing for your users compared to loading the desktop variation of your site&#39;s design on a smaller screen mobile device.</p>
<h3><a name="mobile-first-approach"class="anchor" href="#mobile-first-approach"><span class="header-link"></span></a>Mobile First Approach</h3>
<p>The stylesheets in this example are using a &#39;mobile first&#39; approach, and by this I mean we&#39;re building a site from the mobile design upwards. If we didn&#39;t do this then we would end up loading lots of CSS onto the mobile device that was actually only needed for the desktop computer (this is because the desktop version of the site would have a more complicated design compared to the design for the mobile version of the site). I&#39;ll go into this in more detail later but it&#39;s important to note here because after the stylesheet links you&#39;ll see another &#39;conditional comment&#39; <code>&lt;!--[if (lt IE 9) &amp; (!IEMobile)]&gt;</code> which is there because Internet Explorer browsers less than version 9 do not understand CSS Media Queries and so if we take a mobile first approach then IE &lt; 9 wont have any stylesheet to load (as it wont know &#39;how&#39; to load them). So this conditional comment is a &#39;fallback&#39; for those browsers. So if a user is on an older crappy Windows based phone then they&#39;ll at the very least get the desktop version of the site loaded (which is still likely to be a better experience than having no styling on the content at all).</p>
<h3><a name="semantic-elements"class="anchor" href="#semantic-elements"><span class="header-link"></span></a>Semantic Elements</h3>
<p>After that, we have the <code>&lt;body&gt;</code> element which will contain the content of your page.</p>
<p>It&#39;s important that you use only elements that semantically match the content. There are easy examples and there are slightly more awkward examples. An easy example is a top level navigation menu, I think most of us are aware by now that the most semantically correct element to use here is an un-ordered list <code>&lt;ul&gt;</code>…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Services<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;ul&gt;</span>
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Service A<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Service B<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Service C<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
        <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Contact<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre></div>
</code></pre>
<p>A slightly more awkward example though: imagine we have one of those large &#39;web 2.0&#39; (how old does that sound already!) footer areas where the designer has a massive list of helpful links and contact information. The structure of that might be something like this…</p>
<table>
<thead>
<tr>
<th>Services</th>
<th>Social</th>
<th>Contacts</th>
</tr>
</thead>
<tbody>
<tr>
<td>Service A</td>
<td>Facebook</td>
<td>00000 000000</td>
</tr>
<tr>
<td>Service B</td>
<td>Twitter</td>
<td>11111 111111</td>
</tr>
<tr>
<td>Service C</td>
<td>Google+</td>
<td>22222 222222</td>
</tr>
</tbody>
</table>
<p>…you <em>could</em> use a <code>&lt;dl&gt;</code> element, but is this strictly the correct element to use? An example of what that would look like is…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;dl&gt;</span>
    <span class="nt">&lt;dt&gt;</span>Services<span class="nt">&lt;/dt&gt;</span>
        <span class="nt">&lt;dd&gt;</span>Service A<span class="nt">&lt;dd&gt;</span>
        <span class="nt">&lt;dd&gt;</span>Service B<span class="nt">&lt;dd&gt;</span>
        <span class="nt">&lt;dd&gt;</span>Service C<span class="nt">&lt;dd&gt;</span>

    <span class="nt">&lt;dt&gt;</span>Social<span class="nt">&lt;/dt&gt;</span>
        <span class="nt">&lt;dd&gt;</span>Facebook<span class="nt">&lt;dd&gt;</span>
        <span class="nt">&lt;dd&gt;</span>Twitter<span class="nt">&lt;dd&gt;</span>
        <span class="nt">&lt;dd&gt;</span>Google+<span class="nt">&lt;dd&gt;</span>

    <span class="nt">&lt;dt&gt;</span>Contacts<span class="nt">&lt;/dt&gt;</span>
        <span class="nt">&lt;dd&gt;</span>00000 000000<span class="nt">&lt;dd&gt;</span>
        <span class="nt">&lt;dd&gt;</span>11111 111111<span class="nt">&lt;dd&gt;</span>
        <span class="nt">&lt;dd&gt;</span>22222 222222<span class="nt">&lt;dd&gt;</span>
<span class="nt">&lt;/dl&gt;</span>
</pre></div>
</code></pre>
<p>…if we look at the specification for this element it says… </p>
<blockquote>
<p>The dl element represents an association list consisting of zero or more name-value groups (a description list). Each group must consist of one or more names (dt elements) followed by one or more values (dd elements). Within a single dl element, there should not be more than one dt element for each name.</p>
</blockquote>
<p>…so this looks to be the right element to use as it is an &quot;association list&quot; (i.e. we&#39;ve associated a list of items with the relevant title) but maybe instead we should have used a <code>&lt;table&gt;</code> element because we are kind of dealing with tabular data. There are defined headers with <em>associated</em> rows of content (similar to the association made with a <code>&lt;dl&gt;</code>). An example of what this would look like is…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;table&gt;</span>
    <span class="nt">&lt;thead&gt;</span>
        <span class="nt">&lt;tr&gt;</span>
            <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">&quot;col&quot;</span><span class="nt">&gt;</span>Services<span class="nt">&lt;/th&gt;</span>
            <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">&quot;col&quot;</span><span class="nt">&gt;</span>Social<span class="nt">&lt;/th&gt;</span>
            <span class="nt">&lt;th</span> <span class="na">scope=</span><span class="s">&quot;col&quot;</span><span class="nt">&gt;</span>Contacts<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/thead&gt;</span>
    <span class="nt">&lt;tbody&gt;</span>
        <span class="nt">&lt;tr&gt;</span>
            <span class="nt">&lt;td&gt;</span>Service A<span class="nt">&lt;/td&gt;</span>
            <span class="nt">&lt;td&gt;</span>Facebook<span class="nt">&lt;/td&gt;</span>
            <span class="nt">&lt;td&gt;</span>00000 000000<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;/tr&gt;</span>
        <span class="nt">&lt;tr&gt;</span>
            <span class="nt">&lt;td&gt;</span>Service B<span class="nt">&lt;/td&gt;</span>
            <span class="nt">&lt;td&gt;</span>Twitter<span class="nt">&lt;/td&gt;</span>
            <span class="nt">&lt;td&gt;</span>11111 111111<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;/tr&gt;</span>
        <span class="nt">&lt;tr&gt;</span>
            <span class="nt">&lt;td&gt;</span>Service C<span class="nt">&lt;/td&gt;</span>
            <span class="nt">&lt;td&gt;</span>Google+<span class="nt">&lt;/td&gt;</span>
            <span class="nt">&lt;td&gt;</span>22222 222222<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/tbody&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</pre></div>
</code></pre>
<p>…this is a bit of an anal analysis of &#39;semantic&#39; usage, but the fact is this sort of thing happens all the time. We look at something in a design and try to think of the most semantic element to use and although <code>&lt;dl&gt;</code> seems like the right choice, is it really? I guess it depends on how you interpret the specification. I know I&#39;ve used the <code>&lt;dl&gt;</code> elements many times but I sometimes wonder if I shouldn&#39;t have just gone with the <code>&lt;table&gt;</code> element instead (on a side note: I&#39;d love to hear people&#39;s feedback on this)</p>
<h3><a name="automation"class="anchor" href="#automation"><span class="header-link"></span></a>Automation</h3>
<p>I&#39;ve not discussed it here but one thing we&#39;ll come back to later in this article is the idea of &#39;automation&#39; - so that your &#39;generic&#39; HTML never need to be typed out by hand again. You should either have a re-usable template project/file or use a generator system that handles it for you.</p>
<h2><a name="css-the-styling-"class="anchor" href="#css-the-styling-"><span class="header-link"></span></a>CSS: <em>the styling</em></h2>
<h3><a name="oocss-sass"class="anchor" href="#oocss-sass"><span class="header-link"></span></a>OOCSS &amp; Sass</h3>
<p>CSS is the one area of web development that has been changing pretty much constantly for me these past couple of years. </p>
<p>I&#39;ve been trying to settle on a technique or style that would mean the maintenance of my projects are made easier &amp; simpler, and I now believe I&#39;ve found (at least so far) one such method that appears to work both in favour of maintainability and scalability: &#39;OOCSS&#39; (Object-Oriented CSS).</p>
<p>The principles vary depending on the author (e.g. <a href="https://github.com/stubbornella/oocss/">stubbornella</a>, <a href="http://smacss.com/">SMACSS</a>, <a href="http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/">the single responsibility principle</a> and many more), and my way of utilising OOCSS is a bit of an amalgamation of the existing styles available today. Also, I utilise the CSS pre-processor <a href="http://sass-lang.com/">Sass</a> which originally I wasn&#39;t too keen on (I saw it in a similar light to tools like jQuery where it wasn&#39;t necessary, and caused more problems than it solved) but I&#39;m now more sold on it&#39;s benefits, and because of my skeptical mindset I know what issues can occur when using a pre-processor and how to avoid those issues.</p>
<h3><a name="modular-structure"class="anchor" href="#modular-structure"><span class="header-link"></span></a>Modular Structure</h3>
<p>Here follows is my current CSS/Sass structure…</p>
<ul>
<li>/<code>Assets</code>/<ul>
<li>/<code>Styles</code>/<ul>
<li>/<code>Lint</code>/<ul>
<li>csslint.txt (<em>this contains my generic terminal command for executing CSS linting</em>)</li>
</ul>
</li>
<li>/<code>Sass</code>/<ul>
<li>/<code>Base</code>/<ul>
<li><code>_additions.scss</code></li>
<li><code>_normalize.scss</code></li>
<li><code>_placeholder.scss</code></li>
<li><code>_theme.scss</code></li>
</ul>
</li>
<li>/<code>Configurations</code>/<ul>
<li><code>_variables.scss</code></li>
</ul>
</li>
<li>/<code>Functions</code>/<ul>
<li><code>_calcems.scss</code></li>
<li><code>_calcpercentage.scss</code></li>
<li><code>_fontsize.scss</code></li>
</ul>
</li>
<li>/<code>Layouts</code>/<ul>
<li><code>_container.scss</code></li>
<li><code>_grid.scss</code></li>
<li><code>_matrix.scss</code></li>
</ul>
</li>
<li>/<code>Modules</code>/<ul>
<li>/<code>Components</code>/<br><code>_button.scss</code><br><code>_media.scss</code></li>
<li>/<code>Extensions</code>/<br><em>this contains _{n}.scss files that hold re-usable classes</em></li>
<li>/<code>Helpers</code>/<br><code>_clearfix.scss</code><br><code>_hidetxt.scss</code><br><code>_horizontal.scss</code><br><code>_push.scss</code></li>
<li>/<code>Mixins</code>/<br><code>_border.scss</code><br><code>_boxsizing.scss</code><br><code>_radius.scss</code><br><code>_shadow.scss</code><br><code>_transform.scss</code><br><code>_transition.scss</code></li>
<li><em>this contains .scss files specific to this project</em></li>
</ul>
</li>
<li>/<code>Plugins</code>/<ul>
<li><code>_slimbox.scss</code></li>
</ul>
</li>
<li>/<code>Queries</code>/<ul>
<li><code>_320-home.scss</code></li>
<li><code>_600-home.scss</code></li>
<li><code>_960-home.scss</code></li>
</ul>
</li>
</ul>
</li>
<li><code>home.scss</code></li>
<li><code>sub_page.scss</code></li>
<li><code>another_page_type.scss</code></li>
</ul>
</li>
<li><code>home.css</code></li>
<li><code>sub_page.css</code></li>
<li><code>another_page_type.css</code></li>
</ul>
</li>
</ul>
<p>…now this may look like a <strong>lot</strong> of style sheets, but the beauty of using a pre-processor such as Sass is that it allows you to have a very modular code base and yet for deployment/production (e.g. the pushing of your code to the &#39;live&#39; server) you can <em>build</em> your separate code modules into a single (compressed/minified) stylesheet.</p>
<h3><a name="sass-example"class="anchor" href="#sass-example"><span class="header-link"></span></a>Sass Example</h3>
<p>So where you see the <code>.css</code> files inside of the /<code>Styles</code>/ directory - this is actually a single file that has been built up from selected Sass files.</p>
<p>For example, the home.scss file (which is what generates the home.css file) could contain the following content (note: that this content changes depending on the requirements of your project)…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="c1">// Configurations/Settings</span>
<span class="k">@import</span> <span class="s">&quot;Configurations/variables&quot;;</span>

<span class="c1">// Functions</span>
<span class="k">@import</span> <span class="s">&quot;Functions/calcems&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;Functions/calcpercentage&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;Functions/fontsize&quot;;</span>

<span class="c1">// Base</span>
<span class="k">@import</span> <span class="s">&quot;Base/normalize&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;Base/additions&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;Base/theme&quot;;</span>

<span class="c1">// Layouts</span>
<span class="k">@import</span> <span class="s">&quot;Layouts/grid&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;Layouts/container&quot;;</span>

<span class="c1">// Modules</span>

    <span class="c1">// Mixins</span>
    <span class="c1">@import &quot;Modules/Mixins/radius&quot;;</span>
    <span class="c1">@import &quot;Modules/Mixins/transition&quot;;</span>

    <span class="c1">// Components</span>
    <span class="c1">@import &quot;Modules/Components/media&quot;;</span>

    <span class="c1">// Helpers</span>
    <span class="c1">@import &quot;Modules/Helpers/clearfix&quot;;</span>
    <span class="c1">@import &quot;Modules/Helpers/hidetxt&quot;;</span>
    <span class="c1">@import &quot;Modules/Helpers/horizontal&quot;;</span>

<span class="c1">// Generic Styles for Modules that appear across the site (e.g. header/navigation/footer)</span>
<span class="k">@import</span> <span class="s">&quot;Modules/header&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;Modules/navigation&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;Modules/footer&quot;;</span>

<span class="c1">// Page Specific Styles</span>
<span class="k">@import</span> <span class="s">&quot;Modules/Queries/960-home&quot;;</span>
</pre></div>
</code></pre>
<p>…so let&#39;s go over a couple of points about this Sass file.</p>
<ol>
<li>I&#39;m using Sass to import components/layouts/modules that are relevant for the home page.</li>
<li>Something I won&#39;t go into detail on here - but I use a fair amount and find very useful are - Sass &#39;functions&#39; (<a href="https://github.com/Integralist/Passage/tree/master/public/Assets/Styles/Sass/Functions">take a look at some custom functions</a>)</li>
<li>This style sheet is constructed of modules required for the home page stylesheet - so you can see I&#39;m importing not only modules that are part of my &#39;templated&#39; project but also modules that I&#39;ve created specifically for this project (e.g. the header, navigation, footer modules).</li>
<li>In this project I was also using a &#39;Mobile First&#39; approach and so you can see in this file I&#39;m also importing a module which specifically handles the styles for the desktop experience.</li>
</ol>
<p>Initially it seems like a bit of work is involved, but once you get used to structuring your stylesheets with the relevant modules the job becomes a lot easier to manage in the long run - no more do you need to sift through hundreds/thousands lines of CSS code looking for a particular rule; because your code is modular you now know where to look to find it and can access it a lot quicker, along with the ability to more easily re-use code (as long as you&#39;ve taken an OOCSS approach that is!) </p>
<p>There are many benefits to having a modular code base, but the most important thing to remember is: don&#39;t start thinking that because you&#39;re using Sass that it will some how magically make you write better code, it wont - that is still <em>your</em> responsibility. </p>
<h3><a name="avoiding-pre-processor-pitfalls"class="anchor" href="#avoiding-pre-processor-pitfalls"><span class="header-link"></span></a>Avoiding pre-processor pitfalls</h3>
<p>Now before we get into OOCSS let&#39;s first quickly demonstrate some issues with using pre-processors.</p>
<p>Here is a typical usage of Sass:</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.nav</span><span class="err">{</span>
    <span class="nt">li</span><span class="err">{</span>
        <span class="nt">a</span><span class="err">{}</span>
    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>Which when the pre-processor executes equates to...</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.nav</span> <span class="p">{}</span>
<span class="nc">.nav</span> <span class="nt">li</span> <span class="p">{}</span>
<span class="nc">.nav</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{}</span>
</pre></div>
</code></pre>
<p>But this might not have been the result you intended, instead you actually wanted…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.nav</span> <span class="p">{}</span>
<span class="nc">.nav</span> <span class="nt">li</span> <span class="p">{}</span>
<span class="nc">.nav</span> <span class="nt">a</span> <span class="p">{}</span>
</pre></div>
</code></pre>
<p>…which would have better performance and be more &#39;specific&#39; to your DOM structure.</p>
<p>To do that you just need to tweak the Sass code slightly…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.nav</span><span class="err">{</span>
    <span class="nt">li</span><span class="err">{</span>

    <span class="err">}</span>
    <span class="nt">a</span> <span class="err">{</span>

    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>So just be careful with Sass and double check its output to ensure it is producing the selectors/rules you actually want. </p>
<p>One tip for using nested selectors is to use the ampersand <code>&amp;</code> character to reference the whole selector, so for example…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nt">a</span> <span class="err">{</span>
    <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="err">;</span>

    <span class="c1">// this will be compiled to </span>
    <span class="c1">// a:hover, a:focus</span>
    <span class="k">&amp;</span><span class="nd">:hover</span><span class="o">,</span>
    <span class="k">&amp;</span><span class="nd">:focus</span> <span class="err">{</span>
        <span class="na">color</span><span class="o">:</span> <span class="nv">$brand-color</span><span class="err">;</span>
    <span class="err">}</span>
<span class="err">}</span>

<span class="nc">.rate-options</span> <span class="err">{</span>
    <span class="na">counter-reset</span><span class="o">:</span> <span class="n">rateoption</span><span class="err">;</span>
    <span class="na">list-style</span><span class="o">:</span> <span class="no">none</span><span class="err">;</span>
    <span class="na">margin-top</span><span class="o">:</span> <span class="mi">2</span><span class="kt">em</span><span class="err">;</span>

    <span class="nt">li</span> <span class="err">{</span>
        <span class="na">margin-right</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">em</span><span class="err">;</span>

        <span class="c1">// this will be compiled to </span>
        <span class="c1">// .rate-options li:before</span>
        <span class="k">&amp;</span><span class="nd">:before</span> <span class="err">{</span>
            <span class="na">color</span><span class="o">:</span> <span class="nv">$action-color</span><span class="err">;</span>
            <span class="na">content</span><span class="o">:</span> <span class="nf">counters</span><span class="p">(</span><span class="n">rateoption</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="s2">&quot; &quot;</span><span class="err">;</span>
            <span class="na">counter-increment</span><span class="o">:</span> <span class="n">rateoption</span><span class="err">;</span>
        <span class="err">}</span>
    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>Other issues with pre-processors can come from Mixins, which although very useful, are also a waste of time/space if good OOCSS is already in place. Remember that the content of a Mixin is copied into every rule you specify it to be used. </p>
<p>The <code>@extend</code> statement is slightly better in the sense that you can write a class <code>.funky-border</code> which contains a single declaration: <code>border: 10px dashed blue;</code> and then for every element that uses that same styling you can simply do…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.my-box</span> <span class="err">{</span>
    <span class="k">@extend</span> <span class="nc">.funky-border</span><span class="o">;</span>
    <span class="na">color</span><span class="o">:</span> <span class="nb">red</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…what this ends up compiling to is something like this…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.funky-border</span><span class="o">,</span>
<span class="nc">.my-box</span> <span class="p">{</span>
    <span class="k">border</span><span class="o">:</span> <span class="m">10px</span> <span class="k">dashed</span> <span class="nb">blue</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.my-box</span> <span class="p">{</span>
    <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…again, looks great but you need to be careful because in Internet Explorer there is a limit to the amount of selectors you can specify for a single rule! So if you were using <code>@extend</code> everywhere you might hit an issue (unlikely you&#39;ll reach that limit, but on a application big enough and with bad architecture in place that could still happen).</p>
<p>There is another more complicated example given within the &#39;performance&#39; section of this article which discusses more structural concerns, but we&#39;ll come to that soon enough.</p>
<h3><a name="how-i-write-oocss"class="anchor" href="#how-i-write-oocss"><span class="header-link"></span></a>How I write OOCSS</h3>
<p>This is where things get interesting because OOCSS is still (although around for a few years now) a moving target and something that isn&#39;t a straight forward &quot;<em>this is how it&#39;s done</em>&quot; process.</p>
<p>I have the following terminology I use when discussing OOCSS…</p>
<table>
<thead>
<tr>
<th>Term</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&#39;base&#39;</td>
<td>normalisation of styles across browsers + base styles specific to current project</td>
</tr>
<tr>
<td>&#39;layout&#39;</td>
<td>structure of site (think of grid systems: they do nothing but give you a structure to place content inside)</td>
</tr>
<tr>
<td>&#39;module&#39;</td>
<td>this is a complicated one because it means different things in different contexts (see below for more details)</td>
</tr>
<tr>
<td>&#39;extension&#39;</td>
<td>this is a class that can be applied to multiple modules/elements</td>
</tr>
<tr>
<td>&#39;state&#39;</td>
<td>can be applied to both layouts and modules to affect how they look</td>
</tr>
</tbody>
</table>
<h4><a name="base"class="anchor" href="#base"><span class="header-link"></span></a>Base</h4>
<p>My &#39;Base&#39; styles cover two areas: </p>
<ol>
<li>Normalisation of browser quirks/formatting (handled by <a href="http://twitter.com/necolas">@necolas</a>&#39; <a href="http://necolas.github.com/normalize.css/">Normalize.css</a>)</li>
<li>Base level rules which are specific to the current project</li>
</ol>
<p>So for example I have the following extra stylesheets in my <code>/Base/</code> folder: <code>_theme.scss</code> and <code>_placeholder.scss</code>.</p>
<p>My <code>_theme.scss</code> stylesheet is for base styles for the current project, so it might include a font-face used in the site&#39;s design, or setting all <code>&lt;h1&gt;</code>&#39;s to have a standard brand colour (things of that nature).</p>
<p>My <code>_placeholder.scss</code> is used in conjunction with my the <code>/Scripts/Utils/Polyfills/placeholder.js</code> script which makes it possible for an input to be one colour (to signify a &#39;hint&#39;) but change to a different colour when the user focus&#39; on the input (this is only used for browsers that don&#39;t natively support the <code>placeholder</code> attribute. Because placeholders appear quite heavily in a lot of the designs created (by the agency I work for), it became apparent that I should store these styles into their own stylesheet rather than repeating them for every project.</p>
<p>Eagle eye readers will probably notice that in my folder struture above I also had an <code>_additions.scss</code> stylesheet which consists of some extra base rules that <code>Normalize.css</code> doesn&#39;t cover. You&#39;ll see later in the section about &#39;automation&#39; that I&#39;ve now started using Git/GitHub to manage 3rd party code dependancies and so really I could add my &#39;additions&#39; into the one Normalize.css file and then if Normalise.css ever had an update I could pull in those changes from GitHub and merge them into my version of Normalise, that way I wouldn&#39;t override my version completely but just integrate the latest updates. But for the time being, because Sass concatenates all stylesheets into one, it doesn&#39;t really matter that this <code>_additions.scss</code> is a separate file.</p>
<h4><a name="layout"class="anchor" href="#layout"><span class="header-link"></span></a>Layout</h4>
<p>These are the easiest component in the CSS stack so far. Layouts hold content. They don&#39;t try to style content in any way, they literally just contain a module or content of some kind.</p>
<p>Layouts can be manually created or they can be created using a grid system (see: <a href="http://960.gs/">960 CSS Grid System</a>). I use a fork of Twitter&#39;s Bootstrap Grid that was originally written in <a href="http://lesscss.org/">Less</a> but some kind soul had ported over to Sass (I modified it slightly to not include &#39;gutters&#39; - as most of my grid layouts don&#39;t require gutters).</p>
<p>I&#39;m still a bit skeptical of using &#39;grids&#39; because of the extra overhead as far as HTML is concerned but they can be pretty useful when used sparingly and in the right situations. <a href="http://csswizardry.com/">Harry Roberts</a> once told me to think of grids as &#39;shelves&#39; which you place items upon, and that&#39;s pretty much an accurate portrayal of the role grids take - nothing more complicated than that really.</p>
<h4><a name="modules-"class="anchor" href="#modules-"><span class="header-link"></span></a>Modules?</h4>
<p>The word &#39;module&#39; in my CSS means different things, mainly because it refers to something as being &#39;modular&#39;.</p>
<p>The key to having a more modular code base is: &#39;abstraction&#39; - taking a common design pattern and abstracting it into a self contained re-usable component.</p>
<p>Two prolific &#39;abstractors&#39; are Nicole Sullivan (see: the <a href="http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/">&#39;media object&#39;</a>) and Harry Roberts (see: the <a href="http://csswizardry.com/2011/10/the-island-object/">&#39;island object&#39;</a> and <a href="http://csswizardry.com/2011/09/the-nav-abstraction/">&#39;nav abstraction&#39;</a>).</p>
<p>All of the following items are &#39;modular&#39; in that sense (e.g. when it comes down to it, they are just <em>categorised</em> abstractions):</p>
<ul>
<li>Components (e.g. &#39;the media object&#39;)</li>
<li>Extensions (these are project specific CSS classes that i use with Sass&#39; <code>@extend</code> feature)</li>
<li>Helpers (these are project agnostic, meaning they can be used in any probject - e.g. &#39;the nav abstraction&#39;)</li>
<li>Mixins (these are specific to Sass in that they save you typing out the same content over and over - these can be avoided in most cases!)</li>
</ul>
<p>Example Mixin:</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="k">@mixin</span><span class="nf"> transition</span> <span class="p">(</span><span class="nv">$transition</span><span class="o">:</span> <span class="n">all</span> <span class="mi">0</span><span class="mf">.2</span><span class="kt">s</span> <span class="n">linear</span><span class="p">)</span> <span class="err">{</span>
    <span class="na">-webkit-transition</span><span class="o">:</span> <span class="nv">$transition</span><span class="err">;</span>
       <span class="na">-moz-transition</span><span class="o">:</span> <span class="nv">$transition</span><span class="err">;</span>
        <span class="na">-ms-transition</span><span class="o">:</span> <span class="nv">$transition</span><span class="err">;</span>
         <span class="na">-o-transition</span><span class="o">:</span> <span class="nv">$transition</span><span class="err">;</span>
            <span class="na">transition</span><span class="o">:</span> <span class="nv">$transition</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<h4><a name="extensions"class="anchor" href="#extensions"><span class="header-link"></span></a>Extensions</h4>
<p>Extensions are effectively re-usable classes which you can incorporate into any existing rule. An example of this could be having a class that lets you set a box shadow…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.shadow</span> <span class="err">{</span>
    <span class="k">@include</span><span class="nd"> shadow</span><span class="p">(</span><span class="mi">0</span> <span class="mi">3</span><span class="kt">px</span> <span class="mi">6</span><span class="kt">px</span> <span class="mh">#666</span><span class="p">)</span><span class="err">;</span>
    <span class="na">border</span><span class="o">:</span> <span class="mi">3</span><span class="kt">px</span> <span class="no">solid</span> <span class="mh">#fff</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…which would be used like so… </p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.profile-photo</span> <span class="err">{</span>
    <span class="k">@extend</span> <span class="nc">.shadow</span><span class="o">;</span>
    <span class="c1">// other styles</span>
<span class="err">}</span>

<span class="nc">.company-logo</span> <span class="err">{</span>
    <span class="k">@extend</span> <span class="nc">.shadow</span><span class="o">;</span>
    <span class="c1">// other styles</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…you could argue that this type of class should be incorporated into a &#39;module&#39; - and most of the time that is correct - but this isn&#39;t <em>always</em> appropriate.</p>
<h4><a name="state"class="anchor" href="#state"><span class="header-link"></span></a>State</h4>
<p>State classes are pretty self-explanatory in that they affect the state of an object/element, and the syntax is <code>.is-xxxx</code>.</p>
<p>For example, if you have an element that had both a hidden state and a visible state (and JavaScript was used to switch states) then the visible state would be the default (because if the user had no JavaScript support then you don&#39;t want the content to be hidden by default) and you could trigger the alternative state by applying a class like <code>.is-hidden</code>.</p>
<p>I used to have a separate <code>State.scss</code> file but I found that was a nightmare to maintain because I&#39;d have a module in one file and a specific &#39;state&#39; for that module in another file, and then on top of that I used to have my Internet Explorer fixes in separate <code>IE8.css</code> and <code>IE7.css</code> files and so if there were any tweaks needed to a module for IE then I&#39;d have those in separate files as well, it was a total nightmare.</p>
<p>So now I find the best way to manage modules is to keep the module, and the state for that module, and any IE tweaks for that module ALL within the module file.</p>
<p>The way I keep the IE code within the same file is I stopped having them as separate files like so…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="c">&lt;!--[if IE 8]&gt;</span>
<span class="c">&lt;link rel=&quot;stylesheet&quot; href=&quot;/Assets/Styles/IE8.css&quot;&gt;</span>
<span class="c">&lt;![endif]--&gt;</span>

<span class="c">&lt;!--[if IE 7]&gt;</span>
<span class="c">&lt;link rel=&quot;stylesheet&quot; href=&quot;/Assets/Styles/IE7.css&quot;&gt;</span>
<span class="c">&lt;![endif]--&gt;</span>
</pre></div>
</code></pre>
<p>…and instead went with the <a href="http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">Paul Irish solution</a>…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="c">&lt;!--[if IE 8]&gt;&lt;html class=&quot;ie8&quot; dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;![endif]--&gt;</span>
<span class="c">&lt;!--[if IE 9]&gt;&lt;html class=&quot;ie9&quot; dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;![endif]--&gt;</span>
<span class="c">&lt;!--[if gt IE 9]&gt;&lt;!--&gt;</span> <span class="nt">&lt;html</span> <span class="na">dir=</span><span class="s">&quot;ltr&quot;</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!--&lt;![endif]--&gt;</span>
</pre></div>
</code></pre>
<p>…yes doing it this way <em>can</em> mean the overall file size of your CSS is larger for browsers that aren&#39;t affected by the IE specific code, but to be honest since dropping support for IE7 the amount of IE fixes needed has literally dropped off the radar!</p>
<h3><a name="selectors"class="anchor" href="#selectors"><span class="header-link"></span></a>Selectors</h3>
<p>Selectors are a tricky subject in CSS. The key principle is to be as &#39;specific&#39; as possible.</p>
<p>Where you may have <code>ul.menu</code> just use <code>.menu</code>. This is because if you had another element which isn&#39;t a <code>ul</code> but which needed similar stylings to your <code>.menu</code> class you can now reuse that class, where as before you would of had to of either written another class with similar code, or added another element selector to the rule like so…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nt">ul</span><span class="nc">.menu</span><span class="o">,</span>
<span class="nt">ol</span><span class="nc">.menu</span> <span class="p">{</span>
    <span class="o">//</span> <span class="n">styles</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…both of which are bad situations, so just be specific (where possible/reasonable).</p>
<p>For a more indepth analysis of how best to write your selectors then I recommend you read <a href="http://csswizardry.com/2012/07/shoot-to-kill-css-selector-intent/">&#39;Shoot to Kill&#39;</a> by Harry Roberts. In that article he gives us a good way to question our selectors…</p>
<blockquote>
<p>Ask yourself: am I selecting this because it’s a ul inside of .header or because it is my site’s main nav?</p>
</blockquote>
<p>Using this type of questioning we know when it&#39;s OK to not be too specific (e.g. <code>.header &gt; ul</code>) and when we <em>must</em> be specific to avoid changes in the future causing us problems.</p>
<h3><a name="sprites"class="anchor" href="#sprites"><span class="header-link"></span></a>Sprites</h3>
<p>The idea behind sprites is pretty straight forward. Take all the little icons or miscellaneous imagery and stick them in one single image file, like so…</p>
<p><img src="http://f.cl.ly/items/1Z3M010W210t25130P2h/apple.jpg" alt=""></p>
<p>…now you have helped towards your performance goal of &#39;<a href="http://developer.yahoo.com/performance/rules.html#num_http">reducing HTTP requests</a>&#39; because instead of having (using the above image as an example) 20 different images, meaning 20 separate HTTP requests, you now have just one HTTP request.</p>
<p>You could argue the overall size of the image sprite can become very large and some pages might not use all the icons/images within the sprite, but by that point the sprite would have been loaded and cached by the browser and so that argument becomes redundant.</p>
<h4><a name="image-source-files"class="anchor" href="#image-source-files"><span class="header-link"></span></a>Image Source Files</h4>
<p>One other important thing to do (and there was no where else appropriate for me to mention this) is to have a <code>/Source/</code> folder inside your <code>/Images/</code> folder to hold all the source files (same as if you had a <code>/Flash/</code> folder for your animations then you should have a sub folder inside that called <code>/Source/</code> to hold all the <code>.fla</code> files). </p>
<p>This may seem over kill and I can hear people crying out already about using up loads of server space on these types of files that aren&#39;t used by the website in any way, but hear me out! </p>
<p>In modern web development there isn&#39;t usually a whole lot of these types of files (and by these files I mean <code>.fla</code> or the source <code>.png</code> for an image sprite) - items that are likely to need changing in the future and I don&#39;t mean keep hi-res photos or the original Illustrator/Photoshop design files. </p>
<p>The biggest benefit I&#39;ve found is when going back to a website after (let&#39;s say) two years! You had all the source files on a backup server somewhere and now you have to go find it. Maybe it&#39;s in the loft, or locked in a fireproof safe at your work office, either way it&#39;s a pain in the ass to get to and try and locate these files when you could just connect to the web server and find them there alongside your website files!</p>
<h3><a name="responsive-design"class="anchor" href="#responsive-design"><span class="header-link"></span></a>Responsive Design</h3>
<p>The principle solution to making your site design responsive is to not set widths on anything. Depending on the design of your site the layouts will need a width set - for example a two column layout needs to have a width set on each column (you can&#39;t avoid that), but any modules you have shouldn&#39;t have a width set on them.</p>
<p>Anything you do set a width on needs to be in percentages.</p>
<p>Here is an example of how you can handle this using the two column layout example above…</p>
<ul>
<li>add two <code>&lt;div&gt;</code>&#39;s that will be your columns</li>
<li>add a width to both columns in pixels</li>
<li>float the columns so they sit next to each other</li>
<li>now convert the pixels into percentages using the following algorithm <code>target / context = result</code>.</li>
</ul>
<p>So for example, if you set the width of the left <code>div</code>&#39;s to be 150px and the <code>div</code>&#39;s containing element happened to be a <code>&lt;div&gt;</code> with a width of 960px, then I would calculate the width of my left column like so: </p>
<p><code>150 / 960 = .15625</code>. </p>
<p>But with percentages you wouldn&#39;t just set the width to <code>.15625%</code> you need to move the decimal place over by two places so it becomes <code>15.625%</code>. </p>
<p><code>target / context = result</code> is <em>THE</em> algorithm for responsive design!</p>
<h4><a name="responsive-images"class="anchor" href="#responsive-images"><span class="header-link"></span></a>Responsive Images</h4>
<p>To help your images scale appropriately along with your responsive design you can set the <code>max-width</code> property to be 100% which means the image will never be larger than its container but can happily resize/scale downwards on smaller screens…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nt">img</span> <span class="p">{</span>
    <span class="k">max-width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h4><a name="what-about-containing-elements-with-unknown-widths-"class="anchor" href="#what-about-containing-elements-with-unknown-widths-"><span class="header-link"></span></a>What about containing elements with unknown widths?</h4>
<p>Normally what you see in web design is the main website content is wrapped in an element such as a <code>&lt;div&gt;</code> with a set <code>max-width</code> of 960px (so it fits onto a range of devices without requiring a horizontal scrollbar to appear). We use <code>max-width</code> instead of <code>width</code> for the same reason we use it for our responsive images, so it never gets larger than it should but can happily resize downwards depending on the size of the device viewing it.</p>
<p>But how do we convert 960px into a responsive unit? We know the algorithm for responsive design is <code>target / context = result</code> but we have no container in this instance (unless we count the <code>&lt;body&gt;</code> tag)? But then what&#39;s the width of the <code>&lt;body&gt;</code> tag? We don&#39;t know because it&#39;ll be different on every device!</p>
<p>Well there is one way to get 960px into a responsive unit and that is to take into account that the default font size on nearly all browsers is 16px. If you set <code>font-size: 100%</code> onto the <code>&lt;body&gt;</code> element then this equates to a font size of 16px.</p>
<p>This allows us to calculate the 960px <code>max-width</code> as 60em! </p>
<p>By doing: <code>960 / 16 = 60</code> (again it&#39;s that <code>target / context = result</code> algorithm!)</p>
<p>We can now set our wrapper element like so…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.container</span> <span class="p">{</span>
    <span class="k">max-width</span><span class="o">:</span> <span class="m">60em</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h3><a name="mobile-design-users-on-the-move-"class="anchor" href="#mobile-design-users-on-the-move-"><span class="header-link"></span></a>Mobile Design: <em>users on the move</em></h3>
<p>Because I make sure my sites are built using a responsive approach, it isn&#39;t a whole lot of extra work to tweak the styles/design to look more appropriate for devices with smaller screen dimensions. </p>
<p>The tool for that job are &#39;Media Queries&#39;…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">320px</span><span class="o">)</span> <span class="p">{</span>
    <span class="o">//</span> <span class="nt">Mobile</span> <span class="nt">styles</span>
<span class="p">}</span>

<span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">600px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">959px</span><span class="o">)</span> <span class="p">{</span>
    <span class="o">//</span> <span class="nt">Tablet</span> <span class="nt">styles</span>
<span class="p">}</span>

<span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">960px</span><span class="o">)</span> <span class="p">{</span>
    <span class="o">//</span> <span class="nt">Desktop</span> <span class="nt">styles</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…yes I know these examples are <em>conveniently</em> matching the dimensions of an iPhone and iPad - which is a bad thing! What you ideally want to do is target good &#39;break-points&#39; in your design and not screen dimensions because let&#39;s face it: we know better by now that these assumptions will fail us in the future.</p>
<p>When you have your media queries in place you can amend your designs so they are easier to view on those smaller screen dimensions.</p>
<h3><a name="mobile-first"class="anchor" href="#mobile-first"><span class="header-link"></span></a>Mobile First</h3>
<p>Building sites that <em>look</em> good on mobile devices is one thing, but the performance of those sites will be worse than those built to take a &#39;mobile first&#39; approach.</p>
<p>The &#39;mobile first&#39; approach is effectively building the site to work for mobiles first and foremost, and to work your way up to the desktop version.</p>
<p>The beauty of this approach is that the DOM structure is clean and uncluttered meaning the browser has less to render and if there is any JavaScript interaction then a smaller DOM means your JavaScript can sift through the DOM more easily. Also, you don&#39;t end up downloading unnecessary assets on a smaller/less powerful device (e.g. if you built your site for desktop and then added Media Queries to make it <em>look</em> good on mobile devices then you&#39;re still loading desktop related stylesheets onto a mobile device which doesn&#39;t need them).</p>
<p>The &#39;mobile first&#39; approach can be very strange and uncomfortable, but I guess that - like anything - if you do it enough then the benefits will shine through and you&#39;ll wonder how you did things any other way.</p>
<h3><a name="tools"class="anchor" href="#tools"><span class="header-link"></span></a>Tools</h3>
<p>There is only really one CSS tool I use and that is a <a href="http://www.colorzilla.com/gradient-editor/">CSS gradient generator</a> from ColorZilla. The reason I use it is because it generates a gradient based on an image! So I can take our designers files and then export a slice of any gradient used, upload it and get CSS generated for me that perfectly matches the gradient the designers have used.</p>
<h3><a name="linting-via-the-command-line"class="anchor" href="#linting-via-the-command-line"><span class="header-link"></span></a>Linting via the Command Line</h3>
<p>Linting your code is very important. Linting helps highlight problems and potential bugs in your code.</p>
<p>There is an online tool called <a href="http://csslint.net/">CSS Lint</a> that lets you paste your stylesheet code into a field and have it return results on its quality (based on specific &#39;rules&#39; that you would like it to abide by).</p>
<p>I use CSS Lint as my linting tool of choice for CSS. The only problem is that it&#39;s a pain to have to copy/paste my code every time I want to lint it. So instead, I use the <a href="https://github.com/stubbornella/csslint/wiki/Command-line-interface">command line interface</a> version of the online tool as it&#39;s the easiest/quickest way to lint my code (and again, this is where using tools that make your job easier comes into play - why copy/paste the code from EACH of my CSS files into an external website when I can run a single command in my terminal which lints all of the files for me).</p>
<p>To install the command line version of CSS Lint you&#39;ll need <a href="http://nodejs.org/">NodeJs</a> installed.</p>
<p>To install simply run this line via your command line: <code>npm install -g csslint</code>.</p>
<p>This means you can now use your command line to navigate to your CSS folder and lint it.</p>
<p>There are different options/ways to use the command line interface of CSS Lint, and they are as follows…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>csslint <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>file<span class="p">|</span>dir<span class="o">]</span>*
csslint file1.css file2.css
csslint ./
csslint --errors<span class="o">=</span>box-model,ids test.css // <span class="o">=</span>&gt; decide what should be errors
csslint --warnings<span class="o">=</span>box-model,ids test.css // <span class="o">=</span>&gt; decide what should be warnings
</pre></div>
</code></pre>
<p>Below is my general usage command (which I keep in a txt file inside my <code>/Styles/Lint</code> folder for quicker copy/pasting into the command line interface): </p>
<pre><code class="lang-sh"><div class="highlight"><pre>csslint --errors<span class="o">=</span>import,compatible-vendor-prefixes,display-property-grouping,overqualified-elements,fallback-colors,duplicate-properties,empty-rules,gradients,universal-selector,vendor-prefix,zero-units --warnings<span class="o">=</span>important,known-properties,font-sizes,outline-none,shorthand,unqualified-attributes ./
</pre></div>
</code></pre>
<p>When I run that command I see any bugs/issues with my CSS code that doesn&#39;t appear to abide by the &#39;rules&#39; specified via the command line options.</p>
<h2><a name="javascript-the-behaviour-"class="anchor" href="#javascript-the-behaviour-"><span class="header-link"></span></a>JavaScript: <em>the behaviour</em></h2>
<p>Wow, have we really managed to get through the CSS section!?</p>
<p>OK, JavaScript, here we go…</p>
<h3><a name="amd"class="anchor" href="#amd"><span class="header-link"></span></a>AMD</h3>
<p>I guess the best place to start is with a good foundation and that is: AMD</p>
<blockquote>
<p>The Asynchronous Module Definition (AMD) API specifies a mechanism for defining modules such that the module and its dependencies can be asynchronously loaded. This is particularly well suited for the browser environment where synchronous loading of modules incurs performance, usability, debugging, and cross-domain access problems.</p>
</blockquote>
<p>…what this effectively means is rather than having one monolithic script file (while you&#39;re developing) you instead load a &#39;bootstrapper&#39; file which then loads in the relevant modules that make up the functionality of the page and each module has its own set of dependancies which are also loaded by the module.</p>
<p>This gives you a modular code base that is easily re-usable because each &#39;module&#39; (and its specified dependancies) should be completely transferable between projects. I have <a href="https://github.com/Integralist/Passage/tree/master/public/Assets/Scripts/Utils">a whole load of modules</a> that I use across lots of different projects and I&#39;m adding to them all the time.</p>
<p>Because modules aren&#39;t natively supported in browsers yet (they&#39;re in discussion for ES6) then AMD is the next best thing. To use AMD you need a module loader and that&#39;s where <a href="http://requirejs.org/">RequireJS</a> comes in - there are other AMD loaders available but I prefer to use RequireJS. I won&#39;t go into the details of how to use RequireJS as <a href="https://github.com/Integralist/Blog-Posts/blob/master/Beginners-guide-to-AMD-and-RequireJS.md">I&#39;ve already written about it in the past</a> but suffice to say it makes it very easy to work on a large scale project and to deploy your JavaScript as a single minified file.</p>
<p>That&#39;s right, using modules is great but you still need to consider performance (all those HTTP requests aren&#39;t good for you) so RequireJS provides a handy build tool that lets you use NodeJs (or Java) to concatenate and minify all your modules into a single file. I&#39;ve said it before and I&#39;ll say it again: I appreciate that some people think that the overall file size could be worse than loading multiple files but when I consider low connectivity devices the idea of loading one single file just feels better to me. </p>
<p>The great thing to remember about modules is the maintainability of the project and the re-usable code you get from it.</p>
<h3><a name="linting"class="anchor" href="#linting"><span class="header-link"></span></a>Linting</h3>
<p>Similar to my CSS work flow (see above), I use the command line to lint my JavaScript code - which helps me find silly errors in my code before I go off to production.</p>
<p>There is an online tool called <a href="http://www.jshint.com/">JS Hint</a> that lets you paste your JavaScript code into a field and have it return results on its quality (based on specific &#39;rules&#39; that you would like it to abide by).</p>
<p>I use JS Hint as my linting tool of choice for JavaScript. The only problem is that it&#39;s a pain to have to copy/paste my code every time I want to lint it. So instead, I use the <a href="https://github.com/jshint/node-jshint">command line interface</a> version of the online tool as it&#39;s the easiest/quickest way to lint my code (and again, this is where using tools that make your job easier comes into play - why copy/paste the code from EACH of my JavaScript files into an external website when I can run a single command in my terminal which lints all of the files for me).</p>
<p>To install the command line version of Js Hint you&#39;ll need <a href="http://nodejs.org/">NodeJs</a> installed.</p>
<p>To install simply run this line via your command line: <code>npm install jshint</code>.</p>
<p>This means you can now use your command line to navigate to your JavaScript folder and lint it.</p>
<p>There are different options/ways to use the command line interface of JS Hint, and they are as follows…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>jshint path path2 <span class="o">[</span>options<span class="o">]</span> // <span class="o">=</span>&gt; run against specific scripts
jshint *.js // <span class="o">=</span>&gt; run against all scripts
jshint main.js --show-non-errors // <span class="o">=</span>&gt; show non-errors <span class="o">(</span>e.g. Implied globals etc<span class="o">)</span>
jshint main.js --config ./Lint/config.json // <span class="o">=</span>&gt; use specific configuration options
jshint main.js --show-non-errors --config ./Lint/config.json // <span class="o">=</span>&gt; example of showing non-errors against specific configuration settings
</pre></div>
</code></pre>
<p>Below is my general usage command (which I keep in a txt file inside my <code>/Scripts/Lint</code> folder for quicker copy/pasting into the command line interface): </p>
<pre><code class="lang-sh"><div class="highlight"><pre>jshint **/*.js --config ./Lint/config.json
</pre></div>
</code></pre>
<p>...this relies on a specific <code>config.json</code> file which is easier than manually typing all the options. It looks like this:</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="p">{</span>
    <span class="c1">// Settings</span>
    <span class="s2">&quot;passfail&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Stop on first error.</span>
    <span class="s2">&quot;maxerr&quot;</span>        <span class="o">:</span> <span class="mi">200</span><span class="p">,</span>    <span class="c1">// Maximum error before stopping.</span>


    <span class="c1">// Predefined globals whom JSHint will ignore.</span>
    <span class="s2">&quot;browser&quot;</span>       <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Standard browser globals e.g. `window`, `document`.</span>

    <span class="s2">&quot;node&quot;</span>          <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;rhino&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;couch&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;wsh&quot;</span>           <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>   <span class="c1">// Windows Scripting Host.</span>

    <span class="s2">&quot;jquery&quot;</span>        <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">&quot;prototypejs&quot;</span>   <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;mootools&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;dojo&quot;</span>          <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>

    <span class="s2">&quot;predef&quot;</span>        <span class="o">:</span> <span class="p">[</span>  <span class="c1">// Custom globals.</span>
        <span class="c1">// this is because we use require() from RequireJS library</span>
        <span class="s2">&quot;require&quot;</span><span class="p">,</span>
        <span class="s2">&quot;define&quot;</span><span class="p">,</span>

        <span class="c1">// this is because we use Jasmine BDD for unit-testing</span>
        <span class="s2">&quot;jasmine&quot;</span><span class="p">,</span>
        <span class="s2">&quot;describe&quot;</span><span class="p">,</span>
        <span class="s2">&quot;beforeEach&quot;</span><span class="p">,</span>
        <span class="s2">&quot;afterEach&quot;</span><span class="p">,</span>
        <span class="s2">&quot;it&quot;</span><span class="p">,</span>
        <span class="s2">&quot;expect&quot;</span>
    <span class="p">],</span>


    <span class="c1">// Development.</span>
    <span class="s2">&quot;debug&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow debugger statements e.g. browser breakpoints.</span>
    <span class="s2">&quot;devel&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow developments statements e.g. `console.log();`.</span>


    <span class="c1">// ECMAScript 5.</span>
    <span class="s2">&quot;es5&quot;</span>           <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Allow ECMAScript 5 syntax.</span>
    <span class="s2">&quot;strict&quot;</span>        <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Require `use strict` pragma  in every file.</span>
    <span class="s2">&quot;globalstrict&quot;</span>  <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow global &quot;use strict&quot; (also enables &#39;strict&#39;).</span>


    <span class="c1">// The Good Parts.</span>
    <span class="s2">&quot;asi&quot;</span>           <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate Automatic Semicolon Insertion (no semicolons).</span>
    <span class="s2">&quot;laxbreak&quot;</span>      <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.</span>
    <span class="s2">&quot;bitwise&quot;</span>       <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit bitwise operators (&amp;, |, ^, etc.).</span>
    <span class="s2">&quot;boss&quot;</span>          <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Tolerate assignments inside if, for &amp; while. Usually conditions &amp; loops are for comparison, not assignments.</span>
    <span class="s2">&quot;curly&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require {} for every new block or scope.</span>
    <span class="s2">&quot;eqeqeq&quot;</span>        <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require triple equals i.e. `===`.</span>
    <span class="s2">&quot;eqnull&quot;</span>        <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate use of `== null`.</span>
    <span class="s2">&quot;evil&quot;</span>          <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate use of `eval`.</span>
    <span class="s2">&quot;expr&quot;</span>          <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate `ExpressionStatement` as Programs.</span>
    <span class="s2">&quot;forin&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate `for in` loops without `hasOwnPrototype`.</span>
    <span class="s2">&quot;immed&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`</span>
    <span class="s2">&quot;latedef&quot;</span>       <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohipit variable use before definition.</span>
    <span class="s2">&quot;loopfunc&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow functions to be defined within loops.</span>
    <span class="s2">&quot;noarg&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit use of `arguments.caller` and `arguments.callee`.</span>
    <span class="s2">&quot;regexp&quot;</span>        <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Prohibit `.` and `[^...]` in regular expressions.</span>
    <span class="s2">&quot;regexdash&quot;</span>     <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate unescaped last dash i.e. `[-...]`.</span>
    <span class="s2">&quot;scripturl&quot;</span>     <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Tolerate script-targeted URLs.</span>
    <span class="s2">&quot;shadow&quot;</span>        <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Allows re-define variables later in code e.g. `var x=1; x=2;`.</span>
    <span class="s2">&quot;supernew&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate `new function () { ... };` and `new Object;`.</span>
    <span class="s2">&quot;undef&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require all non-global variables be declared before they are used.</span>


    <span class="c1">// Personal styling preferences.</span>
    <span class="s2">&quot;newcap&quot;</span>        <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require capitalization of all constructor functions e.g. `new F()`.</span>
    <span class="s2">&quot;noempty&quot;</span>       <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit use of empty blocks.</span>
    <span class="s2">&quot;nonew&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit use of constructors for side-effects.</span>
    <span class="s2">&quot;nomen&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit use of initial or trailing underbars in names.</span>
    <span class="s2">&quot;onevar&quot;</span>        <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow only one `var` statement per function.</span>
    <span class="s2">&quot;plusplus&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Prohibit use of `++` &amp; `--`.</span>
    <span class="s2">&quot;sub&quot;</span>           <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate all forms of subscript notation besides dot notation e.g. `dict[&#39;key&#39;]` instead of `dict.key`.</span>
    <span class="s2">&quot;trailing&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Prohibit trailing whitespaces.</span>
    <span class="s2">&quot;white&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Check against strict whitespace and indentation rules.</span>
    <span class="s2">&quot;indent&quot;</span>        <span class="o">:</span> <span class="mi">4</span><span class="p">,</span>      <span class="c1">// Specify indentation spacing</span>
    <span class="s2">&quot;smarttabs&quot;</span>        <span class="o">:</span> <span class="kc">true</span>      <span class="c1">// Suppress warnings about mixed tabs and spaces</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>When I run that command I see any bugs/issues with my JavaScript code that doesn&#39;t appear to abide by the &#39;rules&#39; specified via the command line options. If I see nothing then that means there were no errors and I&#39;m good to go.</p>
<h3><a name="code-structure"class="anchor" href="#code-structure"><span class="header-link"></span></a>Code Structure</h3>
<p>One thing I find very useful to do for all my JavaScript files is to include a code structure comment at the top like so...</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/*</span>
<span class="cm"> * Code Structure:</span>
<span class="cm"> * - Variables</span>
<span class="cm"> * - Functions</span>
<span class="cm"> *   - fn_name_1</span>
<span class="cm"> *   - fn_name_2</span>
<span class="cm"> *   - fn_name_3</span>
<span class="cm"> *   - fn_name_4</span>
<span class="cm"> *   - fn_name_5</span>
<span class="cm"> *   - fn_name_6</span>
<span class="cm"> *   - fn_name_7</span>
<span class="cm"> *   - fn_name_8</span>
<span class="cm"> *   - fn_name_9</span>
<span class="cm"> * - Initialisation</span>
<span class="cm"> */</span>
</pre></div>
</code></pre>
<p>...this makes understanding where specific code is in the file a lot easier (at a glance). As you can see this code structure follows my <a href="https://github.com/Integralist/Style-Guides/blob/master/JavaScript%20Style%20Guide.md">JavaScript Style Guide</a> which goes into more detail about the specifics of my JavaScript code structure.</p>
<h3><a name="pure-functions"class="anchor" href="#pure-functions"><span class="header-link"></span></a>Pure Functions</h3>
<p>Something else I&#39;ve started to do more recently - and this was something I used to avoid in the past as I was &#39;scare mongered&#39; into believing it was a performance concern - is the idea of making more use of functions in a &#39;pure&#39; style, and by this I mean writing functions that do one thing and one thing only without causing side effects.</p>
<p>Writing functions that only do one thing - rather than 5 or more different things - make it much easier to write unit-tests for but also makes it a hell of a lot easier to just debug in general.</p>
<p>On top of that it just <em>feels</em> cleaner. A bit <em>Zen</em> like and how they say if you clear your desk then you&#39;ve cleared your mind. I find more relaxed knowing each of my functions do one thing and one thing only, I know they aren&#39;t becoming overly complex and bloated and I can more easily refactor them without worrying about side effects on my code.</p>
<h2><a name="style-guides-keeping-things-consistent-"class="anchor" href="#style-guides-keeping-things-consistent-"><span class="header-link"></span></a>Style Guides: <em>keeping things consistent</em></h2>
<p>I strongly recommend the use of a Style Guides for a team of developers. Mainly because it means there is a consistency in the code style, and that alone can make a great difference in the ease of maintaining a large code base.</p>
<p>I&#39;ve written a few Style Guides already so I wont go into specifics here:</p>
<p><a href="https://github.com/Integralist/Style-Guides/blob/master/JavaScript%20Style%20Guide.md">JavaScript Style Guide</a></p>
<p><a href="https://github.com/Integralist/Style-Guides/blob/master/HTML%20Style%20Guide.md">HTML Style Guide</a></p>
<p><a href="https://github.com/Integralist/Style-Guides/blob/master/CSS%20Style%20Guide.md">CSS Style Guide</a></p>
<h2><a name="testing-making-sure-stuff-works-"class="anchor" href="#testing-making-sure-stuff-works-"><span class="header-link"></span></a>Testing: <em>making sure stuff works</em></h2>
<p>Well, we all know we should test our code and I admit I just don&#39;t do this enough.</p>
<p>But just to be clear: when I say &#39;test our code&#39; I don&#39;t mean &#39;unit testing&#39; because, although that helps, that doesn&#39;t eliminate all bugs. I also don&#39;t like the idea of writing tests <em>after</em> the code is written - I feel like the tests we write will miss something important (almost like a subconscious design to not break the code we&#39;ve spent a long time writing, so we don&#39;t write the most robust tests we probably could). </p>
<p>I much prefer the TDD (Test-Driven Development) process where you:</p>
<ol>
<li>write tests before you write any code (that way you get to design the perfect API with no compromise). </li>
<li>then start writing code to make the failing tests pass</li>
<li>then once the tests are passing you go back and refactor the code (note: <em>refactor</em> does not mean <em>redesign</em>)</li>
</ol>
<p>This process will ensure you have a rock solid code base. I should do it more than I do but my excuse so far as always been that the time up-front it takes to do this process is something I&#39;ve not been able to properly justify at work considering the types of deadlines we have to deal with.</p>
<p><strong>That being said…</strong> It is our responsibility as developers (we know better than any one else) that if something is to be done properly then it needs to be done right - so we need to be dictating to our managers (or whoever&#39;s making the decisions about time scales) what the real life time scale should be. We&#39;re the experts in this field, so why should any one else tell us how long we have to get to complete a job? And if we&#39;re the one&#39;s giving the estimates/quotes (based on how long something will take to build) then why aren&#39;t we adding in extra time for writing tests the TDD way?</p>
<p>So although I <em>currently</em> don&#39;t don&#39;t do this, on my next job the Test-Driven Development process will be taking a much more prominent place in my developer work flow. It has to, for my sanity.</p>
<p>I highly recommend you use the TDD specific <a href="http://busterjs.org/">BusterJs</a>, which is without a doubt the best testing toolkit available today. I love it. It can be run from the browser or via the command line and makes it very easy to do mocking and stubbing, writing deferred and async tests, nested tests as well as something really useful which is to tell BusterJs to NOT run specific tests based on the results of your own feature detection (e.g. testing a specific feature that is known to crash IE6 is a bit pointless). OH, and it also works with AMD!</p>
<p>I&#39;ve also written an article about <a href="https://github.com/Integralist/Blog-Posts/blob/master/Beginners-guide-on-how-to-test-your-code-%28using-Jasmine-BDD%29.md">using the Behaviour-Driven Development testing framework Jasmine</a> - it goes into detail about testing your code and the differences between TDD/BDD and &#39;unit testing&#39;.</p>
<h2><a name="performance-running-fast-"class="anchor" href="#performance-running-fast-"><span class="header-link"></span></a>Performance: <em>running fast</em></h2>
<p>Performance has had a mention in quite a few areas of this post already so it seems silly not to dedicate a section to it.</p>
<p>I - like many of you - abide by the (now) standard rules of <a href="http://developer.yahoo.com/yslow/">YSlow</a> and <a href="https://developers.google.com/speed/pagespeed/">Google Pagespeed</a> - so things like:</p>
<ul>
<li>Minifying JavaScript/CSS</li>
<li>Reducing HTTP Requests</li>
<li>GZIP all components</li>
<li>Stylesheets at the top of the page</li>
<li>JavaScript at the bottom of the page</li>
<li>Optimise your images (using CSS Sprites or a tool like <a href="http://imageoptim.com/">ImageOptim</a>)</li>
</ul>
<p>...and the list goes on and on. </p>
<p>If you&#39;re not already doing it then make sure you take the time to read through them - as they are all straight forward items that don&#39;t take much effort but REALLY make a difference as far as your website/app&#39;s performance is concerned.</p>
<p>To make your life a little easier you can even use the YSlow and Pagespeed Firebug plugin extensions which make it much easier for checking a site&#39;s compliance with these rules.</p>
<p>But there are other aspects of your site that aren&#39;t simple to resolve - JavaScript performance for one is a massive topic and one that I could never do justice to here, so I will instead simply recommend you read <a href="http://shop.oreilly.com/product/9780596802806.do">High Performance JavaScript </a> by Nicholas C. Zakas which is an excellent compilation of information about fine tuning your JavaScript.</p>
<p>Below is an example of a minor performance dilemma I had recently while writing CSS with the Sass pre-processor. Although this example would likely be an extremely neglible performance hit I still found it interesting (afterwards) how potentially easily it is to make mistakes when using a pre-processor. So here is some Sass driven CSS code… </p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.dashboard-box</span> <span class="err">{</span>
    <span class="k">@include</span><span class="nd"> box-sizing</span><span class="p">(</span><span class="no">border</span><span class="o">-</span><span class="n">box</span><span class="p">)</span><span class="err">;</span>
    <span class="k">@include</span><span class="nd"> shadow</span><span class="p">(</span><span class="mi">1</span><span class="kt">px</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">3</span><span class="kt">px</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mf">.2</span><span class="p">))</span><span class="err">;</span>
    <span class="k">@extend</span> <span class="nc">.box-gradient-bg</span><span class="o">;</span>

    <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$grey</span><span class="err">;</span>
    <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">em</span><span class="err">;</span>

    <span class="k">&amp;</span><span class="o">,</span>
    <span class="o">&gt;</span> <span class="nt">div</span> <span class="err">{</span>
       <span class="k">@include</span><span class="nd"> radius</span><span class="p">(</span><span class="mf">.5</span><span class="kt">em</span><span class="p">)</span><span class="err">;</span>
    <span class="err">}</span>

    <span class="o">&gt;</span> <span class="nt">div</span> <span class="err">{</span>
        <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$white</span><span class="err">;</span>
        <span class="na">padding</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.2</span><span class="kt">em</span><span class="err">;</span>
    <span class="err">}</span>

    <span class="nc">.title</span> <span class="err">{</span>
        <span class="k">@include</span><span class="nd"> radius</span><span class="p">(</span><span class="mf">.3</span><span class="kt">em</span><span class="p">)</span><span class="err">;</span>
        <span class="k">@extend</span> <span class="nc">.header-gradient-bg</span><span class="o">;</span>
        <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.166666667</span><span class="kt">em</span><span class="err">;</span>
        <span class="na">margin</span><span class="o">:</span> <span class="mi">0</span><span class="err">;</span>
    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…which generates the following CSS…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.dashboard-box</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
  <span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#999999</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">1.5em</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.dashboard-box</span><span class="o">,</span>
<span class="nc">.dashboard-box</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.dashboard-box</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">white</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0.2em</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.dashboard-box</span> <span class="nc">.title</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.166666667em</span><span class="p">;</span>
  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…but at first I wasn&#39;t sure if having duplicated selectors (i.e. <code>.dashboard-box</code> and <code>.dashboard-box &gt; div</code>) was very efficient, so I went back and changed my Sass code. This time I put <code>@include radius(.5em);</code> both at the top of the main declaration block as well as inside the <code>&gt; div</code> declaration...</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.dashboard-box</span> <span class="err">{</span>
    <span class="k">@include</span><span class="nd"> radius</span><span class="p">(</span><span class="mf">.5</span><span class="kt">em</span><span class="p">)</span><span class="err">;</span>
    <span class="k">@include</span><span class="nd"> box-sizing</span><span class="p">(</span><span class="no">border</span><span class="o">-</span><span class="n">box</span><span class="p">)</span><span class="err">;</span>
    <span class="k">@include</span><span class="nd"> shadow</span><span class="p">(</span><span class="mi">1</span><span class="kt">px</span> <span class="mi">1</span><span class="kt">px</span> <span class="mi">3</span><span class="kt">px</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mf">.2</span><span class="p">))</span><span class="err">;</span>
    <span class="k">@extend</span> <span class="nc">.box-gradient-bg</span><span class="o">;</span>

    <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$grey</span><span class="err">;</span>
    <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">em</span><span class="err">;</span>

    <span class="o">&gt;</span> <span class="nt">div</span> <span class="err">{</span>
        <span class="k">@include</span><span class="nd"> radius</span><span class="p">(</span><span class="mf">.5</span><span class="kt">em</span><span class="p">)</span><span class="err">;</span>
        <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$white</span><span class="err">;</span>
        <span class="na">padding</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.2</span><span class="kt">em</span><span class="err">;</span>
    <span class="err">}</span>

    <span class="nc">.title</span> <span class="err">{</span>
        <span class="k">@include</span><span class="nd"> radius</span><span class="p">(</span><span class="mf">.3</span><span class="kt">em</span><span class="p">)</span><span class="err">;</span>
        <span class="k">@extend</span> <span class="nc">.header-gradient-bg</span><span class="o">;</span>
        <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.166666667</span><span class="kt">em</span><span class="err">;</span>
        <span class="na">margin</span><span class="o">:</span> <span class="mi">0</span><span class="err">;</span>
    <span class="err">}</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>...which resulted in the following CSS… </p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.dashboard-box</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
  <span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#999999</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">1.5em</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.dashboard-box</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">white</span><span class="p">;</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0.2em</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.dashboard-box</span> <span class="nc">.title</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span>
  <span class="k">font-size</span><span class="o">:</span> <span class="m">1.166666667em</span><span class="p">;</span>
  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>Now, what has this given us? OK so yes this means I don&#39;t have the <code>.dashboard-box</code> or <code>.dashboard-box &gt; div</code> selectors duplicated (which is good), BUT now I&#39;ve got two different problems:</p>
<ul>
<li>the <code>border-radius</code> code is duplicated (so overall file size is now bigger than what it was previously)</li>
<li>code maintainence takes a hit</li>
</ul>
<p>...all at the cost of two selector lookups?</p>
<p>I don&#39;t know which performs better. I could imagine the larger file size GZIP&#39;ing better, but in my Sass code I now have two places I need to update the border radius value (if it ever needed to change), and that&#39;s not efficient with regards to my own time maintaining this code. I know that doesn&#39;t seem like much in this example, but imagine you had this sort of stuff happening all over the place, then it would soon start adding up to be a right pain in the ass.</p>
<p>So in the end I went back to the original solution I had which meant the selector was duplicated but it had the two pros of: overall file size was down and developer maintenance was easier.</p>
<p>In this example neither option was really wrong, but it goes to show that you not only need to be careful when using a pre-processor but also you need to be thinking about how performance and maintenance tie together when writing your code.</p>
<h2><a name="version-control-keeping-track-of-things"class="anchor" href="#version-control-keeping-track-of-things"><span class="header-link"></span></a>Version Control: keeping track of things</h2>
<p>Using version control software is a no-brainer really. Depending on whether you use the comand line interface or a visual app is a personal choice and I prefer to use the command line as it&#39;s just more efficient.</p>
<p>There are many different version control systems, but the one I learnt to use was <a href="http://git-scm.com/">Git</a> (which as of 2012 has had a beautiful site redesign).</p>
<p>The good thing about using Git is that it makes it extremely easy to create &#39;branches&#39; for different areas of development. If the client asks for a new feature to be added then we&#39;ll create a new branch for that feature and then merge back into our master branch when ready to deploy the code.</p>
<p>One of the tenets of version control which I really like and I make sure to follow is: </p>
<blockquote>
<p>the &#39;master&#39; is always deployable</p>
</blockquote>
<p>…so not matter what you&#39;re working: on your &#39;master&#39; branch should always be clean.</p>
<p>I also recommend using <a href="https://github.com/integralist">GitHub</a> for storing your code - there are both public and private accounts so you can keep business critical code safe. One nice feature of GitHub is the ease at which you can create promotional pages for your open-source projects (see: <a href="http://integralist.co.uk/Passage/"><a href="http://integralist.co.uk/Passage/">http://integralist.co.uk/Passage/</a></a> for an example using a pre-designed/built responsive template)</p>
<p>You can also have GitHub host simple website pages for you - <a href="http://www.integralist.co.uk/">my site</a> for example is hosted by GitHub and so I can push my site changes live straight from the command line without needing an FTP program (which is amazing in it&#39;s simplicity and ease) - a nice side effect from having my site hosted on GitHub is that all my GitHub pages are also mapped to my domain - so for example <a href="http://integralist.github.com/Passage"><a href="http://integralist.github.com/Passage">http://integralist.github.com/Passage</a></a> actually redirects to <a href="http://integralist.co.uk/Passage/"><a href="http://integralist.co.uk/Passage/">http://integralist.co.uk/Passage/</a></a>.</p>
<h2><a name="automation-making-life-easier-"class="anchor" href="#automation-making-life-easier-"><span class="header-link"></span></a>Automation: <em>making life easier</em></h2>
<p>There are many ways to automate your work flow, doing so makes you more efficient and productive and in general can just save you hassle.</p>
<p>I&#39;ve already discussed some of the command line tools I use that make my life easier (e.g. jshint, csslint, the RequireJS build script).</p>
<p>But there are other things you can do so as using a content generator like <a href="http://yeoman.io/">Yeoman</a> which I&#39;ll be honest I don&#39;t use but some of the things it does for you are quite nice, such as:</p>
<ul>
<li>Generates project based on criteria you specify</li>
<li>Automatically lints your scripts</li>
<li>Built in preview server</li>
<li>Image optimizer</li>
<li>AppCache manifest generation</li>
<li>Build process</li>
<li>Package management</li>
<li>Unit Testing</li>
</ul>
<p>…all of which sounds great but I really <em>hate</em> the HTML it generates for you. I know that sounds like a minor issue but if that can&#39;t be changed (and apparently it can - so that&#39;s something I&#39;m going to look into) then that&#39;s going to annoy me every single time I use it because it means I&#39;ll end up wasting time on a tool that&#39;s supposed to make things easier <em>for me</em>. </p>
<p>So (in the mean time) I instead have two template projects on GitHub (one for work based PHP projects and one for personal Ruby based projects) that I can clone for each new project and which covers the general set-up each of my sites have.</p>
<p>I already have CSS and JavaScript linting on the command line which works for me and the process of optising images using the ImageOptim app works fine (drag and drop images folder and have it take care of the rest) - but I am currently looking into installing both <a href="http://optipng.sourceforge.net/">OptiPNG</a> and <a href="http://jpegclub.org/jpegtran/">JPEGTran</a> so I can move away from the ImageOptim app and use the command line instead.</p>
<p>I use the command line to handle my dependancies by pulling in GitHub hosted repositories as sub modules and then any time there is an update I can just run <code>git pull</code> on the relevant sub modules to get the latest versions - not quite as automatic as something like Google&#39;s Yeoman but it works for me.</p>
<p>My CSS and JavaScript files are concatenated and minified with a combination of Sass and the RequireJS build script and so the only thing left to do is start programming.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>I felt this (damn)long post deserved a &#39;conclusion&#39; but I&#39;ve suddenly realised that I&#39;m not actually very good at writing them, but here we go:</p>
<p>There is a lot of new cool tech available at the moment - along with the current batch of good/useful development best practices - which has made programming really fun and refreshing for me once again (every few years you get bored of the environment you&#39;re in and then something happens to inject new life into the industry - and that is what has happened over the past year for me). </p>
<p>If you haven&#39;t already, then it&#39;s time to just get stuck in and start taking advantage of what&#39;s out there and help take your skills to the next level.</p>
]]></description><link>http://www.integralist.co.uk/posts/thoughts-on-current-web-development-practices/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/thoughts-on-current-web-development-practices/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Fri, 20 Apr 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Guide to using Sass]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 11mins</em></p>
<ul>
<li>Introduction</li>
<li>Installation</li>
<li>How to run</li>
<li>Comments</li>
<li>Variables</li>
<li>Calculations</li>
<li>Colour functions</li>
<li>Importing</li>
<li>Extend</li>
<li>Mixins</li>
<li>Interpolation</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>I agree that &#39;pre-processors&#39; such as LESS, Sass, Compass etc are normally a bad idea because generally they are used badly by developers/designers who could do better without them (see: <a href="https://github.com/stubbornella/oocss/wiki">Object-Oriented CSS</a>).</p>
<p>That being said, there are some areas where pre-processors can really help out, such as being able to use <code>@import</code> without worrying about the browser loading the stylesheet synchronously and thus making the page slower to load. Or being able to create a variable to hold your client&#39;s branding colours for easy re-use.</p>
<p>In this post I&#39;ve purposely not included details on everything that Sass can do because I don&#39;t believe they are useful. I would rather you utilise principles of OOCSS and only use Sass as an addition to that which helps round off those rough edges when developing CSS for large scale applications. Two items I have mentioned which should be avoided (and I&#39;ll repeat this later as well) are <code>@extend</code> and <code>@mixin</code>. Both of these causes more problems than they solve and can be worked around with good OOCSS structuring, but I&#39;ve mentioned them so curious readers don&#39;t think I&#39;ve neglected them out of hand and so I&#39;ve detailed some of the potential issues with using them (use at your own risk!)</p>
<h2><a name="installation"class="anchor" href="#installation"><span class="header-link"></span></a>Installation</h2>
<p>To install Sass you need to have <code>Ruby</code> installed.</p>
<p>For Mac users, you already have it!</p>
<p>For Window users there are quite a few installers available, but according to some: <a href="http:/rubyinstaller.org">http:/rubyinstaller.org</a> is recommended.</p>
<p>Once <code>Ruby</code> is installed, you&#39;ll need to open your command line interface of choice (I&#39;m on a Mac, so for me this is the <code>Terminal</code> app).</p>
<p>From the command line execute <code>gem install sass</code> (I needed to use <code>sudo</code> along with that because I didn&#39;t have authorisation to install in the directory it wanted)</p>
<h2><a name="how-to-run"class="anchor" href="#how-to-run"><span class="header-link"></span></a>How to run</h2>
<p>Within the command line navigate to your website directory and execute the command <code>sass --watch Assets/Styles/</code> (change <code>Assets/Styles/</code> to whatever path your Sass/CSS files are). As you can see in my example, from the root directory of my website I have my Sass files stored here: <code>Assets/Styles</code>. This command uses the <code>--watch</code> flag which means every time a <code>.scss</code> file is saved a corresponding <code>.css</code> file is compiled automatically for you.</p>
<p>One thing to be aware of is that if you aren going to use <code>nested</code> items (which apparently is a big selling point for Sass users but one that I personally think is a terrible feature for performance and efficiency) then you&#39;ll be better off starting up Sass using <code>sass --style expanded --watch Assets/Styles/</code> which means when your CSS is compiled the nested output will at least be laid out more logically than their default mess of a display (which is very difficult to try and understand).</p>
<p>One last point here is that if you execute the above command then you will need to have your <code>.scss</code> files in the same location as where your <code>.css</code> files should be. If on the other hand, like me, you prefer to keep your Sass files separate then amend the original command as follows:</p>
<p><code>sass --style extended --watch Assets/Styles/Sass/:Assets/Styles/</code> </p>
<p>…this basically says &quot;watch the folder <code>Assets/Styles/Sass/</code> and compile any files into the parent folder <code>Assets/Styles</code>&quot; - you&#39;ll notice that the colon character <code>:</code> is what helped make that happen.</p>
<h2><a name="comments"class="anchor" href="#comments"><span class="header-link"></span></a>Comments</h2>
<p>Comments are a standard feature of CSS, but sometimes it would be nice to use a easier syntax for writing them (as seen in other programming languages). Such as: <code>// this is a comment</code> rather than having to write <code>/* a typical CSS comment */</code>.</p>
<p>Sass lets you do this, but it&#39;s worth keeping in mind that the reason they provide this is so you can have &#39;private&#39; comments, and by this they mean that comments like <code>// comment</code> are not included in the compiled CSS file, where as the standard comments style <code>/* comment */</code> are. Not that this should matter because when you push your CSS to the production server it should be minified for performance purposes, but it&#39;s worth knowing about.</p>
<h2><a name="variables"class="anchor" href="#variables"><span class="header-link"></span></a>Variables</h2>
<p>Variables are a great way to not have to repeat entering the same value over and over. The most common use case is the client&#39;s branding colours. Normally this colour will appear in lots of different areas of the site (links, hover effects etc) and if the colour does need to change slightly then you either do it by hand or you run a &#39;find and replace&#39; function.</p>
<p>To create a variable in Sass you simply prefix the name of the variable with a dollar sign: <code>$brand_color: #C00;</code> I can now use <code>$brand_color</code> wherever I like. For example…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.header</span> <span class="err">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nv">$brand_color</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>This makes life a lot easier and although I&#39;ve seen people claim that OOCSS can work around this, it can, but not easily and so using Sass for this alone is still extremely useful in my mind.</p>
<h2><a name="calculations"class="anchor" href="#calculations"><span class="header-link"></span></a>Calculations</h2>
<p>I can&#39;t imagine me ever using this feature, but I&#39;ve included it because it also doesn&#39;t cause any negative effect (unlike <code>@extend</code> and <code>@mixin</code>).</p>
<p>You can use all standard operators (*, /, +, -) for example:</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nv">$width</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="err">;</span> 
<span class="nv">$double_width</span><span class="o">:</span> <span class="nv">$width</span> <span class="o">*</span> <span class="mi">2</span><span class="err">;</span>
</pre></div>
</code></pre>
<p>You can do calculations inline (i.e. where the property value is set) and you can also group calculations:</p>
<p><code>width: $width * (1 - $sidebar_percent);</code></p>
<h2><a name="colour-functions"class="anchor" href="#colour-functions"><span class="header-link"></span></a>Colour functions</h2>
<p>These are very useful. A lot of times you have for example &#39;hover&#39; effects that need a colour that is similar in shade to the main brand colour. Normally you have to open up a colour palette and randomly pick something, whereas the following functions help with that process:</p>
<p><code>lighten(colour, percentage)</code></p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.txt-light</span> <span class="err">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nf">lighten</span><span class="p">(</span><span class="nv">$brand_color</span><span class="o">,</span> <span class="mi">30</span><span class="kt">%</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p><code>darken(colour, percentage)</code></p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.txt-dark</span> <span class="err">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$brand_color</span><span class="o">,</span> <span class="mi">10</span><span class="kt">%</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p><code>saturate(colour, percentage)</code></p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.txt-sat</span> <span class="err">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nf">saturate</span><span class="p">(</span><span class="nv">$brand_color</span><span class="o">,</span> <span class="mi">100</span><span class="kt">%</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p><code>desaturate(colour, percentage)</code></p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.txt-desat</span> <span class="err">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nf">desaturate</span><span class="p">(</span><span class="nv">$brand_color</span><span class="o">,</span> <span class="mi">20</span><span class="kt">%</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p><code>adjust-hue(colour, degrees)</code></p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.txt-hue</span> <span class="err">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nf">adjust-hue</span><span class="p">(</span><span class="nv">$brand_color</span><span class="o">,</span> <span class="mi">180</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p><code>grayscale(colour)</code></p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.txt-greyscale</span> <span class="err">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nf">grayscale</span><span class="p">(</span><span class="nv">$brand_color</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p><code>mix(colour, colour)</code></p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.txt-mix</span> <span class="err">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nf">mix</span><span class="p">(</span><span class="nv">$brand_color</span><span class="o">,</span> <span class="mh">#C00</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<h2><a name="importing"class="anchor" href="#importing"><span class="header-link"></span></a>Importing</h2>
<p>You can import other Sass files into your main stylesheet using <code>@import &quot;other.scss&quot;</code></p>
<p>The biggest note of warning here is that if you import a SCSS file and that file generates a CSS file of its own then you wont be able to use variables that aren&#39;t imported or defined in the imported SCSS file. For example… </p>
<p>If you have the main stylesheet <code>structure.scss</code> and within that file you import another SCSS file called <code>colours.scss</code> - if <code>colours.scss</code> generates its own CSS file <code>colours.css</code> then the Sass file <code>colours.scss</code> cannot use any variables that are defined inside <code>structure.scss</code> (or which have been imported separately into <code>structure.scss</code>). </p>
<p>…there is a work-around to this which is to make sure <code>colours.scss</code> doesn&#39;t generate a CSS file, and the way you do that is prefix the file name with an underscore <code>_colours.scss</code>. You can also still import it without specifying the underscore: <code>@import &quot;colours.scss&quot;;</code></p>
<p>To be honest, it&#39;s likely that any stylesheets you have deemed modular enough to be imported you&#39;ll want them not to generate their own CSS files (what would be the point if when compiled they are being imported into the main CSS file?)</p>
<p><strong>Beware!</strong> if you&#39;re main stylesheet has for example a <code>.brand</code> class and so does your imported stylesheet, when you compile the Sass file into CSS the <code>.brand</code> class will be listed twice.</p>
<p>For example:</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nv">$brand_color</span><span class="o"> =</span> <span class="mh">#0000FF</span><span class="err">;</span>
<span class="nc">.brand</span> <span class="err">{</span> 
    <span class="na">color</span><span class="o">:</span> <span class="nv">$brand_color</span><span class="err">;</span> 
<span class="err">}</span>
<span class="c1">// MORE STYLES</span>
<span class="k">@import</span> <span class="s">&quot;other.scss&quot;;</span>
</pre></div>
</code></pre>
<p>…generates the following CSS…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.brand</span> <span class="p">{</span> 
    <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> 
<span class="p">}</span>
<span class="o">//</span> <span class="nt">MORE</span> <span class="nt">STYLES</span>
<span class="nc">.brand</span> <span class="p">{</span> 
    <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> 
<span class="p">}</span>
</pre></div>
</code></pre>
<p>…which obviously isn&#39;t as efficient or clean as…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.brand</span> <span class="p">{</span> 
    <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> 
    <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> 
<span class="p">}</span>
<span class="o">//</span> <span class="nt">MORE</span> <span class="nt">STYLES</span>
</pre></div>
</code></pre>
<p>…but that&#39;s the trade-off between Sass features and the efficiency of the produced code.</p>
<p>Note: you can import a normal CSS file (as you would in standard CSS) but it&#39;ll be pushed to the top of the compiled CSS file. This is because in standard CSS an imported stylesheet is only allowed to be imported from the top of the file.</p>
<p>Lastly, be aware that you could end up trying to import the same Sass file multiple times, and the way Sass handles that situation is by only including the imported file once BUT in the last place it was referenced (which may or may not cause you specificity issues).</p>
<h2><a name="extend"class="anchor" href="#extend"><span class="header-link"></span></a>Extend</h2>
<p>This feature is almost pointless as you really should be developing OOCSS (object-oriented CSS). All this does is repeat properties in the compiled CSS file. </p>
<p>The reason I&#39;m even mentioning this feature is so you know not to bother with it and instead concentrate on the concepts of OOCSS more.</p>
<p>Anywhere you have a CSS class you can re-import that inside another rule:</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.myClass</span> <span class="err">{</span>
    <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="mh">#969</span><span class="err">;</span>
    <span class="na">color</span><span class="o">:</span> <span class="nb">red</span><span class="err">;</span>
<span class="err">}</span>

<span class="nt">button</span> <span class="err">{</span>
    <span class="k">@extend</span> <span class="nc">.myClass</span><span class="o">;</span>
    <span class="na">background-color</span><span class="o">:</span> <span class="ni">orange</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…which generates the following CSS…</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.myClass</span><span class="o">,</span> <span class="nt">button</span> <span class="p">{</span>
    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#969</span><span class="p">;</span>
    <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">button</span> <span class="p">{</span>
    <span class="k">background-color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>A couple of last words of caution: <code>extend</code> avoids code duplication but it also causes other problems in that the amount of selectors can become an issue. If you @extend the same base class multiple times you may end up with a rule that has thousands of selectors, which isn&#39;t good for performance and can even make the browser crash (limit its use if you must use it).</p>
<p>Also, you could end up adding properties that are already specified in the <code>extend</code>/<code>mixin</code> because let&#39;s face it you&#39;re unlikely to remember every property set inside them, so when you do use them and come back a few days/weeks/months later to make further updates you&#39;ll have to keep checking them before you can safely add another property just to make sure you&#39;re not doubling up on properties already there - which is hassle and can lead to mistakes.</p>
<h2><a name="mixins"class="anchor" href="#mixins"><span class="header-link"></span></a>Mixins</h2>
<p>These are functionally similar to <code>extend</code>, but a mixin&#39;s properties are copied into the class rather than referenced (<code>extend</code> is designed to be used as a mechanism for proper inheritance as seen in other classical object-oriented programming languages), but more importantly with mixins you can also change the values when calling the mixin into your class (like they were a function).</p>
<p>Remember that this can cause code duplication so please do NOT use &#39;Mixins&#39; (OOCSS should be used instead).</p>
<p>You create a mixing like so:</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="k">@mixin</span> <span class="nc">.myMixin</span> <span class="err">{</span> 
    <span class="na">color</span><span class="o">:</span> <span class="nb">blue</span><span class="err">;</span> 
<span class="err">}</span>
<span class="nc">.product_title</span> <span class="err">{</span>
    <span class="k">@include</span> <span class="nc">.myMixin</span><span class="o">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…and you can change the values like so…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="k">@mixin</span> <span class="nc">.myMixin</span><span class="o">(</span><span class="err">$</span><span class="nt">set_colour</span><span class="o">)</span> <span class="err">{</span> 
    <span class="na">color</span><span class="o">:</span> <span class="nv">$set_colour</span><span class="err">;</span> 
<span class="err">}</span>
<span class="nc">.product_title</span> <span class="err">{</span>
    <span class="k">@include</span> <span class="nc">.myMixin</span><span class="o">(</span><span class="nn">#FF0000</span><span class="o">);</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…you can also define a default value if none is provided…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="k">@mixin</span> <span class="nc">.myMixin</span><span class="o">(</span><span class="err">$</span><span class="nt">set_colour</span><span class="nd">:</span> <span class="nn">#0000FF</span><span class="o">)</span> <span class="err">{</span> 
    <span class="na">color</span><span class="o">:</span> <span class="nv">$set_colour</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…you can use mixin&#39;s for things like CSS3 properties…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="k">@mixin</span><span class="nf"> rounded_borders</span><span class="p">(</span><span class="nv">$color</span><span class="o">,</span> <span class="nv">$width</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span><span class="o">,</span> <span class="nv">$rounding</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">)</span> <span class="err">{</span> 
    <span class="na">-moz-border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span> 
    <span class="na">-webkit-border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span> 
    <span class="na">-khtml-border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span> 
    <span class="na">-o-border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span>
         <span class="na">border-radius</span><span class="o">:</span> <span class="nv">$rounding</span> <span class="nv">$rounding</span><span class="err">;</span>
         <span class="na">border</span><span class="o">:</span> <span class="nv">$width</span> <span class="no">solid</span> <span class="nv">$color</span><span class="err">;</span>
<span class="err">}</span>

<span class="k">@mixin</span><span class="nf"> opacity</span><span class="p">(</span><span class="nv">$opacity</span><span class="p">)</span> <span class="err">{</span>
    <span class="na">filter</span><span class="o">:</span> <span class="nf">alpha</span><span class="p">(</span><span class="no">opacity</span><span class="o">=</span><span class="si">#{</span><span class="nv">$opacity</span><span class="si">}</span><span class="p">)</span><span class="err">;</span> <span class="c1">// IE 5-9+ </span>
    <span class="na">opacity</span><span class="o">:</span> <span class="nv">$opacity</span> <span class="o">*</span> <span class="mi">0</span><span class="mf">.01</span><span class="err">;</span> 
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…and use the opacity like so…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="nc">.h1</span> <span class="err">{</span> 
    <span class="c1">// Use the IE numbering style (instead of the W3C&#39;s 0-1 numbering style)</span>
    <span class="k">@include</span><span class="nd"> opacity</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…or you could use the reverse…</p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="k">@mixin</span><span class="nf"> opacity</span><span class="p">(</span><span class="nv">$opacity</span><span class="p">)</span> <span class="err">{</span>
    <span class="na">filter</span><span class="o">:</span> <span class="nf">alpha</span><span class="p">(</span><span class="no">opacity</span><span class="o">=</span><span class="si">#{</span><span class="nv">$opacity</span><span class="o">*</span><span class="mi">100</span><span class="si">}</span><span class="p">)</span><span class="err">;</span> <span class="c1">// IE 5-9+ </span>
    <span class="na">opacity</span><span class="o">:</span> <span class="nv">$opacity</span><span class="err">;</span> 
<span class="err">}</span>
</pre></div>
</code></pre>
<h2><a name="interpolation"class="anchor" href="#interpolation"><span class="header-link"></span></a>Interpolation</h2>
<p>One area where mixins can&#39;t help you is when there is some specific CSS3 syntax such as <code>background-image</code> (with gradients). This is because not only the value changes but the syntax itself is different for each browser. </p>
<p>One way to work around this issue is to use <code>interpolation</code>. The way it works is that you wrap a variable name with <code>#{}</code> e.g. <code>#{$my_variable}</code> and that will dynamically insert the value at that place in your CSS. Might sound a bit confusing so best to demonstrate this with an example, and the best example I can think of is again the <code>background-image</code> property with multiple different vendor prefixes… </p>
<pre><code class="lang-sass"><div class="highlight"><pre><span class="c1">// Variable</span>
<span class="nv">$prefixes</span><span class="o">:-</span><span class="n">webkit</span><span class="o">,-</span><span class="n">moz</span><span class="o">,-</span><span class="n">ms</span><span class="o">,-</span><span class="n">o</span><span class="err">;</span>

<span class="c1">// Loop over each item in the $prefixes variable</span>
<span class="c1">// using interpolation to insert the relevant value dynamically</span>
<span class="k">@each</span> <span class="err">$</span><span class="nt">prefix</span> <span class="nt">in</span> <span class="err">$</span><span class="nt">prefixes</span> <span class="err">{</span>
    <span class="na">background-image</span><span class="o">:</span> <span class="si">#{</span><span class="nv">$prefix</span><span class="si">}</span><span class="nf">-linear-gradient</span><span class="p">(</span><span class="nf">rgba</span><span class="p">(</span><span class="mi">255</span><span class="o">,</span><span class="mi">255</span><span class="o">,</span><span class="mi">255</span><span class="o">,</span><span class="mi">0</span><span class="p">)</span><span class="o">,</span> <span class="nf">rgba</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="mf">.1</span><span class="p">))</span><span class="err">;</span>
<span class="err">}</span>

<span class="c1">// The following example might be better placed inside a mixin or extend</span>
<span class="k">@each</span> <span class="err">$</span><span class="nt">prefix</span> <span class="nt">in</span> <span class="err">$</span><span class="nt">prefixes</span> <span class="err">{</span>
    <span class="na">#{$prefix}-border-radius</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="err">;</span>
<span class="err">}</span>
</pre></div>
</code></pre>
<p>…most of the time mixins will help you work around CSS3 vendor prefixes but in the above instance <code>interpolation</code> is the way forward.</p>
]]></description><link>http://www.integralist.co.uk/posts/guide-to-using-sass/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/guide-to-using-sass/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Thu, 19 Apr 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Node.js as a tool]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 6mins</em></p>
<ul>
<li>Introduction</li>
<li>Prerequisite</li>
<li>CSSLint</li>
<li>JsHint</li>
<li>RequireJS/r.js</li>
<li>gh-markdown-cli</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>NodeJs is best known for running server-side JavaScript, but it can also be used for other processes that run on your local machine: See: <a href="http://blog.millermedeiros.com/node-js-as-a-build-script/">Node.js as a build script</a> (by <a href="https://github.com/millermedeiros/">@millermedeiros</a>) for lots of examples of this.</p>
<p>With the help of <a href="http://mxcl.github.com/homebrew/">Homebrew</a> (yes I know I&#39;m only catering for Mac users here - what a scum bag I am - but the principles are the same I&#39;m just using <code>Homebrew</code> to get these packages installed) we can get our prerequisite installed.</p>
<h2><a name="prerequisite"class="anchor" href="#prerequisite"><span class="header-link"></span></a>Prerequisite</h2>
<p>I have to assume you&#39;ve already got Homebrewm, Node and NPM installed? If not then open up your terminal/command line tool of choice and follow these steps:</p>
<ol>
<li><p>Install Homebrew by executing this command:<br> <code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.github.com/gist/323731)&quot;</code></p>
</li>
<li><p>Install Node by executing this command:<br> <code>brew install node</code></p>
</li>
<li><p>Install NPM by executing this command:<br> <code>curl http://npmjs.org/install.sh | sh</code></p>
</li>
</ol>
<p>After that you should be able to execute <code>brew --version</code>, <code>node --version</code> and <code>npm --version</code> and get version numbers back to show that they&#39;ve installed.</p>
<h2><a name="csslint"class="anchor" href="#csslint"><span class="header-link"></span></a>CSSLint</h2>
<p>&quot;<em>Automated linting of Cascading Stylesheets</em>&quot;</p>
<p><a href="https://github.com/stubbornella/csslint"><a href="https://github.com/stubbornella/csslint">https://github.com/stubbornella/csslint</a></a></p>
<p><strong>Installation</strong>:<br><code>npm install -g csslint</code></p>
<p><strong>Example usage:</strong></p>
<pre><code class="lang-sh"><div class="highlight"><pre>csslint <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>file<span class="p">|</span>dir<span class="o">]</span>*
csslint file1.css file2.css  
csslint ./  
csslint --errors<span class="o">=</span>box-model,ids test.css // <span class="o">=</span>&gt; decide what should be errors  
csslint --warnings<span class="o">=</span>box-model,ids test.css // <span class="o">=</span>&gt; decide what should be warnings
</pre></div>
</code></pre>
<p><strong>Configuration:</strong><br>You can view the options by running <code>csslint --help</code><br>All &#39;rules&#39; can be viewed using: <code>csslint --list-rules</code><br>The rules have #ID&#39;s that you can specify as errors|warnings</p>
<p><strong>Generic usage:</strong><br><code>csslint --errors=import,compatible-vendor-prefixes,display-property-grouping,overqualified-elements,fallback-colors,duplicate-properties,empty-rules,gradients,universal-selector,vendor-prefix,zero-units --warnings=important,known-properties,font-sizes,outline-none,shorthand,unqualified-attributes</code></p>
<p><strong>Prettier Syntax:</strong><br>It&#39;s recommended to create a shell script to wrap the CSS Lint functionality so you can use the same syntax as the Node.js CLI. </p>
<p>For Linux/Mac, create a file named <code>csslint</code> and add the following to the file:  </p>
<pre><code class="lang-sh"><div class="highlight"><pre><span class="c">#!/bin/bash</span>
java -jar js.jar csslint-rhino.js <span class="nv">$@</span>
</pre></div>
</code></pre>
<p>After creating the file, you need to ensure it can be executed, so go to the command line and type:<br><code>chmod +x csslint</code></p>
<h2><a name="jshint"class="anchor" href="#jshint"><span class="header-link"></span></a>JsHint</h2>
<p>&quot;<em>CLI and NPM package for JSHint</em>&quot;</p>
<p><a href="https://github.com/jshint/node-jshint"><a href="https://github.com/jshint/node-jshint">https://github.com/jshint/node-jshint</a></a></p>
<p><strong>Installation:</strong><br>npm install jshint</p>
<p><strong>Example usage:</strong>  </p>
<pre><code class="lang-sh"><div class="highlight"><pre>jshint path path2 <span class="o">[</span>options<span class="o">]</span> // <span class="o">=</span>&gt; run against specific scripts
jshint *.js // <span class="o">=</span>&gt; run against all scripts
jshint main.js --show-non-errors // <span class="o">=</span>&gt; show non-errors <span class="o">(</span>e.g. Implied globals etc<span class="o">)</span>
jshint main.js --config ./Lint/config.json // <span class="o">=</span>&gt; use specific configuration options
jshint main.js --show-non-errors --config ./Lint/config.json // <span class="o">=</span>&gt; example of showing non-errors against specific configuration settings
</pre></div>
</code></pre>
<p>If you get no errors then that means the script ran fine</p>
<p><strong>Generic usage:</strong><br><code>jshint **/*.js --config ./Lint/config.json</code></p>
<p><strong>Configuration:</strong><br>Your <code>config.json</code> file could look like the following…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="p">{</span>
    <span class="c1">// Settings</span>
    <span class="s2">&quot;passfail&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Stop on first error.</span>
    <span class="s2">&quot;maxerr&quot;</span>        <span class="o">:</span> <span class="mi">200</span><span class="p">,</span>    <span class="c1">// Maximum error before stopping.</span>


    <span class="c1">// Predefined globals whom JSHint will ignore.</span>
    <span class="s2">&quot;browser&quot;</span>       <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Standard browser globals e.g. `window`, `document`.</span>

    <span class="s2">&quot;node&quot;</span>          <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;rhino&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;couch&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;wsh&quot;</span>           <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>   <span class="c1">// Windows Scripting Host.</span>

    <span class="s2">&quot;jquery&quot;</span>        <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s2">&quot;prototypejs&quot;</span>   <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;mootools&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="s2">&quot;dojo&quot;</span>          <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>

    <span class="s2">&quot;predef&quot;</span>        <span class="o">:</span> <span class="p">[</span>  <span class="c1">// Custom globals.</span>
        <span class="c1">// this is because we use require() from RequireJS library</span>
        <span class="s2">&quot;require&quot;</span><span class="p">,</span>
        <span class="s2">&quot;define&quot;</span><span class="p">,</span>

        <span class="c1">// this is because we use Jasmine BDD for unit-testing</span>
        <span class="s2">&quot;jasmine&quot;</span><span class="p">,</span>
        <span class="s2">&quot;describe&quot;</span><span class="p">,</span>
        <span class="s2">&quot;beforeEach&quot;</span><span class="p">,</span>
        <span class="s2">&quot;afterEach&quot;</span><span class="p">,</span>
        <span class="s2">&quot;it&quot;</span><span class="p">,</span>
        <span class="s2">&quot;expect&quot;</span>
    <span class="p">],</span>


    <span class="c1">// Development.</span>
    <span class="s2">&quot;debug&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow debugger statements e.g. browser breakpoints.</span>
    <span class="s2">&quot;devel&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow developments statements e.g. `console.log();`.</span>


    <span class="c1">// ECMAScript 5.</span>
    <span class="s2">&quot;es5&quot;</span>           <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Allow ECMAScript 5 syntax.</span>
    <span class="s2">&quot;strict&quot;</span>        <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Require `use strict` pragma  in every file.</span>
    <span class="s2">&quot;globalstrict&quot;</span>  <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow global &quot;use strict&quot; (also enables &#39;strict&#39;).</span>


    <span class="c1">// The Good Parts.</span>
    <span class="s2">&quot;asi&quot;</span>           <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate Automatic Semicolon Insertion (no semicolons).</span>
    <span class="s2">&quot;laxbreak&quot;</span>      <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.</span>
    <span class="s2">&quot;bitwise&quot;</span>       <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit bitwise operators (&amp;, |, ^, etc.).</span>
    <span class="s2">&quot;boss&quot;</span>          <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Tolerate assignments inside if, for &amp; while. Usually conditions &amp; loops are for comparison, not assignments.</span>
    <span class="s2">&quot;curly&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require {} for every new block or scope.</span>
    <span class="s2">&quot;eqeqeq&quot;</span>        <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require triple equals i.e. `===`.</span>
    <span class="s2">&quot;eqnull&quot;</span>        <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate use of `== null`.</span>
    <span class="s2">&quot;evil&quot;</span>          <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate use of `eval`.</span>
    <span class="s2">&quot;expr&quot;</span>          <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate `ExpressionStatement` as Programs.</span>
    <span class="s2">&quot;forin&quot;</span>         <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate `for in` loops without `hasOwnPrototype`.</span>
    <span class="s2">&quot;immed&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`</span>
    <span class="s2">&quot;latedef&quot;</span>       <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohipit variable use before definition.</span>
    <span class="s2">&quot;loopfunc&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow functions to be defined within loops.</span>
    <span class="s2">&quot;noarg&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit use of `arguments.caller` and `arguments.callee`.</span>
    <span class="s2">&quot;regexp&quot;</span>        <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Prohibit `.` and `[^...]` in regular expressions.</span>
    <span class="s2">&quot;regexdash&quot;</span>     <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate unescaped last dash i.e. `[-...]`.</span>
    <span class="s2">&quot;scripturl&quot;</span>     <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Tolerate script-targeted URLs.</span>
    <span class="s2">&quot;shadow&quot;</span>        <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Allows re-define variables later in code e.g. `var x=1; x=2;`.</span>
    <span class="s2">&quot;supernew&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate `new function () { ... };` and `new Object;`.</span>
    <span class="s2">&quot;undef&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require all non-global variables be declared before they are used.</span>


    <span class="c1">// Personal styling preferences.</span>
    <span class="s2">&quot;newcap&quot;</span>        <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Require capitalization of all constructor functions e.g. `new F()`.</span>
    <span class="s2">&quot;noempty&quot;</span>       <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit use of empty blocks.</span>
    <span class="s2">&quot;nonew&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit use of constructors for side-effects.</span>
    <span class="s2">&quot;nomen&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Prohibit use of initial or trailing underbars in names.</span>
    <span class="s2">&quot;onevar&quot;</span>        <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Allow only one `var` statement per function.</span>
    <span class="s2">&quot;plusplus&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Prohibit use of `++` &amp; `--`.</span>
    <span class="s2">&quot;sub&quot;</span>           <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Tolerate all forms of subscript notation besides dot notation e.g. `dict[&#39;key&#39;]` instead of `dict.key`.</span>
    <span class="s2">&quot;trailing&quot;</span>      <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>  <span class="c1">// Prohibit trailing whitespaces.</span>
    <span class="s2">&quot;white&quot;</span>         <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// Check against strict whitespace and indentation rules.</span>
    <span class="s2">&quot;indent&quot;</span>        <span class="o">:</span> <span class="mi">4</span><span class="p">,</span>      <span class="c1">// Specify indentation spacing</span>
    <span class="s2">&quot;smarttabs&quot;</span>        <span class="o">:</span> <span class="kc">true</span>      <span class="c1">// Suppress warnings about mixed tabs and spaces</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<h2><a name="requirejs-r-js"class="anchor" href="#requirejs-r-js"><span class="header-link"></span></a>RequireJS/r.js</h2>
<p>&quot;<em>Runs RequireJS in Node and used to run the RequireJS optimizer</em>&quot;</p>
<p><a href="https://github.com/jrburke/r.js"><a href="https://github.com/jrburke/r.js">https://github.com/jrburke/r.js</a></a></p>
<p><strong>Generic usage:</strong><br><code>node r.js -o app.build.js</code></p>
<p><strong>Configuration:</strong><br>You create a &#39;build&#39; script file (see below for an example) and then you use NodeJs to execute the <code>r.js</code> optimization script and pass through your build script as an argument</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/*</span>
<span class="cm"> * http://requirejs.org/docs/optimization.html</span>
<span class="cm"> *</span>
<span class="cm"> * See: https://github.com/jrburke/r.js/blob/master/build/example.build.js for an example build script</span>
<span class="cm"> *</span>
<span class="cm"> * If you specify just the name (with no includes/excludes) then all modules are combined into the &quot;main&quot; file.</span>
<span class="cm"> * You can include/exclude specific modules though if needed (this helps with &#39;lazy loading&#39; scripts)</span>
<span class="cm"> *</span>
<span class="cm"> * You can also set optimize: &quot;none&quot; (or more specific uglifyjs settings) if you need to.</span>
<span class="cm"> *</span>
<span class="cm"> * Node: if you set relative paths then do them relative to the baseUrl</span>
<span class="cm"> */</span>
<span class="p">({</span>    
    <span class="nx">appDir</span><span class="o">:</span> <span class="s1">&#39;../../../&#39;</span><span class="p">,</span>
    <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;Assets/Scripts&#39;</span><span class="p">,</span>
    <span class="nx">dir</span><span class="o">:</span> <span class="s1">&#39;../../../project-build&#39;</span><span class="p">,</span>
    <span class="cm">/*</span>
<span class="cm">     * The below &#39;paths&#39; object is useful for when using plugins/named module paths.</span>
<span class="cm">     * If you use plugins or named modules in your code then don&#39;t forget to specify the same paths again in your build script.</span>
<span class="cm">     * Otherwise your build script wont be able to find your plugins/named modules and will generate an error when building.</span>
<span class="cm">     */</span>
    <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">async</span><span class="o">:</span> <span class="s1">&#39;Plugins/async&#39;</span><span class="p">,</span>
        <span class="nx">jquery</span><span class="o">:</span> <span class="s1">&#39;Utils/jquery&#39;</span><span class="p">,</span>
        <span class="nx">tpl</span><span class="o">:</span> <span class="s1">&#39;Plugins/tpl&#39;</span>
    <span class="p">},</span>
    <span class="nx">optimize</span><span class="o">:</span> <span class="s1">&#39;none&#39;</span><span class="p">,</span>
    <span class="nx">modules</span><span class="o">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;main&#39;</span>
            <span class="cm">/*</span>
<span class="cm">            include: [&#39;module&#39;],</span>
<span class="cm">            exclude: [&#39;module&#39;]</span>
<span class="cm">            */</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">})</span>
</pre></div>
</code></pre>
<h2><a name="gh-markdown-cli"class="anchor" href="#gh-markdown-cli"><span class="header-link"></span></a>gh-markdown-cli</h2>
<p>&quot;<em>Node.js command-line tool to batch convert Markdown files into HTML</em>&quot;</p>
<p><a href="https://github.com/millermedeiros/gh-markdown-cli"><a href="https://github.com/millermedeiros/gh-markdown-cli">https://github.com/millermedeiros/gh-markdown-cli</a></a></p>
<p><strong>Installation:</strong><br><code>sudo npm install gh-markdown-cli -g</code></p>
<p><strong>Example usage (cd into directory where your md files are):</strong><br><code>mdown -o &quot;./&quot; --include &quot;*.md&quot; --header &quot;header.html&quot; --footer &quot;footer.html&quot;</code></p>
<p>Once installed, use the terminal to locate your .md files and then run the above command (you don&#39;t have to use the --header and --footer flags as these are optional)</p>
]]></description><link>http://www.integralist.co.uk/posts/node-js-as-a-tool/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/node-js-as-a-tool/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 04 Mar 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Beginners guide to AMD and RequireJS]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 11mins</em></p>
<ul>
<li>What is AMD?</li>
<li>Why does it matter?</li>
<li>How did we get here?</li>
<li>How does RequireJS (and alternatives) fit in?</li>
<li>Can we use jQuery?</li>
<li>Basic Example</li>
<li>What now?</li>
<li>Links/Reference Material</li>
</ul>
<h2><a name="what-is-amd-"class="anchor" href="#what-is-amd-"><span class="header-link"></span></a>What is AMD?</h2>
<p>AMD stands for “Asynchronous Module Definition” and is a proposed API for loading modules (i.e. scripts) asynchronously.</p>
<h2><a name="why-does-it-matter-"class="anchor" href="#why-does-it-matter-"><span class="header-link"></span></a>Why does it matter?</h2>
<p>A few reasons, the summary of which is:</p>
<ul>
<li>Performance (loading scripts asynchronously improves the loading speed of your web page).</li>
<li>Modular (which means code that is easier to maintain and re-use).</li>
<li>Best practice (helps to reduce global variables, maintain dependancies, and your code will follow guidelines that will in the future become the standards for the next iteration of JavaScript)</li>
</ul>
<h2><a name="how-did-we-get-here-"class="anchor" href="#how-did-we-get-here-"><span class="header-link"></span></a>How did we get here?</h2>
<p>The way we insert scripts into our pages has evolved over the years:</p>
<h3><a name="multiple-script-tags"class="anchor" href="#multiple-script-tags"><span class="header-link"></span></a>Multiple <code>&lt;script&gt;</code> tags</h3>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;script-1.js&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;script-2.js&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;script-3.js&quot;</span><span class="nt">&gt;</span>
</pre></div>
</code></pre>
<h3><a name="script-loader-e-g-labjs-yepnope-js-and-many-many-more-"class="anchor" href="#script-loader-e-g-labjs-yepnope-js-and-many-many-more-"><span class="header-link"></span></a>Script Loader (e.g. LABjs / YepNope.js …and many many more)</h3>
<pre><code class="lang-html"><div class="highlight"><pre>// This example uses LABjs
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;LAB.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="nx">$LAB</span><span class="p">.</span><span class="nx">script</span><span class="p">(</span><span class="s1">&#39;script-1.js&#39;</span><span class="p">).</span><span class="nx">wait</span><span class="p">().</span><span class="nx">script</span><span class="p">(</span><span class="s1">&#39;script-2.js&#39;</span><span class="p">).</span><span class="nx">script</span><span class="p">(</span><span class="s1">&#39;script-3.js&#39;</span><span class="p">);</span>
<span class="nt">&lt;/script&gt;</span>
</pre></div>
</code></pre>
<h3><a name="amd-script-loader-e-g-requirejs-curl-and-a-couple-of-others-"class="anchor" href="#amd-script-loader-e-g-requirejs-curl-and-a-couple-of-others-"><span class="header-link"></span></a>AMD Script Loader (e.g. RequireJS / Curl …and a couple of others)</h3>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;main&quot;</span> <span class="na">src=</span><span class="s">&quot;require.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre></div>
</code></pre>
<p>The ‘multiple scripts’ has served us long and true, but means that the rendering of the page takes three times as long, as each <code>&lt;script&gt;</code> tag must be downloaded, then executed before the browser can move onto the next <code>&lt;script&gt;</code> (this is what is meant by loading scripts ‘synchronously’). Imagine if you are loading a JavaScript framework followed by a whole bucket full of plugins and then some of your own scripts. The page load time would increase quite significantly.</p>
<p>The way forward from there is using a ‘Script Loader’ which effectively lets you load multiple scripts asynchronously (i.e. in parallel with each other) so no waiting for one script, then moving to the next and waiting, and moving to the next. Unfortunately using a Script Loader doesn’t require your code to be modular in any real sense. So you can still have a mess of scripts all thrown together onto a page. Not to mention a few sketchy hacks are usually required to get these script loaders to load your scripts in the correct order so they don’t break the hell out of your web page.</p>
<p>So moving forward from that slightly better situation we come to ‘AMD Script Loaders’ which also lets you load scripts asynchronously but the scripts you are loading aren’t just a hodge podgy of random scripts pulled from the different corners of the web, they are well structured ‘modules’ that define their own dependancies and can be easily re-used across different projects because of their loose coupling with other scripts. They are also defined within their own scope so they don’t interfere with other scripts that may have been added by another developer before you, and so make it easier not to have a page full of global variables floating around causing havoc.</p>
<h2><a name="how-does-requirejs-and-alternatives-fit-in-"class="anchor" href="#how-does-requirejs-and-alternatives-fit-in-"><span class="header-link"></span></a>How does RequireJS (and alternatives) fit in?</h2>
<p>RequireJS is one of the more well known (and thus ‘popular’) AMD script loaders. It follows the ‘Modules Transport/C’ specification laid out by the CommonJs group (<a href="http://wiki.commonjs.org/wiki/CommonJS"><a href="http://wiki.commonjs.org/wiki/CommonJS">http://wiki.commonjs.org/wiki/CommonJS</a></a>).</p>
<p>The RequireJS website has a lot of information to get you started, but can be a bit confusing for those new to the concept. So we’ll dive into some of our own examples which will make it easier to understand how you can use RequireJS and AMD in general in your projects.</p>
<h2><a name="can-we-use-jquery-"class="anchor" href="#can-we-use-jquery-"><span class="header-link"></span></a>Can we use jQuery?</h2>
<p>Sure! RequireJS actually has a special build of it that includes jQuery, but as jQuery too has seen AMD as the future, it has made itself AMD compatible (well, for those who might have more knowledge about AMD, it’s compatible in the sense that it can be loaded as a ‘named module’). </p>
<p>So for the 1.7 release of jQuery it will be possible to not need the RequireJS specific build that includes jQuery - you’ll be able to just load jQuery as a dependancy when defining your ‘module’.</p>
<h2><a name="basic-example"class="anchor" href="#basic-example"><span class="header-link"></span></a>Basic Example</h2>
<p>“OK, this is sounding groovy, how do I get involved?”</p>
<p>Well, to get you started I have a Github repo set-up which demonstrates the basics of using RequireJS (and trust me it’s basic, but then that’s the idea!)</p>
<p><a href="https://github.com/Integralist/RequireJS-Example/"><a href="https://github.com/Integralist/RequireJS-Example/">https://github.com/Integralist/RequireJS-Example/</a></a></p>
<p>There are comments in the code to help clarify what’s happening, but we’ll go over it here too.</p>
<p>The order of things will be:</p>
<ol>
<li>Insert RequireJS into your web page.</li>
<li>Set-up the main script for the page (this script will load your other scripts (‘modules’) needed in this page).</li>
<li>Define your modules (ideally you’d define your modules first, but it made more sense to write it in this order).</li>
<li>Run a ‘build script’ when you’re ready to deploy your application (this takes your separate modules and combines them into a single script rather than having multiple scripts that need to be downloaded<strong>++</strong>)</li>
</ol>
<p><strong>++</strong>There is a trade-off here. Some people will argue that multiple scripts loaded asynchronously is better than one monolithic script. If you’re code is written to be modular in the first place, then I believe running a build script that combines/minifies each module into a single script is better performing than multiple http requests for all these separate scripts (especially when you consider mobile devices where the connection can quite easily drop out while loading a page and caching resources is a lot more stringent)</p>
<p>So here we go…</p>
<h3><a name="1-insert-requirejs"class="anchor" href="#1-insert-requirejs"><span class="header-link"></span></a>1. Insert RequireJS</h3>
<p>I keep all my files for my application/website in an ‘Assets’ folder.</p>
<p>For this example the structure would be:</p>
<ul>
<li>Assets<ul>
<li>Scripts<ul>
<li>App<ul>
<li>people.js</li>
</ul>
</li>
<li>Model<ul>
<li>Person.js</li>
</ul>
</li>
<li>Utils<ul>
<li>jquery.js</li>
<li>random.js</li>
</ul>
</li>
<li>Require.js</li>
<li>main.js</li>
<li>app.build.js <em>(build script)</em></li>
<li>r.js <em>(optimisation tool)</em></li>
</ul>
</li>
<li>Styles<ul>
<li>layout.css</li>
</ul>
</li>
<li>Images</li>
<li>Includes</li>
</ul>
</li>
</ul>
<p>In my main page I’ll insert the following script tag at the bottom of the page, just above the closing <code>&lt;/body&gt;</code> tag…</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;Assets/Scripts/main&quot;</span> <span class="na">src=</span><span class="s">&quot;Assets/Scripts/Require.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre></div>
</code></pre>
<p>…you’ll notice that we have specified a custom attribute on the script tag that points to our script folder and a file called ‘main’.</p>
<p>This does two things, it loads the Assets/Scripts/main.js file but it also tells RequireJS that all your other scripts are located in the Assets/Scripts folder as well.</p>
<h3><a name="2-set-up-your-main-script"class="anchor" href="#2-set-up-your-main-script"><span class="header-link"></span></a>2. Set-up your ‘main’ script</h3>
<p>Inside main.js we have the following code…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// This allows us to specify jQuery as a dependancy in one of our modules</span>
<span class="c1">// You&#39;ll notice all paths are relative to Assets/Scripts/</span>
<span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
    <span class="nx">paths</span> <span class="o">:</span> <span class="p">{</span>
        <span class="s1">&#39;jquery&#39;</span> <span class="o">:</span> <span class="s1">&#39;Utils/jquery&#39;</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="cm">/*</span>
<span class="cm">    When we&#39;re defining a module we use the define() method.</span>
<span class="cm">    We&#39;ll see this used shortly.</span>
<span class="cm">    But as this is our main &#39;bootstrapping&#39; script we&#39;re using the require() function instead.</span>

<span class="cm">    The require() function is similar to define() in that you pass it an optional array of dependencies, </span>
<span class="cm">    and a function which will be executed when those dependencies are resolved. </span>
<span class="cm">    However this code is not stored as a named module, as its purpose is to be run immediately.</span>
<span class="cm">*/</span>

<span class="nx">require</span><span class="p">([</span><span class="s2">&quot;App/people&quot;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iCanCallThisAnythingILike</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// The argument passed through is the returned value from the function definition we defined inside App/people.js</span>
    <span class="c1">// In this case it was an object literal with two properties: &#39;list&#39; &amp; &#39;scripts&#39;</span>
    <span class="c1">// If we had specified two dependancies then we&#39;d pass through a second argument which again would be the return&#39;ed value from that module</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">iCanCallThisAnythingILike</span><span class="p">.</span><span class="nx">list</span><span class="p">,</span> <span class="nx">iCanCallThisAnythingILike</span><span class="p">.</span><span class="nx">scripts</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>So far we have our main script loading in a single dependancy (Assets/Scripts/App/people.js).</p>
<p>Lets have a look at that dependancy…</p>
<h3><a name="3-define-your-modules"class="anchor" href="#3-define-your-modules"><span class="header-link"></span></a>3. Define your modules</h3>
<p>Here is the content of our ‘Assets/Scripts/App/people.js’ file…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/*</span>
<span class="cm"> * You see we&#39;ve specified the jQuery library as a dependency without specifying its correct path (we&#39;ve just specified the name &#39;jquery&#39;).</span>
<span class="cm"> * This is because jQuery&#39;s AMD support is based on it being defined as a &#39;Named Module&#39;.</span>
<span class="cm"> * So if you look at the script main.js (which is our bootstrapper file) you&#39;ll see we&#39;ve set the require.config() to include the full path to jQuery.</span>
<span class="cm"> */</span>

<span class="nx">define</span><span class="p">([</span><span class="s2">&quot;Models/Person&quot;</span><span class="p">,</span> <span class="s2">&quot;Utils/random&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery&quot;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">Person</span><span class="p">,</span> <span class="nx">randomUtility</span><span class="p">,</span> <span class="nx">$</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// Notice that our dependancy modules(scripts) don&#39;t use the full path /Assets/Scripts/</span>
    <span class="c1">// This is because in our HTML page (where we loaded the RequireJS library) we had specified the main path already as a data- attribute on the script tag.</span>
    <span class="c1">// So RequireJS already knows that when we say &#39;Models/Person&#39; we mean &#39;Assets/Scripts/Models/Person.js&#39;</span>

    <span class="kd">var</span> <span class="nx">people</span> <span class="o">=</span> <span class="p">[],</span>
        <span class="nx">scriptsOnPage</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>

    <span class="nx">people</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;Jim&#39;</span><span class="p">));</span>
    <span class="nx">people</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">randomUtility</span><span class="p">.</span><span class="nx">someValue</span><span class="p">));</span>

    <span class="k">return</span> <span class="p">{</span> 
        <span class="nx">list</span><span class="o">:</span> <span class="nx">people</span><span class="p">,</span> 
        <span class="nx">scripts</span><span class="o">:</span> <span class="nx">scriptsOnPage</span> 
    <span class="p">};</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>Be aware that nothing should be declared outside of a single define() call. </p>
<p>All our modules work in the same way. We have a define() function that specifies some dependancies and then runs a callback when those dependancies have loaded, and then finally your module can return a value, object, function …etc.</p>
<p>In the above example you can see that this module has loaded jQuery as a dependancy (I mention this for those of you who love jQuery and want to make sure you can keep using it if you move to AMD - which is a definite “yes”).</p>
<p>Have a look at the modules defined in ‘Models/Person.js’ and ‘Utils/random.js’ to see that they work the same way.</p>
<h3><a name="4-run-a-build-script"class="anchor" href="#4-run-a-build-script"><span class="header-link"></span></a>4. Run a build script</h3>
<p>RequireJS provides you with an optimisation script which you can run from the command line (I use the Terminal on the Mac, but your mileage may vary on Windows or other OS’) which helps you concatenate your different modules into one script and then minifies it for you and exports this single file into a folder of your choosing so you can link to this new file rather than your original main.js file (like we have at the moment). You could set-up the build script to just export it in the same folder as your main.js file and simply call it main.min.js if you like - up to you.</p>
<p>To run the build script we’re using NodeJs (as recommended by the author of RequireJS), but you can use Java as well if that’s your preference. Have a look at the RequireJS site to find out about that or if you need more information on installing NodeJs (as that is outside the realms of this post).</p>
<p>I’ve placed my build script (and the optimisation script) in the my main scripts folder ‘Assets/Scripts’ as I like to keep everything together (I know some people prefer to have this optimisation script completely separate from their project files, so you can place it wherever you feel comfortable).</p>
<p>My build script looks like this…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/*</span>
<span class="cm"> * http://requirejs.org/docs/optimization.html</span>
<span class="cm"> *</span>
<span class="cm"> * Use NodeJs to execute the r.js optimisation script on this build script</span>
<span class="cm"> * node r.js -o app.build.js</span>
<span class="cm"> *</span>
<span class="cm"> * See: https://github.com/jrburke/r.js/blob/master/build/example.build.js for an example build script</span>
<span class="cm"> *</span>
<span class="cm"> * If you specify just the name (with no includes/excludes) then all modules are combined into the &quot;main&quot; file.</span>
<span class="cm"> * You can include/exclude specific modules though if needed</span>
<span class="cm"> *</span>
<span class="cm"> * You can also set optimize: &quot;none&quot; (or more specific uglifyjs settings) if you need to.</span>
<span class="cm"> */</span>

<span class="p">({</span>
    <span class="nx">appDir</span><span class="o">:</span> <span class="s2">&quot;../../&quot;</span><span class="p">,</span>
    <span class="nx">baseUrl</span><span class="o">:</span> <span class="s2">&quot;Assets/Scripts&quot;</span><span class="p">,</span>
    <span class="nx">dir</span><span class="o">:</span> <span class="s2">&quot;../../project-build&quot;</span><span class="p">,</span>
    <span class="nx">modules</span><span class="o">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;main&quot;</span>
            <span class="cm">/*</span>
<span class="cm">                include: [&quot;App/people&quot;],</span>
<span class="cm">                exclude: [&quot;Utils/random&quot;]</span>
<span class="cm">            */</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">})</span>
</pre></div>
</code></pre>
<p>See the code comments above for the command you need to use to execute the build script using the optimisation tool.</p>
<p>As you can see above we could tell the build script to ‘include’ or ‘exclude’ specific modules. I’ve not needed to use this yet, but as I understand it this ‘excluding’ of modules is useful for debugging purposes (can anyone confirm this)?</p>
<p>The above build script only takes a second and it generates a lovely single script file called main.js and actually places it <em>outside</em> of my website directory into a folder called ‘project-build’ (i don’t like to risk accidentally over-writing my source JavaScript files… if you know what I mean).</p>
<h2><a name="what-now-"class="anchor" href="#what-now-"><span class="header-link"></span></a>What now?</h2>
<p>Well… start using AMD in your projects. </p>
<p>The best way to learn it is to use it. Try out some of the basic structural changes to get yourself used to architecting your apps in a modular fashion, and then just go for it!</p>
<p>I’ve covered RequireJS here, but I’ve heard good things about <a href="http://twitter.com/unscriptable">@unscriptable</a>’s Curl loader (<a href="https://github.com/unscriptable/curl"><a href="https://github.com/unscriptable/curl">https://github.com/unscriptable/curl</a></a>) so I’d recommend checking that out too.</p>
<h2><a name="links-reference-material"class="anchor" href="#links-reference-material"><span class="header-link"></span></a>Links/Reference Material</h2>
<ul>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD"><a href="https://github.com/amdjs/amdjs-api/wiki/AMD">https://github.com/amdjs/amdjs-api/wiki/AMD</a></a></li>
<li><a href="http://unscriptable.com/index.php/2011/03/30/curl-js-yet-another-amd-loader/"><a href="http://unscriptable.com/index.php/2011/03/30/curl-js-yet-another-amd-loader/">http://unscriptable.com/index.php/2011/03/30/curl-js-yet-another-amd-loader/</a></a></li>
<li><a href="http://wiki.commonjs.org/wiki/CommonJS"><a href="http://wiki.commonjs.org/wiki/CommonJS">http://wiki.commonjs.org/wiki/CommonJS</a></a></li>
</ul>
]]></description><link>http://www.integralist.co.uk/posts/beginners-guide-to-amd-and-requirejs/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/beginners-guide-to-amd-and-requirejs/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Wed, 04 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[How to use Git and GitHub]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 26mins</em></p>
<ul>
<li>Introduction</li>
<li>What is Git/GitHub?</li>
<li>Using the GitHub interface</li>
<li>Installing Git</li>
<li>Setting up a new Git repository</li>
<li>Adding files for Git to track</li>
<li>Commiting files to Git</li>
<li>Setting up a GitHub account</li>
<li>Generating an SSH Public Key</li>
<li>Creating a new GitHub repository</li>
<li>Pushing your project up to GitHub’s repository</li>
<li>Removing/Editing files</li>
<li>Git Tips</li>
<li>Tell Git to ignore certain files and formats</li>
<li>Best practices for Commit Messages</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>If you’re having trouble understanding how to get up and running with GitHub, or you just wanted to find a free version-control system and heard about this thing called ‘Git’ then hopefully the following information should help…</p>
<h2><a name="what-is-git-github-"class="anchor" href="#what-is-git-github-"><span class="header-link"></span></a>What is Git/GitHub?</h2>
<p>When I first heard about GitHub I was unsure as to its purpose and why it was such a hit with other developers. I had never heard of ‘Git’ before and whenever people spoke of GitHub they would mention Git at the same time, and so because they both had ‘Git’ in their name I just assumed they were one and the same thing - which as it turns out was quite wrong indeed.</p>
<p>To clarify, ‘Git’ is a program. Once installed on your computer it can be accessed via the Command Line. You could very well have yourself a nice little ‘version control’ set-up on your computer using just Git and without ever needing to look at, or even having heard of, ‘GitHub’.</p>
<p>GitHub on the other hand is a website that hosts Git ‘files’ (known as ‘repositories’) and so it makes it a lot easier for open-source projects to have other developers help extend the project by allowing these developers to grab(<code>fork</code>) the project code (even though they didn’t create the project on GitHub) and to duplicate the project set-up and to modify it however the developer wishes and then allow the developer to submit changes, bug fixes, new features etc back to the original developers to integrate if they were so inclined.</p>
<p>It’s an incredibly powerful tool.</p>
<p>So with this in mind it’s best to learn about Git first, so then using GitHub will suddenly make a whole lot more sense! And this is why I think I struggled with GitHub initially: because I had no idea about what Git was and how it worked.</p>
<p>But before we get started…</p>
<h2><a name="using-the-github-interface"class="anchor" href="#using-the-github-interface"><span class="header-link"></span></a>Using the GitHub interface</h2>
<p>Now I know I said we would start with learning Git first, THEN GitHub. But it is worth noting at this stage (mainly by <a href="http://twitter.com/paul_irish">@paul_irish</a>’s request) that you can in fact update files directly via the GitHub website!</p>
<p>So if you want to avoid the command line altogether but you still want to help work with open-source projects on GitHub and in the simplest/easiest way possible, then read this section only and stop there (as the rest of the sections of this post will likely be of no interest to you).</p>
<p>If on the other hand using the GitHub interface doesn’t interest you at all and you really want to learn about what Git is and how to use it (and thus be able to use GitHub more effectively) then just skip this section and move onto “Installing Git”. So first thing you guys want to do is to sign-up for a GitHub account here:</p>
<p><a href="https://github.com/signup/free"><a href="https://github.com/signup/free">https://github.com/signup/free</a></a> (to get to this page you need to go through the ‘Pricing and Signup’ link at the top of the GitHub home page, and from there you’ll be able to find the ‘free’ account set-up).</p>
<p>Once you’ve got your free account created you can start using GitHub for the more ‘basic’ Git features, such as ‘forking’ (i.e. taking a copy of…) an open-source project and making changes to it. We’ll create a new <code>fork</code> of the ‘jQuery JavaScript Library’ and start making some changes to the code base, and then submitting ‘commits’ to our own copy of the jQuery library project (i.e. saving our project’s current state). Then when happy with our changes we’ll submit a <code>pull</code> request to the jQuery owners! (and basically, by ‘pull’ we’re really saying “please jQuery, accept the changes we’ve made to your code base - we’d love for you to integrate them into the jQuery source”). So let’s take a look at the jQuery JavaScript Library page here:</p>
<p><a href="https://github.com/jquery/jquery"><a href="https://github.com/jquery/jquery">https://github.com/jquery/jquery</a></a>. On this page you should see a ‘fork’ link near the top right of the page. Click on it. You’ll notice that GitHub will start making a copy of the jQuery JavaScript Library project and will generate a new project within your account under the same name. </p>
<p>Now, you’ll see a list of all the files within this project and you can click on any folder/file to see its content. So let’s take a look at the README.md file by clicking on it’s name. You’ll see that GitHub does a nice little AJAX sliding animation and then shows you the README.md file… wonderful.</p>
<p>The next step is to click the ‘Edit this file’ link, which you’ll see on the right-hand side of the page. The file you were looking at has now moved into ‘edit’ mode and so you can start typing out some changes to the file (obviously if you’re a developer then you can open up the core JavaScript files and start making tweaks there in the same way).</p>
<p>After you’ve made the changes you wanted to the file, simply move to the input field below the file, just where it says “Commit message” and enter a description of the change you made (note: if the changes you are making are for your own personal use then just write whatever you like, but if you are actually planning on submitting your changes to jQuery to integrate into the source then you’ll need to find out what jQuery requires you to include within the ‘commit’ message - for example the jQuery UI project has written up some submission guidelines here: <a href="http://wiki.jqueryui.com/w/page/25941597/Commit-Message-Style-Guide"><a href="http://wiki.jqueryui.com/w/page/25941597/Commit-Message-Style-Guide">http://wiki.jqueryui.com/w/page/25941597/Commit-Message-Style-Guide</a></a> and so I assume there are similar guidelines for the main jQuery project).</p>
<p>Once your commit message has been entered then you can click the “Commit Changes” button at the bottom of the page. Now when the page reloads you’ll see the latest note/commit for this file is actually yours and shows your commit message. But this is still only changes to <em>your</em> copy of the jQuery library.</p>
<p>You need to now tell jQuery about your very important change and get them to integrate it into their source version. To do this you now need to click the “Pull Request” link at the top of the page (near where you clicked on the “Fork” link from earlier. Clicking the “Pull Request” link will redirect you to a page where you must enter a message to go along with your commit (this will be reviewed by core committers!). Final step! Click “Send pull request” at the bottom of that page (just under where you entered your message).</p>
<p>From here you can sit back and relax, I think? Again I’ve read somewhere previously (for jQuery UI) that you need to add a link to your commit to the ticket in their tracker system (jQuery may very well have something similar I’m not sure though). But enough of this GUI nonsense, lets start using Git how it was meant to be used… on the command line!</p>
<h2><a name="installing-git"class="anchor" href="#installing-git"><span class="header-link"></span></a>Installing Git</h2>
<p>OK, first thing first, lets get Git installed (by the way I work on a Mac so hopefully this guide is still somewhat useful to PC users). I personally found the easiest way to install git is via a pre-compiled installer: <a href="http://code.google.com/p/git-osx-installer/"><a href="http://code.google.com/p/git-osx-installer/">http://code.google.com/p/git-osx-installer/</a></a>.</p>
<p>There are installers for PC as well as Mac and Linux so take your pick and you can install from the original Git source code but that’s a bit more ‘involved’. The official GitHub website mentions many ways to install Git, but I found the pre-compiled installer the quickest/easiest way - I pretty much ran the installer and it was done in about two seconds flat.</p>
<p>When Git is installed the first thing we’ll probably want to do is to tell it what our name and email is (this way, when working with a system - such as GitHub - and having multiple users working on your code base you can easily see which users made changes to the code - and tell them off if they added/removed code that broke your application).</p>
<p>To inform Git what your username and email address is, open the Terminal application on your Mac and enter:</p>
<pre><code class="lang-sh"><div class="highlight"><pre>git config --global user.name <span class="s2">&quot;Joe Bloggs&quot;</span>
git config --global user.email <span class="s2">&quot;joe@bloggs.com&quot;</span>
</pre></div>
</code></pre>
<p>You can check these settings at any time within the Terminal by typing:</p>
<pre><code class="lang-sh"><div class="highlight"><pre>git config user.name
git config user.email
</pre></div>
</code></pre>
<p>Next you want to make sure that Git ignores any ‘white space’ changes. Now this needs a little bit extra explanation: Git tracks file <em>content</em> and NOT individual files. So if you add an empty new line to a file (and Git is tracking that file) then Git will inform you that the file has been modified but you don’t really want a single empty line to be flagged up to you (not in web development really as white space is not that important). To have Git ignore whitespace changes you can enter the following into the Terminal:</p>
<p><code>git config --global apply.whitespace nowarn</code></p>
<p>Now that we’ve got Git set-up we need to look at how we can tell it to ‘track’ certain files &amp; folders in your project.</p>
<h2><a name="setting-up-a-new-git-repository"class="anchor" href="#setting-up-a-new-git-repository"><span class="header-link"></span></a>Setting up a new Git repository</h2>
<p>Now, using Git does require a tiny bit of command line knowledge (such as navigating your computer via command line, making new directories and files, removing files etc). I’ll try and cover as much of this as I think is needed to use Git (you may need more commands than I cover but then I’ll leave that up to you to look into further). OK, so with the Terminal still open, navigate to your project folder (we do this by using the <code>cd</code> command - which stands for ‘change directory’)…</p>
<p><code>cd ~/Dropbox/Project/</code></p>
<p>…as you can see I have a folder called ‘Project’ within a private <a href="http://www.dropbox.com/">Dropbox</a> folder. The tilda character <code>~</code> simply tells Terminal to go back to your home directory and start looking from there for the folder you need. You can also navigate your Mac using <code>../</code> to go up and down folders. If you want to check the contents of a particular folder then simply type <code>ls</code> which tells Terminal to ‘list’ the content of the current folder.</p>
<p>Once you’re inside the project folder you’ll need to create an empty Git ‘repository’, which means Git will create a hidden folder called <code>.git</code> where it will store all files and references it needs to be an effective version-control system for this project folder. To create a new Git repository type the following (make sure you’re definitely in your main project folder):</p>
<p><code>git init</code></p>
<p>If you’re Mac is set-up to not show ‘hidden’ folders then it wont look like much has happened (although you will now see a message in the Terminal telling you a new empty repository was created). If you really want to see hidden files and folders on your Mac then type the following into the Terminal…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>defaults write com.apple.Finder AppleShowAllFiles YES
killall Finder
</pre></div>
</code></pre>
<p>…the first line tells Finder to allow showing of hidden files, and the second line restarts Finder so you can see the changes take effect. Once you have a new Git repository set-up you need to tell Git what files/folders to start ‘tracking’.</p>
<h2><a name="adding-files-for-git-to-track"class="anchor" href="#adding-files-for-git-to-track"><span class="header-link"></span></a>Adding files for Git to track</h2>
<p>If you don’t already have any files in your project folder then we can at least add one file (via the Terminal as well) which will become useful later when you start to use GitHub as a code sharing platform. To create a file via the Terminal we must use the <code>touch</code> command like so…</p>
<p><code>touch README.md</code></p>
<p>…the above line creates a ‘README.md’ file (which is used by GitHub to give a project you create a visible description). Now as it happens I already had a few files in my project folder so along with the README.md file I just created I’m going to start adding these files to Git’s “Staging Area”.</p>
<p>The Staging Area is a place to add your files/folders before ‘commiting’ the changes you’ve made to these files and then (if you need to…) pushing the changed files onto a remote server (such as we’ll be doing later when we push our files up to our GitHub repository). To add a file/folder to the Staging Area (and thus have Git start ‘tracking’ the files and their changes) enter…</p>
<p><code>git add README.md</code></p>
<p>…this tells Git to start tracking the README.md file, but we could have specified multiple files at once using a space to separate the file names such as…</p>
<p><code>git add file1 file2 file3</code></p>
<p>…we could also tell Git to track ALL files/folders currently found within this folder…</p>
<p><code>git add *</code></p>
<p>…and lastly if you’re coming back to an existing project you can tell Git to track any new ‘un-tracked’ files using the line…</p>
<p><code>git add .</code></p>
<p>…the period character (.) simply means ‘any un-tracked files’ and saves you having to remember which new files are or aren’t being tracked already. The <code>add</code> command makes it easy to add as many files as you like to Git’s “Staging Area”.</p>
<p>You can add some files, go away and make a cup of tea, work on something else and then come back and add some more files to the Staging Area. But for any of these files to be ‘committed’ and thus have a ‘snap shot’ of the project (so we can - if we need to - revert back to an older version) we need to use the <code>commit</code> command to tell Git we want it to snap shot our project in its current state…</p>
<h2><a name="commiting-files-to-git"class="anchor" href="#commiting-files-to-git"><span class="header-link"></span></a>Commiting files to Git</h2>
<p><code>git commit -m &#39;Add a README file to help explain the project&#39;</code></p>
<p>…the above command uses the <code>-m</code> ‘flag’ which means you’re about to add a comment to go along with this ‘commit’. You don’t have to use the <code>-m</code> flag, but if you don’t then Terminal will try and open the default text editor so you can enter your commit description and I find it quicker and easier just to use the <code>-m</code> command.</p>
<p>Now that we’ve been acquainted with Git, and created a new Git repository, added some files and committed them to Git we can start looking at using a remote server for collaborating on our project. To do this we’re going to use <a href="https://github.com/"><a href="https://github.com/">https://github.com/</a></a> the ‘Social Coding’ website.</p>
<h2><a name="setting-up-a-github-account"class="anchor" href="#setting-up-a-github-account"><span class="header-link"></span></a>Setting up a GitHub account</h2>
<p>Note: if you need extra help (beyond what I’ve shared) then you can refer to the official GitHub help pages here: <a href="http://learn.github.com/p/setup.html"><a href="http://learn.github.com/p/setup.html">http://learn.github.com/p/setup.html</a></a> So the first thing to do is to register for an account (you have to go through the ‘Pricing and Signup’ page to find the ‘free’ account set-up): <a href="https://github.com/signup/free"><a href="https://github.com/signup/free">https://github.com/signup/free</a></a> (as you’ll see on that page, there are paid for options available so your team of developers can collaborate with a version-controlled project using GitHub’s servers, rather than having to work out how to set-up their own ‘remote’ server to push code changes to).</p>
<p>Once you’ve signed up, I recommend the first thing you do is to create a SSH Public Key (you’re going to need it to be able to securely access remote files - and by ‘remote’ I mean access your project files on the GitHub server). GitHub have a useful page for explaining how to set-up the SSH Public Key: <a href="http://help.github.com/mac-key-setup/"><a href="http://help.github.com/mac-key-setup/">http://help.github.com/mac-key-setup/</a></a>.</p>
<p>Most of you will find that you can skip the first part of the page and head straight down to the section titled ‘Generating a key’ (I mention how to set-up your SSH Public Key below, but do have a read over the provided link as it should help clarify what to do).</p>
<h2><a name="generating-an-ssh-public-key"class="anchor" href="#generating-an-ssh-public-key"><span class="header-link"></span></a>Generating an SSH Public Key</h2>
<p>Basically, in the Terminal you type…</p>
<p><code>ssh-keygen -t rsa -C &quot;joe@bloggs.com&quot;</code></p>
<p>…obviously change the email address from <code>joe@bloggs.com</code> to whatever email address you used to sign-up to GitHub with. Terminal will then tell you…</p>
<pre><code class="lang-sh"><div class="highlight"><pre>Generating public/private rsa key pair.
Enter file in which to save the key <span class="o">(</span>/Users/tekkub/.ssh/id_rsa<span class="o">)</span>:
</pre></div>
</code></pre>
<p>…but your message will be slightly different in that the directory path in the brackets (e.g. <code>(/Users/tekkub/.ssh/id_rsa)</code>) will likely be different on your computer.</p>
<p>The next thing to do is to simply press <code>ENTER</code> and Terminal will generate a new SSH Public Key within the hidden ‘id_rsa’ file it mentions (if you didn’t hit <code>ENTER</code> then the Terminal would expect you to enter the name of a file to save the SSH Public Key into - so I didn’t bother messing around doing that and just saved the key into the file the Terminal suggested I use). Next Terminal will ask you to enter a pass phrase…</p>
<p><code>Enter passphrase (empty for no passphrase):</code></p>
<p>…I advise you enter a good password which you wont forget and just press <code>ENTER</code> again (Terminal will ask you to enter the same pass phrase again, so it’s sure you know what you typed).</p>
<p>Now Terminal will have generated your SSH Public Key, and you’ll need to provide this public key to GitHub so it knows it’s you connecting to its server and trying to change your project files. If you’ve never seen an SSH Public Key before then you may be mistaken that the gobble-dee-gook that the Terminal spit out at you after your last command was the SSH Public Key. Wrong!</p>
<p>You can’t see the key, but you can copy it to your clipboard (for pasting into the GitHub website). So now open your web browser and head back to your GitHub account page and look for the link in your account page for entering an SSH Public Key (direct link: <a href="https://github.com/account#ssh_bucket"><a href="https://github.com/account#ssh_bucket">https://github.com/account#ssh_bucket</a></a>).</p>
<p>Now go back to the Terminal and enter the following command to copy your SSH Public Key to your clipboard…</p>
<p><code>cat ~/.ssh/id_rsa.pub | pbcopy</code></p>
<p>…once copied into your clipboard, go back to the relevant GitHub SSH page and paste your key in and save the changes to your account settings. This now leaves just one last thing for you to do while logged into the GitHub website and that is to create a new ‘repository’.</p>
<h2><a name="creating-a-new-github-repository"class="anchor" href="#creating-a-new-github-repository"><span class="header-link"></span></a>Creating a new GitHub repository</h2>
<p>To create a new repository you’ll need to go to this page <a href="https://github.com/repositories/new"><a href="https://github.com/repositories/new">https://github.com/repositories/new</a></a> (you’ll find links all over the place for creating a new repository, but it’s easier if I just link to it for you).</p>
<p>Now enter the information GitHub asks for (I created a repository called ‘Project Template’ and it generated the following URL: <a href="https://github.com/Integralist/Project-Template">https://github.com/Integralist/Project-Template</a>).</p>
<p>Once you’ve created a new repository on GitHub, it will show you some Terminal commands you can run for setting up Git locally and pushing the project file to GitHub’s online repository.</p>
<h2><a name="pushing-your-project-up-to-github-s-repository"class="anchor" href="#pushing-your-project-up-to-github-s-repository"><span class="header-link"></span></a>Pushing your project up to GitHub’s repository</h2>
<p>In the Terminal, lets make sure we’re still in our project directory…</p>
<p><code>cd ~/Dropbox/Project/</code></p>
<p>…once we’re back in our project folder we can now set-up our remote server access…</p>
<p><code>git remote add origin git@github.com:Integralist/Project-Template.git</code></p>
<p>…OK, so what’s happening here? Well, we’re telling Git that we want to add a remote server and store it under the easy to remember name of ‘origin’. We could of called ‘origin’ anything we liked… E.g. ‘MyRemoteServer’</p>
<p><code>git remote add MyRemoteServer git@github.com:Integralist/Project-Template.git</code></p>
<p>…the line that follows the name we gave is the URL for the GitHub repository we created (and you’ll see this URL on your project page when you first set-up a new repository). Now that we have created an <code>origin</code> to hold our remote server information we can now ‘push’ our project online to GitHub…</p>
<p><code>git push origin master</code></p>
<p>…the above line uses the <code>push</code> command to tell your local Git to push your latest ‘commit’ to the specified remote server.</p>
<p>Now the word <code>master</code> which you can see at the end of the command simply refers to the default ‘branch’ that is set-up (I don’t go into the details of it here, but Git allows you to <code>branch</code> off your code.</p>
<p>So for example, if we decided we wanted to add some new features to our project, which could end up breaking things if not properly tested, we could create another branch called ‘new_feature’ which would be a complete copy of the current project for us to work from - and that way we leave the original ‘master’ branch untouched so we can continue to work on maintaining that copy of the project and allowing us to fix any bugs found in it while developing the new feature, then when the new feature is ready and tested we can then <code>merge</code> the new feature back into our ‘master’ branch - but these are all commands left for another time).</p>
<p>Now, back to the <code>push</code> command: As it is our first push, the Terminal will not be able to authenticate the host ‘github.com’ so we’ll just type ‘yes’ to confirm we trust it. For me, the push failed the first time I tried - this I found out straight away afterwards was because I needed to enter my pass phrase.</p>
<p>After it failed the first time I typed the <code>git push origin master</code> command again and this time the Terminal displayed a dialog window asking me to enter my passphrase for accessing my SSH Public Key. I entered my passphrase and then the push started to proceed successfully.</p>
<p>Now we can start pushing files any time we like to this particular project. I had a file called ‘robots.txt’ in my project.</p>
<p>Lets say I made an update to the file ‘robots.txt’ - I can push that on it’s own:</p>
<pre><code class="lang-sh"><div class="highlight"><pre>git add robots.txt
git commit -m <span class="s1">&#39;Add some new robot configurations&#39;</span>
git push origin master
</pre></div>
</code></pre>
<h2><a name="removing-editing-files"class="anchor" href="#removing-editing-files"><span class="header-link"></span></a>Removing/Editing files</h2>
<p>To remove a file (e.g. lets remove the ‘robots.txt’ file) simply type…</p>
<p><code>git rm robots.txt</code></p>
<p>…then do the normal commit with message and push.</p>
<pre><code class="lang-sh"><div class="highlight"><pre>git commit -m <span class="s1">&#39;Remove the robots.txt file&#39;</span>
git push origin master
</pre></div>
</code></pre>
<p>To edit existing files is the same process as adding files. But beware, as you’ll get an error if the file hasn’t actually been changed!</p>
<p>Remember, Git tracks file <em>content</em>, NOT individual files. So it wont like you wasting its time by uploading files that haven’t changed at all.</p>
<h2><a name="git-tips"class="anchor" href="#git-tips"><span class="header-link"></span></a>Git Tips</h2>
<p>Any time you need to check the status of a <code>.git</code> repository:</p>
<p><code>git status</code></p>
<p>Show all Git commands:</p>
<p><code>git</code></p>
<p>Show where Git was installed:</p>
<p><code>which git</code></p>
<p>Show all recent activity:</p>
<p><code>git log</code></p>
<p>Show all activity (all branches):</p>
<p><code>git log --all</code></p>
<p>Show all activity (all branches) in a tree view (slightly more readable):</p>
<p><code>git log --graph --all</code></p>
<p>Show all activity (all branches) in a tree view (slightly more readable) BUT only shows the bare minimum details (i.e. the first seven characters of the hash and the commit message):</p>
<p><code>git log --graph --all --online</code></p>
<p>Shows all branches for this repository: NOTE: the Terminal will display all branches available with an asterisk (*) before the branch name that is currently activated…</p>
<p><code>git branch</code></p>
<p>Create a new branch called “my_new_branch” which is a complete copy of ‘master’ for you to mess around with:</p>
<p><code>git branch my_new_branch</code></p>
<p>Switch to a different branch:</p>
<p><code>git checkout my_new_branch</code></p>
<p>*IMPORTANT! When you switch between branches, the .git file (that contains all information about your repository) will show you a different set of files in Finder! So if you switch to the new branch you just created <code>my_new_branch</code> and then added a new file to your project’s directory (e.g. mynewfile.php), then this new file will be visible in Finder while you are still viewing the <code>my_new_branch</code> branch. The moment you switch back to the <code>master</code> branch the ‘mynewfile.php’ file will disappear from view.</p>
<p>Whatever changes were made on one branch will not be visible at all from the other branches. Since Git tracks contents, this works for files and whole directories down to lines and characters.*</p>
<p>The following command means you don’t need to use ‘git add’ you can just commit all tracked files</p>
<p><code>git -a commit</code></p>
<p>Git has a GUI tool for visualisation of commits/changes:</p>
<p><code>gitk</code></p>
<p>By default it shows only the branch you are currently viewing - if you want it to show both branches at once the use <code>gitk --all</code>.</p>
<p>If I wanted to merge a new branch ‘name_of_branch’ with my master branch then I would call:</p>
<p><code>git merge name_of_branch</code></p>
<p><em>NOTE: It’s important to switch view back to the main branch you wish to merge other code with.</em></p>
<p>Show all commits to this file (and who made them):</p>
<p><code>git blame file_name</code></p>
<p>To ‘tag’ a particular commit in your projects history - this could be a version number for a script update…</p>
<p><code>git tag tag_name (e.g. git tag v0.5.6)</code></p>
<p><em>NOTE: tags must have no spaces (e.g. my_first_tag):</em></p>
<p>An annotated tag:</p>
<p><code>git tag -a tag_name</code></p>
<p>An annotated tag with a comment:</p>
<p><code>git tag -a tag_name -m &quot;my first release candidate&quot;</code></p>
<p>To push your tags you need to do the following - because git push alone wont do it (thanks to <a href="http://twitter.com/mathias">@mathias</a> for this information):</p>
<p><code>git push --tags</code></p>
<p>Show all tags in this project:</p>
<p><code>git tag</code></p>
<p>Show the last commit:</p>
<p><code>git show</code></p>
<p>Show the last commit that had this tag assigned after it (acts like a bookmark):</p>
<p><code>git show tag_name</code></p>
<p>The following command only works after looking at a tag:</p>
<p><code>git describe</code></p>
<p>*Note: it shows the name of the tag followed by how many commits have happened since its inception (as well as the first seven characters from the hash that references the commit, and the -g is not part of the hash; it’s a suffix that stands for “Git” - according to the Git documentation it “useful in an environment where people may use different SCMs”).</p>
<p>e.g. my_first_tag-1-gd8a7d27*</p>
<h2><a name="tell-git-to-ignore-certain-files-and-formats"class="anchor" href="#tell-git-to-ignore-certain-files-and-formats"><span class="header-link"></span></a>Tell Git to ignore certain files and formats</h2>
<p><code>.gitignore</code> is a file that you can create to hold rules about what items Git should ignore.</p>
<p>A good example of using .gitignore is if you wanted a config script - e.g. Settings.php - that held your database username/password ignored so it wasn’t accidentally pushed to a public repository (such as GitHub):</p>
<p>You can use a <code>#</code> as a comment line and then specify the types of files or specific files to be ignored, such as:</p>
<pre><code class="lang-ini"><div class="highlight"><pre><span class="c1">#Mac OS X files</span>
<span class="err">.DS_Store</span>

<span class="c1"># VIM leave-behinds</span>
<span class="err">*.swp</span>
</pre></div>
</code></pre>
<p>You can also ignore all files of a certain type except one by using the bang (!) such as:</p>
<pre><code class="lang-ini"><div class="highlight"><pre><span class="err">*.log</span>
<span class="err">!errors.log</span>
</pre></div>
</code></pre>
<h2><a name="best-practices-for-commit-messages"class="anchor" href="#best-practices-for-commit-messages"><span class="header-link"></span></a>Best practices for Commit Messages</h2>
<p>As requested by <a href="http://twitter.com/mathias">@Mathias</a> (on quite a few occasions…) there are a few best practices to consider when writing your commit messages.</p>
<p>One of the most obvious and useful is to split your commit message into a ‘summary’ and ‘body’ (this is done by including a blank line in-between the first and second lines of your commit message).</p>
<p>The ‘summary’ should (ideally) be no more than 50 characters. This is so that when other users are viewing your commit messages (via different means) then they can always understand what the commit is about, and then if they wish to read the full commit message (i.e. the ‘body’ part - which should include further information on the specifics of the commit) then they can do.</p>
<p>And there are quite a few places where the ‘summary’ part of your commit message would come in really helpful to other users…</p>
<p>The following bullet points are credited to <a href="http://tbaggery.com/">tbaggery.com</a>:</p>
<ul>
<li><code>git log --pretty=oneline</code> - shows a terse history mapping containing the commit id and the summary</li>
<li><code>git rebase --interactive</code> - provides the summary for each commit in the editor it invokes</li>
<li>if the config option <code>merge.summary</code> is set, the summaries from all merged commits will make their way into the merge commit message</li>
<li><code>git shortlog</code> uses summary lines in the changelog-like output it produces</li>
<li><code>git format-patch</code> git send-email, and related tools use it as the subject for emails</li>
<li>reflogs, a local history accessible with git reflog intended to help you recover from stupid mistakes, get a copy of the summary</li>
<li><code>gitk</code> has a column for the summary</li>
<li>GitHub uses the summary in various places in their user interface</li>
</ul>
<p>When writing your commit message it’s probably a good idea to write in the ‘present tense’ (e.g. ‘fix’ rather than ‘fixed’) - this is to help keep consistency between other git commands such as <code>git merge</code> | <code>git revert</code>.</p>
<p>Also, when writing the ‘body’ part of your commit message, make sure to keep the character length to 72 per line. Feel free to read up on the details of why at <a href="http://tbaggery.com/">tbaggery.com</a>, but the principle is basically that using certain git commands on certain set-ups could cause the text to overflow off the edge of the screen. The previous link also includes some tips on how to achieve this via Vim or TextMate.</p>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>And that’s about it for the “Git Basics”. There is so much more that you can learn and I can’t recommend the book “Getting Good with Git” enough! Go check that out here: <a href="http://rockablepress.com/books/getting-good-with-git/"><a href="http://rockablepress.com/books/getting-good-with-git/">http://rockablepress.com/books/getting-good-with-git/</a></a>.</p>
]]></description><link>http://www.integralist.co.uk/posts/how-to-use-git-and-github/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/how-to-use-git-and-github/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Tue, 03 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Beginners guide on how to test your code]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 11mins</em></p>
<ul>
<li>Introduction</li>
<li>Start how you mean to go on</li>
<li>The ‘write test first’ process</li>
<li>Other aspects of TDD/BDD</li>
<li>What do these test &#39;types&#39; mean?</li>
<li>Using Jasmine</li>
<li>An example</li>
<li>Review of example</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>Any programmer worth a damn will tell you that you need to test your code.</p>
<p>There are different types of tests that inspect the different areas of your application:</p>
<ul>
<li>Unit Tests</li>
<li>Integration Tests</li>
<li>Acceptance Tests</li>
<li>Regression Tests</li>
</ul>
<p>Although there are multiple areas of an application that need to be tested, the principle for each is that you write a test for a piece of your applications code and see if it passes.</p>
<p>Within a test you write a number of ‘assertions’ (which means you’re expecting certain values to be returned at that point in a certain format or type) and if the code fails to produce the relevant value the assertion will fail and thus the test itself will fail.</p>
<p>There are different methodologies for testing your code, the two most famous are Test-Driven Development (TDD) and Behaviour-Driven Development (BDD). Both are very similar and differ in &#39;direction&#39; more than anything.</p>
<p>Fundamentally TDD is about the developer and their perspective on testing a piece of code, where BDD is more about using language that management and stake holders can understand (so your tests are still written in code but uses more &#39;domain specific language&#39; - e.g. instead of <code>assertEqual(x, y)</code> you would write <code>expect(x).toEqual(y)</code>).</p>
<h2><a name="start-how-you-mean-to-go-on"class="anchor" href="#start-how-you-mean-to-go-on"><span class="header-link"></span></a>Start how you mean to go on</h2>
<p>Something else you normally hear from the TDD crowd is that you <em>should</em> write your tests first! That’s probably going to sound a bit alien to you because how can you write tests for code that doesn’t yet exist? Why would anyone do that?</p>
<p>Well, the reasoning behind it is quite logical when you think about it. Normally you’ll just start writing some code with no idea of how it should work, you just start hacking away and as you progress you go back and refactor sections and make it cleaner/more efficient and hopefully at the end you don’t need to change your code in any meaningful way to appease your users who may be using your code (e.g. if you’re building the next big JavaScript framework then your API is what your users will be relying on and if you discover there is a bug in your code and it means you have to go back and change the API because of it then that causes big concerns for your users).</p>
<p>So the idea of writing tests first is that you’re thinking about your API from the beginning. You’ll think about what the perfect API is for your code to produce and you’ll ensure you write code that fits that API (you won’t realise halfway through coding “ah crap, this doesn’t work as well as I had hoped it would, I’m going to have to change this”).</p>
<p>Although we’re not worrying about “writing tests first” in this article, I mention it so you are at least aware of the process.</p>
<h2><a name="the-write-test-first-process"class="anchor" href="#the-write-test-first-process"><span class="header-link"></span></a>The ‘write test first’ process</h2>
<p>For those interested it goes a little like this:</p>
<ul>
<li>Write a unit-test</li>
<li>Run the test (it will obviously fail because there is no code for it to run against!)</li>
<li>Write the smallest amount of code for the unit-test to pass (we’re talking quick and dirty code here)</li>
<li>Run the test again and watch it pass</li>
<li>Once the test passes, go back and refactor your code so it’s how it should be (i.e. clean/efficient)</li>
<li>Run the test again and watch it pass</li>
</ul>
<h2><a name="other-aspects-of-tdd-bdd"class="anchor" href="#other-aspects-of-tdd-bdd"><span class="header-link"></span></a>Other aspects of TDD/BDD</h2>
<p>Here are a few other aspects of testing worth mentioning before we get stuck into some examples: methods such as ‘setUp’ and ‘tearDown’ (which run before and after each test) are useful (for example…) because it means you can prepare each test to run from a fresh set-up.  This probably doesn’t make a lot of sense at the moment so I’ll demonstrate this later in our example code below, but trust me, when you’re testing your code it’s useful before each test (or after each test) to reset your environment.</p>
<p>There are also more complicated aspects such as mocks, stubs and spies which are useful when you start getting deep into testing application code where ‘state’ becomes relevant (e.g. using some of these features makes testing code in the deepest parts of your application a lot easier).</p>
<p>So with all this in mind, I would highly recommend you go and read a book titled ‘Test-Driven JavaScript Development’ by Christian Johansen (<a href="http://twitter.com/cjno">@cjno</a>) which covers all these topics in great detail.</p>
<h2><a name="what-do-these-test-types-mean-"class="anchor" href="#what-do-these-test-types-mean-"><span class="header-link"></span></a>What do these test &#39;types&#39; mean?</h2>
<h3><a name="unit-tests"class="anchor" href="#unit-tests"><span class="header-link"></span></a>Unit Tests</h3>
<p>These are very atomic (i.e. small) tests that test a specific chunk of code.</p>
<h3><a name="integration-tests"class="anchor" href="#integration-tests"><span class="header-link"></span></a>Integration Tests</h3>
<p>These are tests that ensure all the separate parts of your application code work when interacting with each other.</p>
<h3><a name="acceptance-tests"class="anchor" href="#acceptance-tests"><span class="header-link"></span></a>Acceptance Tests</h3>
<p>These are tests that prove to management or your stake holders that the application is providing all the functionality they require (typically acceptance tests are written using BDD which uses domain specific language that makes it easy for management to write tests for the developer to implement).</p>
<h3><a name="regression-tests"class="anchor" href="#regression-tests"><span class="header-link"></span></a>Regression Tests</h3>
<p>This is the process of running your unit tests again after fixing any integration tests to make sure your fixes haven&#39;t caused your unit tests to break.</p>
<h2><a name="using-jasmine"class="anchor" href="#using-jasmine"><span class="header-link"></span></a>Using Jasmine</h2>
<p>For the purpose of this article we&#39;re going to focus on unit testing but we&#39;re going to use a BDD library called Jasmine to help run our tests. You can download it from here: <a href="http://pivotal.github.com/jasmine/"><a href="http://pivotal.github.com/jasmine/">http://pivotal.github.com/jasmine/</a></a></p>
<p>The set-up is as follows:</p>
<ul>
<li>Create an HTML page</li>
<li>In this page insert the provided css file ‘jasmine.css’ + the two provided js files ‘jasmine.js’, ‘jasmine-html.js’</li>
<li>Then include your own JavaScript code ‘my-cool-library.js’</li>
<li>Then include your own ‘my-tests.js’</li>
<li>After that have an inline script which executes the Jasmine test runner…<pre><code class="lang-html"><div class="highlight"><pre>jasmine.getEnv().addReporter(new jasmine.TrivialReporter());
jasmine.getEnv().execute();
</pre></div>
</code></pre>
</li>
</ul>
<p>Within your own ‘my-tests.js’ file is where you’ll write your unit-tests.</p>
<p>Different unit-testing libraries have different API’s. Jasmine’s API is as follows…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;test suite name&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="c1">// assertions for your code to try and pass</span>
    <span class="c1">// if any assertions fail then this entire suite fails</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h2><a name="an-example"class="anchor" href="#an-example"><span class="header-link"></span></a>An example</h2>
<p>So now imagine your ‘my-cool-library.js’ consisted of an object whose API let the user add/remove or check for CSS classes on an element. Lets say the API was as follows…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">header</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;my-header&#39;</span><span class="p">);</span>
<span class="nx">css</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="s1">&#39;newclass&#39;</span><span class="p">)</span> <span class="c1">// --&gt; adds the class &#39;newclass&#39; to the specified element &#39;header&#39;</span>
<span class="nx">css</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="s1">&#39;newclass&#39;</span><span class="p">)</span> <span class="c1">// --&gt; returns a boolean value (true/false) depending on whether the class &#39;newclass&#39; is found</span>
<span class="nx">css</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="s1">&#39;newclass&#39;</span><span class="p">)</span> <span class="c1">// --&gt; removes the class &#39;newclass&#39; from the specified element &#39;header&#39;</span>
<span class="nx">css</span><span class="p">.</span><span class="nx">classes</span><span class="p">(</span><span class="nx">header</span><span class="p">)</span> <span class="c1">// --&gt; returns an Array of classes found on this element</span>
</pre></div>
</code></pre>
<p>Your test suite for this code could look something like (don’t worry, we’ll discuss after)…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Test Suite</span>
<span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;CSS tests&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">header</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;my-header&#39;</span><span class="p">);</span>

    <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Reset the className before each spec is run</span>
        <span class="nx">header</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;myclassa myclassb&#39;</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="c1">// Spec</span>
    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should return an Array of class names&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">expect</span><span class="p">(</span><span class="nx">css</span><span class="p">.</span><span class="nx">classes</span><span class="p">(</span><span class="nx">header</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">([</span><span class="s1">&#39;myclassa&#39;</span><span class="p">,</span> <span class="s1">&#39;myclassb&#39;</span><span class="p">]);</span>
        <span class="nx">expect</span><span class="p">(</span><span class="nx">css</span><span class="p">.</span><span class="nx">classes</span><span class="p">(</span><span class="nx">header</span><span class="p">).</span><span class="nx">length</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">// Spec</span>
    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add class to element&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">css</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="s1">&#39;newclass&#39;</span><span class="p">);</span>
        <span class="nx">expect</span><span class="p">(</span><span class="nx">header</span><span class="p">.</span><span class="nx">className</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;myclassa myclassb newclass&#39;</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">// Spec</span>
    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should return a boolean for whether the class is on the given element&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">expect</span><span class="p">(</span><span class="nx">css</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="s1">&#39;myclassa&#39;</span><span class="p">)).</span><span class="nx">toBeTruthy</span><span class="p">();</span>
        <span class="nx">expect</span><span class="p">(</span><span class="nx">css</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="s1">&#39;newclass&#39;</span><span class="p">)).</span><span class="nx">toBeFalsy</span><span class="p">();</span> <span class="c1">// although in the previous spec we added &#39;newclass&#39; to the element, in this spec this assertion should return false because the beforeEach method above has reset the class list back to &#39;myclassa myclassb&#39;</span>
    <span class="p">});</span>

    <span class="c1">// Spec</span>
    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should remove class from element&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">css</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="s1">&#39;myclassb&#39;</span><span class="p">);</span>
        <span class="nx">expect</span><span class="p">(</span><span class="nx">header</span><span class="p">.</span><span class="nx">className</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;myclassa&#39;</span><span class="p">);</span>
    <span class="p">});</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>…so a few things you’ll notice:</p>
<ul>
<li>We’ve grouped all our tests related to the CSS part of our code using Jasmine’s <pre><code><div class="highlight"><pre>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;test suite name&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span> <span class="cm">/* tests */</span> <span class="p">});</span>
</pre></div>
</code></pre>
</li>
<li>We’re using a setUp method (which Jasmine calls <code>beforeEach</code>) to run some code to reset the class names before each test run (so we start from a clean slate for each test) - there is also a corresponding tearDown method which Jasmine calls <code>afterEach</code> (see documentation)</li>
<li>Each test is represented by <code>it(&#39;expectation of this test&#39;, function(){ /* assertions */ });</code></li>
<li>The assertions are handled by Jasmine’s <code>expect(expressions).matcher</code></li>
</ul>
<p>The assertions method <code>expect</code> takes an expression (e.g. some code to execute) and then the result of that code is passed to the <em>matcher</em>. Our tests consisted of a few matchers such as:</p>
<ul>
<li><code>toEqual()</code></li>
<li><code>toBe()</code></li>
<li><code>toBeTruthy()</code></li>
<li><code>toBeFalsey()</code></li>
</ul>
<p>Jasmine has a few more matchers which you can read more about in the documentation: <a href="https://github.com/pivotal/jasmine/wiki/Matchers"><a href="https://github.com/pivotal/jasmine/wiki/Matchers">https://github.com/pivotal/jasmine/wiki/Matchers</a></a></p>
<p>You can even create your own matchers…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// Add our two new matchers. One to check if an object is an Array and the other to check if the result is a Number</span>
<span class="c1">// You create these within the beforeEach method which is executed before each test is run</span>
<span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">addMatchers</span><span class="p">({</span>
        <span class="nx">toBeArray</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actual</span><span class="p">);</span> <span class="o">===</span> <span class="s1">&#39;[object Array]&#39;</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">addMatchers</span><span class="p">({</span>
        <span class="nx">toBeNumber</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="sr">/\d+/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">actual</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h2><a name="review-of-example"class="anchor" href="#review-of-example"><span class="header-link"></span></a>Review of example</h2>
<p>We’ll look at one of the example tests and explain what’s happening so you get an idea of how Jasmine works, then from there you should be at least good to go in getting up and running and playing around with it yourself.</p>
<p>I’ve set-up an example of the code found in this post on Github: <a href="https://github.com/Integralist/Unit-testing-with-Jasmine-BDD"><a href="https://github.com/Integralist/Unit-testing-with-Jasmine-BDD">https://github.com/Integralist/Unit-testing-with-Jasmine-BDD</a></a> (which should also help you getting started)</p>
<p>So lets look at one of the tests…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add class to element&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">css</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">header</span><span class="p">,</span> <span class="s1">&#39;newclass&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">header</span><span class="p">.</span><span class="nx">className</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;myclassa myclassb newclass&#39;</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>…as you can see the test starts by describing what is expected of it. In this case it should add a class to the specified element.</p>
<p>Within the execution of the test itself we can see that we’re executing the <code>css.add()</code> method and telling it to add the class <code>newclass</code> to the element <code>header</code> (which as you can see in the full code above was an element with an id of <code>my-header</code> stored in the variable <code>header</code>).</p>
<p>After that code has executed we’re expecting the header element’s className value to be <code>myclassa myclassb newclass</code>.</p>
<p>If we were to run the test-runner.html file we should see all tests pass (this is demonstrated by the green bar and the message of <code>4 specs, 0 failure</code>).</p>
<p>To see the test suite fail then just amend one of the tests slightly to cause it to fail. For example in the above example we looked at change it to: <code>toBe(‘x myclassa myclassb newclass’)</code> and this will cause the test to fail because obviously the list of class names on the header element is not going to include the class name ‘x’ at the start.</p>
<p>Now when you run the test-runner.html file (remembering that now one of the tests will fail) you’ll see that instead of a nice clean green bar to highlight success you see a red bar and a drill down into the issue. If you do as I suggested above to cause the test to fail you’ll notice now Jasmine highlights exactly what the problem is to you…</p>
<p><a href="http://cl.ly/1z3b1g3U1z0e2r2U2c2H">See screenshot image</a></p>
<pre><code class="lang-sh"><div class="highlight"><pre>4 specs, 1 failure in 0.014s
&gt; CSS tests <span class="o">(</span>this is the name of the <span class="nb">test </span>suite that failed - as you could have multiple suites running this helps narrow it down<span class="o">)</span>
&gt;&gt; should add class to element <span class="o">(</span>this tells you the exact <span class="nb">test </span>that fails<span class="o">)</span>
&gt;&gt;&gt; Expected <span class="s1">&#39;myclassa myclassb newclass&#39;</span> to be <span class="s1">&#39;x myclassa myclassb newclass&#39;</span>. <span class="o">(</span>this tells you what the result actually was followed by what the <span class="nb">test </span>was expecting - so you can see where the result went wrong<span class="o">)</span>
&gt;&gt;&gt;&gt; <span class="o">(</span>after this you get a stack trace of what was executed so you can see specifics of where the error occurred<span class="o">)</span>
</pre></div>
</code></pre>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>Hopefully this has given you a taster for how easy it is to get started writing unit-tests for your code (even if you don’t take the “write tests first” approach).</p>
<p>There are many good unit-testing libraries available today and they each have their pros/cons as far as the API is concerned and the features they offer.</p>
<p>I personally prefer Jasmine because I love the simplicity of the terminology and API and the flexibility I have to include my own matchers.</p>
<p>There are also libraries that focus on the more on specific parts of the testing process such as ‘mocks’, ‘stubs’ and ‘spies’ (see Sinon.js <a href="http://sinonjs.org/"><a href="http://sinonjs.org/">http://sinonjs.org/</a></a>).</p>
]]></description><link>http://www.integralist.co.uk/posts/beginners-guide-on-how-to-test-your-code/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/beginners-guide-on-how-to-test-your-code/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Mon, 02 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Regex Popup Window]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 4mins</em></p>
<ul>
<li>Introduction</li>
<li>The (original) Regex Solution</li>
<li>Example Code</li>
<li>Update 1</li>
<li>Update 2</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>This is a quick post to show you how to open up external website links within a pop-up window (without adding extra non semantic mark-up to your HTML code).</p>
<p>In the past I’ve heard a lot of people talk about adding either custom attributes or using existing attributes such as <code>rel</code> as a hook for your JavaScript code to find links that should open in a pop-up window. I disagree, and suggest using Regular Expressions (regexes) along with some procedural code to help figure this out for you (it will save you the time and hassle of adding this extra mark-up yourself).</p>
<p>This solution is an updated version. The previous version was recklessly using <a href="http://www.regular-expressions.info/brackets.html">capture groups</a> when really they should have been using non-capturing groups (as the brackets in the following solution are solely for applying <a href="http://www.regular-expressions.info/repeat.html">quantifiers</a> and <a href="http://www.regular-expressions.info/optional.html">optional items</a>). The reason you should use capturing groups sparingly is to do with performance and saving the regex engine from having to remember content within the capturing groups. The Regular Expression checks for things like whether the URL is an SSL protected URL and uses a <a href="http://www.regular-expressions.info/lookaround.html">negative look ahead assertion</a> to make sure that it doesn’t incorrectly match URL’s that <em>appear</em> to be external (e.g. they start with a http) but in fact actually are links to the current website URL (this happens a lot with Content Management Systems where a user will copy and paste the full URL to one of their own pages).</p>
<h2><a name="the-original-regex-solution"class="anchor" href="#the-original-regex-solution"><span class="header-link"></span></a>The (original) Regex Solution</h2>
<p><code>^http(?:s)?:\/\/(?!(?:www.)?integralist)</code></p>
<h2><a name="example-code"class="anchor" href="#example-code"><span class="header-link"></span></a>Example Code</h2>
<pre><code class="lang-js"><div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * The Integralist global namespace object.</span>
<span class="cm"> *</span>
<span class="cm"> * @class Integralist</span>
<span class="cm"> * @singleton</span>
<span class="cm"> * @static</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">Integralist</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Constructor</span>
<span class="p">}</span>

<span class="cm">/**</span>
<span class="cm"> * Augment the Integralist class so it includes a method</span>
<span class="cm"> * which finds all &lt;a&gt; elements that link to an external website</span>
<span class="cm"> * and sets them to open in a popup window</span>
<span class="cm"> */</span>
<span class="nx">Integralist</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">external</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// Required to keep scope within the following Closure</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">settings</span> <span class="o">=</span> <span class="s1">&#39;location=yes,resizable=yes,width=&#39;</span> <span class="o">+</span> <span class="nx">screen</span><span class="p">.</span><span class="nx">availWidth</span> <span class="o">+</span> <span class="s1">&#39;,height=&#39;</span> <span class="o">+</span> <span class="nx">screen</span><span class="p">.</span><span class="nx">availHeight</span> <span class="o">+</span> <span class="s1">&#39;,scrollbars=1,left=0,top=0&#39;</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">popup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
        <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="s1">&#39;external&#39;</span> <span class="p">,</span> <span class="nx">that</span><span class="p">.</span><span class="nx">settings</span><span class="p">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">};</span>
    <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="c1">// Private variable to store HTMLCollection of all &lt;a&gt; elements</span>
        <span class="nx">len</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="c1">// Store array length in variable</span>
        <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/^http(?:s)?:\/\/(?!(?:www.)?integralist)/</span><span class="p">;</span> <span class="c1">// RegExp pattern to match any external URL&#39;s but not the current website</span>

    <span class="c1">// Loop through the array checking for any A elements that link to an external URL</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">len</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">len</span><span class="p">].</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">a</span><span class="p">[</span><span class="nx">len</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">popup</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">len</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// Create a singleton of the Integralist Class</span>
<span class="kd">var</span> <span class="nx">Integralist</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Integralist</span><span class="p">();</span>

<span class="c1">// Trigger &#39;external&#39; method</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">Integralist</span><span class="p">.</span><span class="nx">external</span><span class="p">;</span>
</pre></div>
</code></pre>
<h2><a name="update-1"class="anchor" href="#update-1"><span class="header-link"></span></a>Update 1</h2>
<p>Tweaked the regex again to make it simpler. Decided using a character class for just a single dot character was pointless, might as well just escape the dot. Also got rid of the non-capturing group around the s in https and just used an optional token <code>?</code> on its own as again it was pointless wrapping a single character in a non-capturing group.</p>
<p><code>^https?:\/\/(?!(?:www\.)?integralist)</code></p>
<h2><a name="update-2"class="anchor" href="#update-2"><span class="header-link"></span></a>Update 2</h2>
<p>I’ve ended up tweaking the regex again to take into account files that don’t start with http but should still open in a pop-up window. For example if a website links to a self hosted PDF file it might store it in the following directory path <code>Assets/Documents/MyFile.pdf</code>. First thing I did was add a case-insensitive modifier flag (which I simply forgot last time). Now to work around the issue of linking to internal documents that should open in a pop-up I place a non-capturing group after the opening anchor <code>^</code>. Within this group it has a character class that allows a period <code>.</code> and a forward slash <code>/</code> and uses a quantifier <code>+</code> so it matches 1 or more times. I then make the whole group optional. Next, we take the original regex and wrap it in a non-capturing group and place it after the preceding code. Inside the non-capturing group, at the start we add the name of the directory we are looking for (in this case I just need to look for the word “Assets” and I know it’s going to link to a document and not a HTML file). I then put in the alternator meta-character so it will look for “Assets” and if it can’t find it the regex engine will backtrack to this point and try the rest of the regex which we’ve already discussed. So the final regex looks like this…</p>
<p><code>^(?:[.\/]+)?(?:Assets|https?:\/\/(?!(?:www\.)?integralist))</code></p>
]]></description><link>http://www.integralist.co.uk/posts/regex-popup-window/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/regex-popup-window/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 01 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[jQuery Mobile - loading script files]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 3mins</em></p>
<ul>
<li>Introduction</li>
<li>My solution</li>
<li>Example code</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p>I’m working on a jQuery Mobile web application and I need to load specific JavaScript files for each page.</p>
<p>This is a common thing to do and if you check the jQuery Mobile forum you’ll see lots of people are suffering from the same issue that occurs when trying to achieve this, which is that when loading a page using ajax, jQuery is stripping out the <code>&lt;script&gt;</code> tags - I assume for security reasons to help protect the user, but then if they were doing that then they should be providing the user with a way to disable that feature as in my case I know the scripts I’m loading are safe.</p>
<h2><a name="my-solution"class="anchor" href="#my-solution"><span class="header-link"></span></a>My solution</h2>
<p>So far on the jQuery Mobile Forums I’ve only really seen the same ‘solution’ proposed over and over which is to have all your JavaScript in a single script file that you include on every page of your application. In my opinion: that stinks!</p>
<p>I potentially will have LOTS of JavaScript code (in total) to load by the time my application is finished and the only solution proposed so far has been “hey, just load it all together on every page”.</p>
<p>My solution: have a single script file that yes is included on every page of your application but acts as nothing more than a ‘bootstrapper’ file which detects the current page and then inserts the JavaScript file(s) into the DOM.</p>
<h2><a name="example-code"class="anchor" href="#example-code"><span class="header-link"></span></a>Example Code</h2>
<p>First we need to write a function to insert our script(s):</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">function</span> <span class="nx">insertScript</span><span class="p">(</span><span class="nx">script</span><span class="p">,</span> <span class="nx">container</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
    <span class="nx">elem</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span>
    <span class="nx">elem</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;Assets/Scripts/&#39;</span> <span class="o">+</span> <span class="nx">script</span> <span class="o">+</span> <span class="s1">&#39;.js&#39;</span><span class="p">;</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">elem</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>Next we need to detect the current page (details are in the code comments):</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="c1">// The &#39;pagechange&#39; event is triggered after the changePage() request has finished loading the page into the DOM </span>
<span class="c1">// and all page transition animations have completed.</span>
<span class="c1">// See: https://gist.github.com/1336327 for some other page events</span>
<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;pagechange&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>

    <span class="c1">// grab a list of all the divs&#39;s found in the page that have the attribute &quot;role&quot; with a value of &quot;page&quot;</span>
    <span class="kd">var</span> <span class="nx">pages</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div[data-role=&quot;page&quot;]&#39;</span><span class="p">),</span>

        <span class="c1">// the current page is always the last div in the Array, so we store it in a variable</span>
        <span class="nx">currentPage</span> <span class="o">=</span> <span class="nx">pages</span><span class="p">[</span><span class="nx">pages</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>

        <span class="c1">// grab the url of the page the  was loaded from (e.g. what page have we just ajax&#39;ed into view)</span>
        <span class="nx">attr</span> <span class="o">=</span> <span class="nx">currentPage</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-url&#39;</span><span class="p">);</span>

    <span class="c1">// basic conditional checks for the url we&#39;re expecting</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;home.html&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// now we know what page we&#39;re on we can insert the required scripts.</span>
        <span class="c1">// In this case i&#39;m inserting a &#39;script.js&#39; file.</span>
        <span class="c1">// I do this by passing through the name of the file and the &#39;currentPage&#39; variable</span>
        <span class="nx">insertScript</span><span class="p">(</span><span class="s1">&#39;search&#39;</span><span class="p">,</span> <span class="nx">currentPage</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// rinse and repeat...</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;profile.html&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">insertScript</span><span class="p">(</span><span class="s1">&#39;profile&#39;</span><span class="p">,</span> <span class="nx">currentPage</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>That’s all there is to it.</p>
<p>Let me know your thoughts or if you’ve found any better ways to work around this issue.</p>
]]></description><link>http://www.integralist.co.uk/posts/jquery-mobile-loading-script-files/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/jquery-mobile-loading-script-files/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 01 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[JavaScript Inheritance]]></title><description><![CDATA[<h2><a name="what-we-ll-cover"class="anchor" href="#what-we-ll-cover"><span class="header-link"></span></a>What we&#39;ll cover</h2>
<p><em>reading time: approx. 2mins</em></p>
<ul>
<li>Introduction</li>
<li>Constructors</li>
<li>Example Code</li>
<li>Conclusion</li>
</ul>
<h2><a name="introduction"class="anchor" href="#introduction"><span class="header-link"></span></a>Introduction</h2>
<p><a href="http://en.wikipedia.org/wiki/Class_(object-oriented_programming\">Class based inheritance</a>) doesn’t exist in JavaScript (<em>note: ECMAScript had plans to implement in ES6 basic Class syntax, but as of April 2012 this seems to be in doubt again</em>), but you can replicate its syntax by using functions as Constructors.</p>
<h2><a name="constructors"class="anchor" href="#constructors"><span class="header-link"></span></a>Constructors</h2>
<p>The basic premise to have code that appears more <code>Class</code> like is this: JavaScript functions created using the <code>new</code> keyword work in a similar way to what Class based languages refer to as ‘Constructors’. When a function uses the <code>new</code> keyword the Function object is given a <code>prototype</code> property which points (initially) to an empty object. This empty object can then have methods and properties added to it which will be available to all other objects that point their own prototype link to it.</p>
<h2><a name="example-code"class="anchor" href="#example-code"><span class="header-link"></span></a>Example Code</h2>
<p>A basic example is as follows…</p>
<pre><code class="lang-js"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">settings</span><span class="p">)</span> <span class="p">{</span> <span class="nx">settings</span> <span class="o">=</span> <span class="p">{};</span> <span class="p">}</span> <span class="c1">// code defensively</span>

   <span class="c1">// Instance properties (any new instances of the Person class will have these properties)</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="s1">&#39;no name given&#39;</span><span class="p">;</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">age</span> <span class="o">||</span> <span class="s1">&#39;no age given&#39;</span><span class="p">;</span>

   <span class="c1">// Instance method (any new instances of the Person class will have this method)</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
   <span class="p">};</span>
<span class="p">};</span>

<span class="c1">// Create a new instance of the Person Class</span>
<span class="kd">var</span> <span class="nx">integralist</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Mark&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span><span class="mi">7</span> <span class="p">});</span>

<span class="c1">// Add a method to this instance of the Person Class only (no other instances created will have this method)</span>
<span class="nx">integralist</span><span class="p">.</span><span class="nx">getAge</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Test the integralist instance has access to both methods</span>
<span class="nx">integralist</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>
<span class="nx">integralist</span><span class="p">.</span><span class="nx">getAge</span><span class="p">();</span>

<span class="c1">// Create another instance of the Person Class</span>
<span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="c1">// Notice the user has access to a &#39;getName&#39; method but not a &#39;getAge&#39; method</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>

<span class="c1">// I know this will error so I&#39;m wrapping it in a try statement</span>
<span class="k">try</span> <span class="p">{</span>
   <span class="nx">user</span><span class="p">.</span><span class="nx">getAge</span><span class="p">();</span>
<span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">alert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="c1">// Uncaught TypeError: Object [object Object] has no method &#39;getAge&#39;</span>
<span class="p">}</span>

<span class="c1">// Add a method to the Person Class&#39; prototype chain (all instances of the Person Class will now get this method - even those already defined)</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getNameAndAge</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hi, my name is &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;, and I\&#39;m &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">+</span> <span class="s1">&#39; years old.&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Test this new method is accessible to all instances of the Person Class</span>
<span class="nx">integralist</span><span class="p">.</span><span class="nx">getNameAndAge</span><span class="p">();</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">getNameAndAge</span><span class="p">();</span>
</pre></div>
</code></pre>
<h2><a name="conclusion"class="anchor" href="#conclusion"><span class="header-link"></span></a>Conclusion</h2>
<p>Personally I would suggest you learn how JavaScript implements its own form of inheritance (prototypal inheritance) which is more efficient and nicer to work with than the use of functions as Constructors.</p>
<p>The Mozilla Developer Network has written up a short article on the differences between Class-based and Prototype-based languages which you can find here: <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Details_of_the_Object_Model#Class-Based_vs._Prototype-Based_Languages"><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Details_of_the_Object_Model#Class-Based_vs._Prototype-Based_Languages">https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Details_of_the_Object_Model#Class-Based_vs._Prototype-Based_Languages</a></a></p>
]]></description><link>http://www.integralist.co.uk/posts/javascript-inheritance/</link><guid isPermaLink="true">http://www.integralist.co.uk/posts/javascript-inheritance/</guid><dc:creator><![CDATA[Mark McDonnell]]></dc:creator><pubDate>Sun, 01 Jan 2012 00:00:00 GMT</pubDate></item></channel></rss>